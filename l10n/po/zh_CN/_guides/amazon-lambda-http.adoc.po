# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-07-11 01:24+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/amazon-lambda-http.adoc:6
#, no-wrap
msgid "Quarkus - Amazon Lambda with RESTEasy, Undertow, or Vert.x Web"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:14
msgid "With Quarkus you can deploy your favorite Java HTTP frameworks as Amazon Lambda's using either the https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api.html[AWS Gateway HTTP API] or https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-rest-api.html[AWS Gateway REST API].  This means that you can deploy your microservices written with RESTEasy (JAX-RS), Undertow (servlet), Vert.x Web, link:funqy-http[Funqy HTTP] or any other Quarkus HTTP framework as an AWS Lambda."
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:17
msgid "You can deploy your Lambda as a pure Java jar, or you can compile your project to a native image and deploy that for a smaller memory footprint and startup time.  Our integration also generates SAM deployment files that can be consumed by https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/what-is-sam.html[Amazon's SAM framework]."
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:21
msgid "Quarkus has a different extension for each Gateway API.  The HTTP Gateway API is implemented within the `quarkus-amazon-lambda-http` extension.  The REST Gateway API is implemented within the `quarkus-amazon-lambda-rest` extension.  If you are confused on which Gateway product to use, Amazon has a https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-vs-rest.html[great guide] to help you navigate this decision."
msgstr ""

#. type: Title ==
#: upstream/_guides/amazon-lambda-http.adoc:25
#, no-wrap
msgid "Prerequisites"
msgstr "准备"

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:28
msgid "To complete this guide, you need:"
msgstr "要完成本指南，您需要："

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:30
msgid "less than 30 minutes"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:31
msgid "JDK 11 (AWS requires JDK 1.8 or 11)"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:32
msgid "Apache Maven {maven-version}"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:33
msgid "https://aws.amazon.com[An Amazon AWS account]"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:34
msgid "https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI]"
msgstr ""

#. type: Title ==
#: upstream/_guides/amazon-lambda-http.adoc:35
#, no-wrap
msgid "Getting Started"
msgstr "入门"

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:39
msgid "This guide walks you through generating an example Java project via a maven archetype.  Later on it walks through the structure of the project so you can adapt any existing projects you have to use Amazon Lambda."
msgstr ""

#. type: Title ==
#: upstream/_guides/amazon-lambda-http.adoc:40
#, no-wrap
msgid "Installing AWS bits"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:44
msgid "Installing all the AWS bits is probably the most difficult thing about this guide.  Make sure that you follow all the steps for installing AWS SAM CLI."
msgstr ""

#. type: Title ==
#: upstream/_guides/amazon-lambda-http.adoc:45
#, no-wrap
msgid "Creating the Maven Deployment Project"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:48
msgid "Create the Quarkus AWS Lambda maven project using our Maven Archetype."
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:50
msgid "If you want to use the AWS Gateway HTTP API, generate your project with this script:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-lambda-http.adoc:56
#, no-wrap
msgid ""
"mvn archetype:generate \\\n"
"       -DarchetypeGroupId=io.quarkus \\\n"
"       -DarchetypeArtifactId=quarkus-amazon-lambda-http-archetype \\\n"
"       -DarchetypeVersion={quarkus-version}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:59
msgid "If you want to use the AWS Gateway REST API, generate your project with this script:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-lambda-http.adoc:65
#, no-wrap
msgid ""
"mvn archetype:generate \\\n"
"       -DarchetypeGroupId=io.quarkus \\\n"
"       -DarchetypeArtifactId=quarkus-amazon-lambda-rest-archetype \\\n"
"       -DarchetypeVersion={quarkus-version}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/amazon-lambda-http.adoc:68
#, no-wrap
msgid "Build and Deploy"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:71
msgid "Build the project using maven."
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-lambda-http.adoc:75
#, no-wrap
msgid "./mvnw clean install\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:80
msgid "This will compile the code and run the unit tests included within the generated project.  Unit testing is the same as any other Java project and does not require running on Amazon.  Quarkus dev-mode is also available with this extension."
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:83
msgid "If you want to build for native too, make sure you have GraalVM installed correctly and just add a `native` property to the build"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-lambda-http.adoc:87
#: upstream/_guides/amazon-lambda-http.adoc:157
#, no-wrap
msgid "./mvnw clean install -Dnative\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:92
msgid "If you are building on a non-Linux system, you will need to also pass in a property instructing quarkus to use a docker build as Amazon Lambda requires linux binaries.  You can do this by passing this property to your Maven build: `-Dnative-image.docker-build=true`, or for Gradle: `--docker-build=true`.  This requires you to have docker installed locally, however."
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-lambda-http.adoc:96
#, no-wrap
msgid "./mvnw clean install -Dnative -Dnative-image.docker-build=true\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/amazon-lambda-http.adoc:98
#, no-wrap
msgid "Extra Build Generated Files"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:102
msgid "After you run the build, there are a few extra files generated by the quarkus lambda extension you are using.  These files are in the the build directory: `target/` for maven, `build/` for gradle."
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:104
msgid "`function.zip` - lambda deployment file"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:105
msgid "`sam.jvm.yaml` - sam cli deployment script"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:106
msgid "`sam.native.yaml` - sam cli deployment script for native"
msgstr ""

#. type: Title ==
#: upstream/_guides/amazon-lambda-http.adoc:107
#, no-wrap
msgid "Simulate Amazon Lambda Deployment"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:111
msgid "The AWS SAM CLI allows you to run your lambda's locally on your laptop in a simulated Lambda environment.  This requires docker to be installed (see their install docs).  After you have built your maven project, execute this command"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-lambda-http.adoc:115
#, no-wrap
msgid "sam local start-api --template target/sam.jvm.yaml\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:119
msgid "This will start a docker container that mimics Amazon's Lambda's deployment environment.  Once the environment is started you can invoke the example lambda in your browser by going to"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:121
msgid "http://127.0.0.1:3000/hello"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:124
msgid "In the console you'll see startup messages from the lambda.  This particular deployment starts a JVM and loads your lambda as pure Java."
msgstr ""

#. type: Title ==
#: upstream/_guides/amazon-lambda-http.adoc:126
#, no-wrap
msgid "Deploy to AWS"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-lambda-http.adoc:131
#, no-wrap
msgid "sam deploy -t target/sam.jvm.yaml -g\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:135
msgid "Answer all the questions and your lambda will be deployed and the necessary hooks to the API Gateway will be set up. If everything deploys successfully, the root URL of your microservice will be output to the console.  Something like this:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-lambda-http.adoc:140
#, no-wrap
msgid ""
"Key                 LambdaHttpApi\n"
"Description         URL for application\n"
"Value               https://234asdf234as.execute-api.us-east-1.amazonaws.com/\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:143
msgid "The `Value` attribute is the root URL for your lambda. Copy it to your browser and add `hello` at the end."
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:149
msgid "Responses for binary types will be automatically encoded with base64.  This is different than the behavior using `quarkus:dev` which will return the raw bytes.  Amazon's API has additional restrictions requiring the base64 encoding.  In general, client code will automatically handle this encoding but in certain custom situations, you should be aware you may need to manually manage that encoding."
msgstr ""

#. type: Title ==
#: upstream/_guides/amazon-lambda-http.adoc:150
#, no-wrap
msgid "Deploying a native executable"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:153
msgid "To deploy a native executable, you must build it with Graal."
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:160
msgid "You can then test the executable locally with sam local"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-lambda-http.adoc:164
#, no-wrap
msgid "sam local start-api --template target/sam.native.yaml\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:167
msgid "To deploy to AWS Lambda:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-lambda-http.adoc:170
#, no-wrap
msgid "sam deploy -t target/sam.native.yaml -g\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/amazon-lambda-http.adoc:172
#, no-wrap
msgid "Examine the POM"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:177
msgid "There is nothing special about the POM other than the inclusion of the `quarkus-amazon-lambda-http` extension (if you are deploying an AWS Gateway HTTP API) or the `quarkus-amazon-lambda-rest` extension (if you are deploy an AWS Gateway REST API).  These extensions automatically generate everything you might need for your lambda deployment."
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:181
msgid "Also, at least in the generated maven archetype `pom.xml`, the `quarkus-resteasy`, `quarkus-vertx-web`, and `quarkus-undertow` dependencies are all optional.  Pick which http framework(s) you want to use (JAX-RS, Vertx Web, and/or Servlet) and remove the other dependencies to shrink your deployment."
msgstr ""

#. type: Title ===
#: upstream/_guides/amazon-lambda-http.adoc:182
#, no-wrap
msgid "Examine sam.yaml"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:186
msgid "The `sam.yaml` syntax is beyond the scope of this document.  There's a couple of things that must be highlighted just in case you are going to craft your own custom `sam.yaml` deployment files."
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:189
msgid "The first thing to note is that for pure Java lambda deployments require a specific handler class.  Do not change the Lambda handler name."
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-lambda-http.adoc:195
#, no-wrap
msgid ""
"     Properties:\n"
"        Handler: io.quarkus.amazon.lambda.runtime.QuarkusStreamHandler::handleRequest\n"
"        Runtime: java11\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:198
msgid "This handler is a bridge between the lambda runtime and the Quarkus HTTP framework you are using (JAX-RS, Servlet, etc.)"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:201
msgid "If you want to go native, there's an environment variable that must be set for native GraalVM deployments.  If you look at `sam.native.yaml` you'll see this:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-lambda-http.adoc:207
#, no-wrap
msgid ""
"        Environment:\n"
"          Variables:\n"
"            DISABLE_SIGNAL_HANDLERS: true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:210
msgid "This environment variable resolves some incompatibilities between Quarkus and the Amazon Lambda Custom Runtime environment."
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:215
msgid "Finally, there is one specific thing for AWS Gateway REST API deployments.  That API assumes that HTTP response bodies are text unless you explicitly tell it which media types are binary through configuration.  To make things easier, the Quarkus extension forces a binary (base 64) encoding of all HTTP response messages and the `sam.yaml` file must configure the API Gateway to assume all media types are binary:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-lambda-http.adoc:223
#, no-wrap
msgid ""
"  Globals:\n"
"    Api:\n"
"      EndpointConfiguration: REGIONAL\n"
"      BinaryMediaTypes:\n"
"        - \"*/*\"\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/amazon-lambda-http.adoc:225
#, no-wrap
msgid "Injectable AWS Context Variables"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:229
msgid "If you are using Resteasy and JAX-RS, you can inject various AWS Context variables into your JAX-RS resource classes using the JAX-RS `@Context` annotation."
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:232
msgid "For the AWS HTTP API you can inject the AWS variables `com.amazonaws.services.lambda.runtime.Context` and `com.amazonaws.services.lambda.runtime.events.APIGatewayV2HTTPEvent`.  Here is an example:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-lambda-http.adoc:237
#, no-wrap
msgid ""
"import javax.ws.rs.core.Context;\n"
"import com.amazonaws.services.lambda.runtime.events.APIGatewayV2HTTPEvent;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-lambda-http.adoc:243
#: upstream/_guides/amazon-lambda-http.adoc:267
#, no-wrap
msgid ""
"@Path(\"/myresource\")\n"
"public class MyResource {\n"
"    @GET\n"
"    public String ctx(@Context com.amazonaws.services.lambda.runtime.Context ctx) { }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-lambda-http.adoc:246
#, no-wrap
msgid ""
"    @GET\n"
"    public String event(@Context APIGatewayV2HTTPEvent event) { }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-lambda-http.adoc:249
#, no-wrap
msgid ""
"    @GET\n"
"    public String requestContext(@Context APIGatewayV2HTTPEvent.RequestContext req) { }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-lambda-http.adoc:252
#: upstream/_guides/amazon-lambda-http.adoc:272
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:256
msgid "For the AWS REST API you can inject the AWS variables `com.amazonaws.services.lambda.runtime.Context` and `io.quarkus.amazon.lambda.http.model.AwsProxyRequestContext`.  Here is an example:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-lambda-http.adoc:261
#, no-wrap
msgid ""
"import javax.ws.rs.core.Context;\n"
"import io.quarkus.amazon.lambda.http.model.AwsProxyRequestContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-lambda-http.adoc:270
#, no-wrap
msgid ""
"    @GET\n"
"    public String req(@Context AwsProxyRequestContext req) { }\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/amazon-lambda-http.adoc:274
#, no-wrap
msgid "Tracing with AWS XRay and GraalVM"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-lambda-http.adoc:278
msgid "If you are building native images, and want to use https://aws.amazon.com/xray[AWS X-Ray Tracing] with your lambda you will need to include `quarkus-amazon-lambda-xray` as a dependency in your pom.  The AWS X-Ray library is not fully compatible with GraalVM so we had to do some integration work to make this work."
msgstr ""
