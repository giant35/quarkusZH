# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-07-10 05:20+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/qute-reference.adoc:6
#, no-wrap
msgid "Quarkus - Qute Reference Guide"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:21
msgid "Qute is a templating engine designed specifically to meet the Quarkus needs.  The usage of reflection is minimized to reduce the size of native images.  The API combines both the imperative and the non-blocking reactive style of coding.  In the development mode, all files located in the `src/main/resources/templates` folder are watched for changes and modifications are immediately visible in your application.  Furthermore, Qute attempts to detect most of the template problems at build time and fail fast.  In this guide, you will find an <<hello_world_example,introductory example>>, the description of the <<core_features,core features>> and <<quarkus_integration,Quarkus integration>> details."
msgstr ""

#. type: Title ==
#: upstream/_guides/qute-reference.adoc:23
#, no-wrap
msgid "Hello World Example"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:28
msgid "In this example, we'd like to demonstrate the basic workflow when working with Qute templates.  Let's start with a simple hello world example.  We will always need some *template contents*:"
msgstr ""

#. type: Block title
#: upstream/_guides/qute-reference.adoc:29
#, no-wrap
msgid "hello.html"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:35
#, no-wrap
msgid ""
"<html>\n"
"  <p>Hello {name}! <1>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:37
msgid "`{name}` is a value expression that is evaluated when the template is rendered."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:40
msgid "Then, we will need to parse the contents into a *template definition* Java object.  A template definition is an instance of `io.quarkus.qute.Template`."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:44
msgid "If using Qute \"standalone\" you'll need to create an instance of `io.quarkus.qute.Engine` first.  The `Engine` represents a central point for template management with dedicated configuration.  Let's use the convenient builder:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:48
#, no-wrap
msgid "Engine engine = Engine.builder().addDefaults().build();\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:51
msgid "In Quarkus, there is a preconfigured `Engine` available for injection - see <<quarkus_integration>>."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:53
msgid "Once we have an `Engine` instance we could parse the template contents:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:57
#, no-wrap
msgid "Template helloTemplate = engine.parse(helloHtmlContent);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:60
msgid "In Quarkus, you can simply inject the template definition. The template is automatically parsed and cached - see <<quarkus_integration>>."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:62
msgid "Finally, we will create a *template instance*, set the data and render the output:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:67
#, no-wrap
msgid ""
"// Renders <html><p>Hello Jim!</p></html>\n"
"helloTemplate.data(\"name\", \"Jim\").render(); <1> <2>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:69
msgid "`Template.data(String, Object)` is a convenient method that creates a template instance and sets the data in one step."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:70
msgid "`TemplateInstance.render()` triggers a synchronous rendering, i.e. the current thread is blocked until the rendering is finished. However, there are also asynchronous ways to trigger the rendering and consume the results. For example there is the `TemplateInstance.renderAsync()` method that returns `CompletionStage<String>` or `TemplateInstance.createMulti()` that returns Mutiny's `Multi<String>`."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:72
msgid "So the workflow is simple:"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:74
msgid "Create template contents (`hello.html`),"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:75
msgid "Parse template definition (`io.quarkus.qute.Template`),"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:76
msgid "Create template instance (`io.quarkus.qute.TemplateInstance`),"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:77
msgid "Render output."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:79
msgid "The `Engine` is able to cache the definitions so that it's not necessary to parse the contents again and again. In Quarkus, the caching is done automatically."
msgstr ""

#. type: Title ==
#: upstream/_guides/qute-reference.adoc:81
#, no-wrap
msgid "Core Features"
msgstr ""

#. type: Title ===
#: upstream/_guides/qute-reference.adoc:83
#, no-wrap
msgid "Basic Building Blocks"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:86
msgid "The dynamic parts of a template include comments, expressions, sections and unparsed character data."
msgstr ""

#. type: Title ====
#: upstream/_guides/qute-reference.adoc:87
#, no-wrap
msgid "Comments "
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:91
msgid "A comment starts with `{!` and ends with `!}`, e.g. `{! This is a comment !}`.  It could be multi-line and may contain expressions and sections: `{! {#if true} !}`.  Of course, the content of a comment is completely ignored."
msgstr ""

#. type: Title ===
#: upstream/_guides/qute-reference.adoc:93
#: upstream/_guides/qute-reference.adoc:211
#, no-wrap
msgid "Expressions"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:98
msgid "An <<expressions,expression>> outputs an evaluated value.  It consists of one or more parts.  A part may represent simple properties: `{foo}`, `{item.name}` or virtual methods: `{item.get(name)}`, `{name ?: 'John'}`.  An expression may start with a namespace: `{inject:colors}`."
msgstr ""

#. type: Title ===
#: upstream/_guides/qute-reference.adoc:100
#: upstream/_guides/qute-reference.adoc:488
#, no-wrap
msgid "Sections"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:105
msgid "A <<sections,section>> may contain text, expressions and nested sections: `{#if foo}{foo.name}{/if}`.  The name in the closing tag is optional: `{#if active}ACTIVE!{/}`.  It can be empty: `{#myTag image=true /}`.  A section may declare nested section blocks: `{#if item.valid} Valid. {#else} Invalid. {/if}` and decide which block to render."
msgstr ""

#. type: Title ====
#: upstream/_guides/qute-reference.adoc:106
#, no-wrap
msgid "Unparsed Character Data"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:109
msgid "It is used to mark the content that should be rendered but not parsed.  It starts with `{|` and ends with `|}`: `{| <script>if(true){alert('Qute is cute!')};</script> |}`, and could be multi-line."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:111
msgid "Previously, unparsed character data had to start with `{[` and end with `]}`. This syntax is still supported but we encourage users to switch to the new syntax to avoid some common collisions with constructs from other languages."
msgstr ""

#. type: Title ===
#: upstream/_guides/qute-reference.adoc:113
#, no-wrap
msgid "Identifiers and Tags"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:118
msgid "Identifiers are used in expressions and section tags.  A valid identifier is a sequence of non-whitespace characters.  However, users are encouraged to only use valid Java identifiers in expressions."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:120
msgid "You can use bracket notation if you need to specify an identifier that contains a dot, e.g. `{map['my.key']}`."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:124
msgid "When parsing a template document the parser identifies all _tags_.  A tag starts and ends with a curly bracket, e.g. `{foo}`.  The content of a tag must start with:"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:126
msgid "a digit, or"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:127
msgid "an alphabet character, or"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:128
msgid "underscore, or"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:129
msgid "a built-in command: `#`, `!`, `@`, `/`."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:131
msgid "If it does not start with any of the above it is ignored by the parser."
msgstr ""

#. type: Block title
#: upstream/_guides/qute-reference.adoc:132
#, no-wrap
msgid "Tag Examples"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:144
#, no-wrap
msgid ""
"<html>\n"
"   <body>\n"
"   {_foo.bar}   <1>\n"
"   {! comment !}<2>\n"
"   {  foo}      <3>\n"
"   {{foo}}      <4>\n"
"   {\"foo\":true} <5>\n"
"   </body>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:146
msgid "Parsed: an expression that starts with underscore."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:147
msgid "Parsed: a comment"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:148
msgid "Ignored: starts with whitespace."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:149
msgid "Ignored: starts with `{`."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:150
msgid "Ignored: starts with `\"`."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:152
msgid "It is also possible to use escape sequences `\\{` and `\\}` to insert delimiters in the text. In fact, an escape sequence is usually only needed for the start delimiter, ie. `\\\\{foo}` will be rendered as `{foo}` (no parsing/evaluation will happen)."
msgstr ""

#. type: Title ===
#: upstream/_guides/qute-reference.adoc:153
#, no-wrap
msgid "Removing Standalone Lines From the Template"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:159
msgid "By default, the parser removes standalone lines from the template output.  A *standalone line* is a line that contains at least one section tag (e.g. `{#each}` and `{/each}`), parameter declaration (e.g. `{@org.acme.Foo foo}`) or comment but no expression and no non-whitespace character.  In other words, a line that contains no section tag or a parameter declaration is *not* a standalone line.  Likewise, a line that contains an _expression_ or a _non-whitespace character_ is *not* a standalone line."
msgstr ""

#. type: Block title
#: upstream/_guides/qute-reference.adoc:160
#, no-wrap
msgid "Template Example"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:173
#, no-wrap
msgid ""
"<html>\n"
"  <body>\n"
"     <ul>\n"
"     {#for item in items} <1>\n"
"       <li>{item.name} {#if item.active}{item.price}{/if}</li>  <2>\n"
"                          <3>\n"
"     {/for}               <4>\n"
"     </ul>\n"
"   <body>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:175
msgid "This is a standalone line and will be removed."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:176
msgid "Not a standalone line - contains an expression and non-whitespace characters"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:177
msgid "Not a standalone line - contains no section tag/parameter declaration"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:178
msgid "This is a standalone line."
msgstr ""

#. type: Block title
#: upstream/_guides/qute-reference.adoc:179
#, no-wrap
msgid "Default Output"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:186
#, no-wrap
msgid ""
"<html>\n"
"  <body>\n"
"     <ul>\n"
"       <li>Foo 100</li>  \n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:190
#: upstream/_guides/qute-reference.adoc:208
#, no-wrap
msgid ""
"     </ul>\n"
"   <body>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:194
msgid "In Quarkus, the default behavior can be disabled by setting the property `quarkus.qute.remove-standalone-lines` to `false`.  In this case, all whitespace characters from a standalone line will be printed to the output."
msgstr ""

#. type: Block title
#: upstream/_guides/qute-reference.adoc:195
#, no-wrap
msgid "Output with `quarkus.qute.remove-standalone-lines=false`"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:201
#, no-wrap
msgid ""
"<html>\n"
"  <body>\n"
"     <ul>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:203
#, no-wrap
msgid "       <li>Foo 100</li>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:218
msgid "An expression outputs a value.  It consists of one or more parts separated by dot (dot notation) or square brackets (bracket notation).  In the `object.property` (dot notation) syntax, the `property` must be a <<identifiers,valid identifier>>.  In the `object[property_name]` (bracket notation) syntax, the `property_name` has to be a non-null <<literals, literal>> value.  An expression could start with an optional namespace followed by a colon (`:`)."
msgstr ""

#. type: Block title
#: upstream/_guides/qute-reference.adoc:219
#, no-wrap
msgid "Expressions Example"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:226
#, no-wrap
msgid ""
"{name} <1>\n"
"{item.name} <2>\n"
"{item['name']} <3>\n"
"{global:colors} <4> \n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:228
msgid "no namespace, one part: `name`"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:229
msgid "no namespace, two parts: `item`, `name`"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:230
msgid "equivalent to `{item.name}` but using the bracket notation"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:231
msgid "namespace `global`, one part: `colors`"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:235
msgid "A part of an expression could be a _virtual method_ in which case the name can be followed by a list of comma-separated parameters in parentheses.  A parameter of a virtual method can be either a nested expression or a <<literals, literal>> value.  We call it \"virtual\" because it does not have to be backed by a real Java method."
msgstr ""

#. type: Block title
#: upstream/_guides/qute-reference.adoc:236
#, no-wrap
msgid "Virtual Methods Example"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:241
#, no-wrap
msgid ""
"{item.getLabels(1)} <1>\n"
"{name or 'John'} <2>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:243
msgid "no namespace, two parts - `item`, `getLabels(1)`, the second part is a virtual method with name `getLabels` and params `1`"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:244
msgid "infix notation that can be used for virtual methods with single parameter, translated to `name.or('John')`; no namespace, two parts - `name`, `or('John')`"
msgstr ""

#. type: Title ====
#: upstream/_guides/qute-reference.adoc:246
#, no-wrap
msgid "Supported Literals"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:249
#, no-wrap
msgid "Literal"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:251
#: upstream/_guides/qute-reference.adoc:349
#, no-wrap
msgid "Examples"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:252
#, no-wrap
msgid "boolean"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:254
#, no-wrap
msgid "`true`, `false`"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:255
#, no-wrap
msgid "null"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:257
#, no-wrap
msgid "`null`"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:258
#, no-wrap
msgid "string"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:260
#, no-wrap
msgid "`'value'`, `\"string\"`"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:261
#, no-wrap
msgid "integer"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:263
#, no-wrap
msgid "`1`, `-5`"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:264
#, no-wrap
msgid "long"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:266
#, no-wrap
msgid "`1l`, `-5L`"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:267
#, no-wrap
msgid "double"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:269
#, no-wrap
msgid "`1D`, `-5d`"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:270
#, no-wrap
msgid "float"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:272
#, no-wrap
msgid "`1f`, `-5F`"
msgstr ""

#. type: Title ====
#: upstream/_guides/qute-reference.adoc:274
#, no-wrap
msgid "Resolution"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:281
msgid "The first part of the expression is always resolved against the <<current_context_object, current context object>>.  If no result is found for the first part it's resolved against the parent context object (if available).  For an expression that starts with a namespace the current context object is found using all the available ``NamespaceResolver``s.  For an expression that does not start with a namespace the current context object is *derived from the position* of the tag.  All other parts of an expression are resolved using all ``ValueResolver``s against the result of the previous resolution."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:287
msgid "For example, expression `{name}` has no namespace and single part - `name`.  The \"name\" will be resolved using all available value resolvers against the current context object.  However, the expression `{global:colors}` has the namespace `global` and single part - `colors`.  First, all available ``NamespaceResolver``s will be used to find the current context object.  And afterwards value resolvers will be used to resolve \"colors\" against the context object found."
msgstr ""

#. type: delimited block =
#: upstream/_guides/qute-reference.adoc:292
msgid "Data passed to the template instance are always accessible using the `data` namespace.  This could be useful to access data for which the key is overridden:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:307
#, no-wrap
msgid ""
"<html>\n"
"{item.name} <1>\n"
"<ul>\n"
"{#for item in item.getDerivedItems()} <2>\n"
"  <li>\n"
"  {item.name} <3> \n"
"  is derived from\n"
"  {data:item.name} <4>\n"
"  </li>\n"
"{/for}\n"
"</ul>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:309
msgid "`item` is passed to the template instance as a data object."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:310
msgid "Iterate over the list of derived items."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:311
msgid "`item` is an alias for the iterated element."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:312
msgid "Use the `data` namespace to access the `item` data object."
msgstr ""

#. type: Title ====
#: upstream/_guides/qute-reference.adoc:316
#, no-wrap
msgid "Current Context"
msgstr ""

#. type: delimited block =
#: upstream/_guides/qute-reference.adoc:322
msgid "If an expression does not specify a namespace the _current context object_ is derived from the position of the tag.  By default, the current context object represents the data passed to the template instance.  However, sections may change the current context object.  A typical example is the `with` section that could be used to set the current context object in order to simplify the template structure:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:329
#, no-wrap
msgid ""
"{#with item}\n"
"  <h1>{name}</h1>  <1>\n"
"  <p>{description}</p>\n"
"{/with}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:331
msgid "`name` is resolved against the `item`."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:333
msgid "Another built-in section that modifies the current context object is `let`/`set`:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:339
#, no-wrap
msgid ""
"{#let myParent=order.item.parent myPrice=order.price} <1>\n"
"  <h1>{myParent.name}</h1>\n"
"  <p>Price: {myPrice}</p>\n"
"{/let}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:341
msgid "The current context object inside the section is the map of resolved parameters."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:343
msgid "The current context can be accessed via the implicit binding `this`."
msgstr ""

#. type: Title ====
#: upstream/_guides/qute-reference.adoc:344
#, no-wrap
msgid "Built-in Resolvers"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:347
#, no-wrap
msgid "Name"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:347
#, no-wrap
msgid "Description"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:350
#, no-wrap
msgid "Elvis Operator"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:351
#, no-wrap
msgid "Outputs the default value if the previous part cannot be resolved or resolves to `null`."
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:353
#, no-wrap
msgid "`{person.name ?: 'John'}`, `{person.name or 'John'}`, `{person.name.or('John')}`"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:354
#, no-wrap
msgid "orEmpty"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:355
#, no-wrap
msgid "Outputs an empty list if the previous part cannot be resolved or resolves to `null`."
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:357
#, no-wrap
msgid "`{#for pet in pets.orEmpty}{pet.name}{/for}`"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:358
#, no-wrap
msgid "Ternary Operator"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:359
#, no-wrap
msgid "Shorthand for if-then-else statement. Unlike in <<if_section>> nested operators are not supported."
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:361
#, no-wrap
msgid "`{item.isActive ? item.name : 'Inactive item'}` outputs the value of `item.name` if `item.isActive` resolves to `true`."
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:362
#, no-wrap
msgid "Logical AND Operator"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:363
#, no-wrap
msgid "Outputs `true` if both parts are not `falsy` as described in the <<if_section>>. The parameter is only evaluated if needed."
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:365
#, no-wrap
msgid "`{person.isActive && person.hasStyle}`"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:366
#, no-wrap
msgid "Logical OR Operator"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:367
#, no-wrap
msgid "Outputs `true` if any of the parts is not `falsy` as described in the <<if_section>>. The parameter is only evaluated if needed."
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:367
#, no-wrap
msgid "`{person.isActive \\"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:367
#: upstream/_guides/qute-reference.adoc:619
#, no-wrap
msgid "\\"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:369
#, no-wrap
msgid "person.hasStyle}`"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:372
msgid "The condition in a ternary operator evaluates to `true` if the value is not considered `falsy` as described in the <<if_section>>."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:374
msgid "In fact, the operators are implemented as \"virtual methods\" that consume one parameter and can be used with infix notation. For example `{person.name or 'John'}` is translated to `{person.name.or('John')}` and `{item.isActive ? item.name : 'Inactive item'}` is translated to `{item.isActive.ifTruthy(item.name).or('Inactive item')}`"
msgstr ""

#. type: Title ====
#: upstream/_guides/qute-reference.adoc:375
#, no-wrap
msgid "Arrays"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:378
msgid "You can iterate over elements of an array with the <<loop_section>>. Moreover, it's also possible to get the length of the specified array and access the elements directly via an index value."
msgstr ""

#. type: Block title
#: upstream/_guides/qute-reference.adoc:379
#, no-wrap
msgid "Array Examples"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:393
#, no-wrap
msgid ""
"<h1>Array of length: {myArray.length}</h1> <1>\n"
"<ul>\n"
"  <li>First: {myArray.0}</li> <2>\n"
"  <li>Second: {myArray[1]}</li> <3>\n"
"  <li>Third: {myArray.get(2)}</li> <4>\n"
"</ul>\n"
"<ol>\n"
" {#for element in myArray}\n"
" <li>{element}</li>\n"
" {/for}\n"
"</ol>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:395
msgid "Outputs the length of the array."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:396
msgid "Outputs the first element of the array."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:397
msgid "Outputs the second element of the array using the bracket notation."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:398
msgid "Outputs the third element of the array via the virtual method `get()`."
msgstr ""

#. type: Title ====
#: upstream/_guides/qute-reference.adoc:399
#, no-wrap
msgid "Character Escapes"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:402
msgid "For HTML and XML templates the `'`, `\"`, `<`, `>`, `&` characters are escaped by default if a template variant is set."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:404
msgid "In Quarkus, a variant is set automatically for templates located in the `src/main/resources/templates`. By default, the `java.net.URLConnection#getFileNameMap()` is used to determine the content type of a template file. The additional map of suffixes to content types can be set via `quarkus.qute.content-types`."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:406
msgid "If you need to render the unescaped value:"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:408
msgid "Use the `raw` or `safe` properties implemented as extension methods of the `java.lang.Object`,"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:409
msgid "Wrap the `String` value in a `io.quarkus.qute.RawString`."
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:416
#, no-wrap
msgid ""
"<html>\n"
"<h1>{title}</h1> <1>\n"
"{paragraph.raw} <2>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:418
msgid "`title` that resolves to `Expressions & Escapes` will be rendered as `Expressions &amp;amp; Escapes`"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:419
msgid "`paragraph` that resolves to `<p>My text!</p>` will be rendered as `<p>My text!</p>`"
msgstr ""

#. type: Title ====
#: upstream/_guides/qute-reference.adoc:420
#, no-wrap
msgid "Virtual Methods"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:426
msgid "A virtual method is a *part of an expression* that looks like a regular Java method invocation.  It's called \"virtual\" because it does not have to match the actual method of a Java class.  In fact, like normal properties a virtual method is also handled by a value resolver.  The only difference is that for virtual methods a value resolver consumes parameters that are also expressions."
msgstr ""

#. type: Block title
#: upstream/_guides/qute-reference.adoc:427
#, no-wrap
msgid "Virtual Method Example"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:433
#, no-wrap
msgid ""
"<html>\n"
"<h1>{item.buildName(item.name,5)}</h1> <1>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:435
#, no-wrap
msgid "`buildName(item.name,5)` represents a virtual method with name `buildName` and two parameters: `item.name` and `5` . The virtual method could be evaluated by a value resolver generated for the following Java class:   \n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:443
#, no-wrap
msgid ""
"class Item {\n"
"   String buildName(String name, int age) {\n"
"      return name + \":\" + age;\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:446
msgid "Virtual methods are usually evaluated by value resolvers generated for <<template_extension_methods,@TemplateExtension methods>>, <<template_data,@TemplateData>> or classes used in <<typesafe_expressions,parameter declarations>>. However, a custom value resolver that is not backed by any Java class/method can be registered as well."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:448
msgid "A virtual method with single parameter can be called using the infix notation:"
msgstr ""

#. type: Block title
#: upstream/_guides/qute-reference.adoc:449
#, no-wrap
msgid "Infix Notation Example"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:455
#, no-wrap
msgid ""
"<html>\n"
"<p>{item.price or 5}</p>  <1>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:457
msgid "`item.price or 5` is translated to `item.price.or(5)`."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:459
msgid "Virtual method parameters can be \"nested\" virtual method invocations."
msgstr ""

#. type: Block title
#: upstream/_guides/qute-reference.adoc:460
#, no-wrap
msgid "Nested Virtual Method Example"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:466
#, no-wrap
msgid ""
"<html>\n"
"<p>{item.subtractPrice(item.calculateDiscount(10))}</p>  <1>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:468
msgid "`item.calculateDiscount(10)` is evaluated first and then passed as an argument to `item.subtractPrice()`."
msgstr ""

#. type: Title ====
#: upstream/_guides/qute-reference.adoc:469
#, no-wrap
msgid "Evaluation of `CompletionStage` and `Uni` Objects"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:475
msgid "Objects that implement `java.util.concurrent.CompletionStage` and `io.smallrye.mutiny.Uni` are evaluated in a special way.  If a part of an expression resolves to a `CompletionStage`, the resolution continues once this stage is completed and the next part of the expression (if any) is evaluated against the result of the completed stage.  For example, if there is an expression `{foo.size}` and `foo` resolves to `CompletionStage<List<String>>` then `size` is resolved against the completed result, i.e. `List<String>`.  If a part of an expression resolves to a `Uni`, a `CompletionStage` is first created from `Uni` using `Uni#subscribeAsCompletionStage()` and then evaluated as described above."
msgstr ""

#. type: Title ====
#: upstream/_guides/qute-reference.adoc:476
#, no-wrap
msgid "Missing Properties"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:482
msgid "It can happen that an expression may not be evaluated at runtime.  For example, if there is an expression `{person.age}` and there is no property `age` declared on the `Person` class.  Qute outputs the special constant `NOT_FOUND` in this case by default.  However, it's possible to change the default strategy via the `quarkus.qute.property-not-found-strategy` as described in the <<configuration-reference>>."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:484
msgid "Similar errors are detected at build time if <<typesafe_expressions>> and <<typesafe_templates>> are used."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:486
msgid "Alternatively, the _elvis operator_ can be used to output the default value in case the property cannot be resolved or resolves to `null`: `{person.age ?: 10}` would output `10`. And for the loop section, the `orEmpty` resolver can be used. See also <<built-in-resolvers>>."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:491
msgid "A section:"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:493
msgid "has a start tag"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:494
msgid "starts with `#`, followed by the name of the section such as `{#if}` and `{#each}`,"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:495
msgid "may be empty"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:496
msgid "tag ends with `/`, ie. `{#emptySection /}`"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:497
msgid "may contain other expression, sections, etc."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:498
msgid "the end tag starts with `/` and contains the name of the section (optional): `{#if foo}Foo!{/if}` or `{#if foo}Foo!{/}`,"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:505
msgid "The start tag can also define parameters.  The parameters have optional names.  A section may contain several content *blocks*.  The \"main\" block is always present.  Additional/nested blocks also start with `#` and can have parameters too - `{#else if item.isActive}`.  A section helper that defines the logic of a section can \"execute\" any of the blocks and evaluate the parameters."
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:515
#, no-wrap
msgid ""
"{#if item.name is 'sword'}\n"
"  It's a sword!\n"
"{#else if item.name is 'shield'}\n"
"  It's a shield!\n"
"{#else}\n"
"  Item is neither a sword nor a shield.\n"
"{/if}\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/qute-reference.adoc:518
#, no-wrap
msgid "Loop Section"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:523
msgid "The loop section makes it possible to iterate over an instance of `Iterable`, `Map` 's entry set, `Stream` and an `Integer`.  It has two flavors.  The first one is using the `each` name alias."
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:529
#, no-wrap
msgid ""
"{#each items}\n"
"  {it.name} <1>\n"
"{/each}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:531
msgid "`it` is an implicit alias. `name` is resolved against the current iteration element."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:533
msgid "The other form is using the `for` name alias and can specify the alias used to reference the iteration element:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:539
#, no-wrap
msgid ""
"{#for item in items}\n"
"  {item.name}\n"
"{/for}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:542
msgid "It's also possible to access the iteration metadata inside the loop:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:548
#, no-wrap
msgid ""
"{#each items}\n"
"  {count}. {it.name} <1>\n"
"{/each}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:550
msgid "`count` represents one-based index. Metadata also include zero-based `index`, `hasNext`, `odd` and `even`."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:552
msgid "The `for` statement also works with integers, starting from 1. In the example below, considering that `total = 3`:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:558
#, no-wrap
msgid ""
"{#for i in total}\n"
"  {i}:\n"
"{/for}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:561
msgid "The output will be:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:565
#, no-wrap
msgid "1:2:3:\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/qute-reference.adoc:568
#, no-wrap
msgid "If Section"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:573
msgid "The `if` section represents a basic control flow section.  The simplest possible version accepts a single parameter and renders the content if the condition is evaluated to `true`.  A condition without an operator evaluates to `true` if the value is not considered `falsy`, i.e. if the value is not `null`, `false`, an empty collection, an empty map, an empty array, an empty string/char sequence or a number equal to zero."
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:579
#, no-wrap
msgid ""
"{#if item.active}\n"
"  This item is active.\n"
"{/if}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:582
msgid "You can also use the following operators in a condition:"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:584
#: upstream/_guides/qute-reference.adoc:726
#, no-wrap
msgid "Operator"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:584
#: upstream/_guides/qute-reference.adoc:726
#, no-wrap
msgid "Aliases"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:586
#, no-wrap
msgid "Precedence (higher wins)"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:587
#, no-wrap
msgid "logical complement"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:588
#, no-wrap
msgid "`!`"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:590
#, no-wrap
msgid "4"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:591
#: upstream/_guides/qute-reference.adoc:733
#, no-wrap
msgid "greater than"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:592
#: upstream/_guides/qute-reference.adoc:734
#, no-wrap
msgid "`gt`, `>`"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:594
#: upstream/_guides/qute-reference.adoc:598
#: upstream/_guides/qute-reference.adoc:602
#: upstream/_guides/qute-reference.adoc:606
#, no-wrap
msgid "3"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:595
#: upstream/_guides/qute-reference.adoc:737
#, no-wrap
msgid "greater than or equal to"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:596
#: upstream/_guides/qute-reference.adoc:738
#, no-wrap
msgid "`ge`, `>=`"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:599
#: upstream/_guides/qute-reference.adoc:741
#, no-wrap
msgid "less than"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:600
#: upstream/_guides/qute-reference.adoc:742
#, no-wrap
msgid "`lt`, `<`"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:603
#: upstream/_guides/qute-reference.adoc:745
#, no-wrap
msgid "less than or equal to"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:604
#: upstream/_guides/qute-reference.adoc:746
#, no-wrap
msgid "`le`, `\\<=`"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:607
#, no-wrap
msgid "equals"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:608
#, no-wrap
msgid "`eq`, `==`, `is`"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:610
#: upstream/_guides/qute-reference.adoc:614
#, no-wrap
msgid "2"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:611
#, no-wrap
msgid "not equals"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:612
#, no-wrap
msgid "`ne`, `!=`"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:615
#, no-wrap
msgid "logical AND (short-circuiting)"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:616
#, no-wrap
msgid "`&&`, `and`"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:618
#: upstream/_guides/qute-reference.adoc:622
#, no-wrap
msgid "1"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:619
#, no-wrap
msgid "logical OR (short-circuiting)"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:619
#, no-wrap
msgid "`\\"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:620
#, no-wrap
msgid "`, `or`"
msgstr ""

#. type: Block title
#: upstream/_guides/qute-reference.adoc:624
#, no-wrap
msgid "A simple operator example"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:630
#, no-wrap
msgid ""
"{#if item.age > 10}\n"
"  This item is very old.\n"
"{/if}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:633
msgid "Multiple conditions are also supported."
msgstr ""

#. type: Block title
#: upstream/_guides/qute-reference.adoc:634
#, no-wrap
msgid "Multiple conditions example"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:640
#, no-wrap
msgid ""
"{#if item.age > 10 && item.price > 500}\n"
"  This item is very old and expensive.\n"
"{/if}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:643
msgid "Precedence rules can be overridden by parentheses."
msgstr ""

#. type: Block title
#: upstream/_guides/qute-reference.adoc:644
#, no-wrap
msgid "Parentheses example"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:650
#, no-wrap
msgid ""
"{#if (item.age > 10 || item.price > 500) && user.loggedIn}\n"
"  User must be logged in and item age must be > 10 or price must be > 500.\n"
"{/if}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:654
msgid "You can also add any number of `else` blocks:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:666
#, no-wrap
msgid ""
"{#if item.age > 10}\n"
"  This item is very old.\n"
"{#else if item.age > 5}\n"
"  This item is quite old.\n"
"{#else if item.age > 2}\n"
"  This item is old.\n"
"{#else}\n"
"  This item is not old at all!\n"
"{/if}\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/qute-reference.adoc:669
#, no-wrap
msgid "When/Switch Section"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:675
msgid "This section is similar to Java's `switch` or Kotlin's `when` constructs.  It matches a _tested value_ against all blocks sequentially until a condition is satisfied.  The first matching block is executed.  All other blocks are ignored (this behavior differs to the Java `switch` where a `break` statement is necessary)."
msgstr ""

#. type: Block title
#: upstream/_guides/qute-reference.adoc:676
#, no-wrap
msgid "Example using the `when`/`is` name aliases"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:687
#, no-wrap
msgid ""
"{#when items.size}\n"
"  {#is 1} <1>\n"
"    There is exactly one item!\n"
"  {#is > 10} <2>\n"
"    There are more than 10 items!\n"
"  {#else} <3>\n"
"    There are 2 -10 items!\n"
"{/when}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:689
msgid "If there is exactly one parameter it's tested for equality."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:690
msgid "It's possible to use <<when_operators,an operator>> to specify the matching logic. Unlike in the <<if_section>> nested operators are not supported."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:691
msgid "`else` is block is executed if no other block matches the value."
msgstr ""

#. type: Block title
#: upstream/_guides/qute-reference.adoc:692
#, no-wrap
msgid "Example using the `switch`/`case` name aliases"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:701
#, no-wrap
msgid ""
"{#switch person.name}\n"
"  {#case 'John'} <1>\n"
"    Hey John!\n"
"  {#case 'Mary'}\n"
"    Hey Mary!\n"
"{/switch}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:703
msgid "`case` is an alias for `is`."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:706
msgid "A tested value that resolves to an enum is handled specifically.  The parameters of an `is`/`case` block are not evaluated as expressions but compared with the result of `toString()` invocation upon the tested value."
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:715
#, no-wrap
msgid ""
"{#when machine.status}\n"
"  {#is ON} \n"
"    It's running. <1>\n"
"  {#is in OFF BROKEN}\n"
"    It's broken or OFF. <2>\n"
"{/when}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:717
msgid "This block is executed if `machine.status.toString().equals(\"ON\")`."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:718
msgid "This block is executed if `machine.status.toString().equals(\"OFF\")` or `machine.status.toString().equals(\"BROKEN\")`."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:720
msgid "An enum constant is validated if the tested value has a type information available and resolves to an enum type."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:722
msgid "The following operators are supported in `is`/`case` block conditions:"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:728
#, no-wrap
msgid "Example"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:729
#, no-wrap
msgid "not equal"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:730
#, no-wrap
msgid "`!=`, `not`, `ne`"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:732
#, no-wrap
msgid "`{#is not 10}`,`{#case != 10}`"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:736
#: upstream/_guides/qute-reference.adoc:748
#, no-wrap
msgid "`{#case le 10}`"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:740
#, no-wrap
msgid "`{#is >= 10}`"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:744
#, no-wrap
msgid "`{#is < 10}`"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:749
#, no-wrap
msgid "in"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:750
#, no-wrap
msgid "`in`"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:752
#, no-wrap
msgid "`{#is in 'foo' 'bar' 'baz'}`"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:753
#, no-wrap
msgid "not in"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:754
#, no-wrap
msgid "`ni`,`!in`"
msgstr ""

#. type: Table
#: upstream/_guides/qute-reference.adoc:756
#, no-wrap
msgid "`{#is !in 1 2 3}`"
msgstr ""

#. type: Title ====
#: upstream/_guides/qute-reference.adoc:760
#, no-wrap
msgid "With Section"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:764
msgid "This section can be used to set the current context object.  This could be useful to simplify the template structure:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:771
#, no-wrap
msgid ""
"{#with item.parent}\n"
"  <h1>{name}</h1>  <1>\n"
"  <p>{description}</p> <2>\n"
"{/with}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:773
msgid "The `name` will be resolved against the `item.parent`."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:774
msgid "The `description` will be also resolved against the `item.parent`."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:776
msgid "This section might also come in handy when we'd like to avoid multiple expensive invocations:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:786
#, no-wrap
msgid ""
"{#with item.callExpensiveLogicToGetTheValue(1,'foo',bazinga)}\n"
"  {#if this is \"fun\"} <1>\n"
"    <h1>Yay!</h1>\n"
"  {#else}\n"
"    <h1>{this} is not fun at all!</h1>\n"
"  {/if}\n"
"{/with}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:788
msgid "`this` is the result of `item.callExpensiveLogicToGetTheValue(1,'foo',bazinga)`. The method is only invoked once even though the result may be used in multiple expressions."
msgstr ""

#. type: Title ====
#: upstream/_guides/qute-reference.adoc:789
#, no-wrap
msgid "Let/Set Section"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:792
msgid "This section allows you to define named local variables:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:799
#, no-wrap
msgid ""
"{#let myParent=order.item.parent isActive=false age=10} <1>\n"
"  <h1>{myParent.name}</h1>\n"
"  Is active: {isActive}\n"
"  Age: {age}\n"
"{/let}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:801
msgid "The local variable is initialized with an expression that can also represent a <<literals,literal>>."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:803
msgid "The section tag is also registered under the `set` alias:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:810
#, no-wrap
msgid ""
"{#set myParent=item.parent price=item.price}\n"
"  <h1>{myParent.name}</h1>\n"
"  <p>Price: {price}\n"
"{/set}\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/qute-reference.adoc:814
#, no-wrap
msgid "Include Section"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:817
msgid "This section can be used to include another template and possibly override some parts of the template (template inheritance)."
msgstr ""

#. type: Block title
#: upstream/_guides/qute-reference.adoc:818
#, no-wrap
msgid "Simple Example"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:830
#, no-wrap
msgid ""
"<html>\n"
"<head>\n"
"<meta charset=\"UTF-8\">\n"
"<title>Simple Include</title>\n"
"</head>\n"
"<body>\n"
"  {#include foo limit=10 /} <1><2>\n"
"</body>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:832
msgid "Include a template with id `foo`. The included template can reference data from the current context."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:833
msgid "It's also possible to define optional parameters that can be used in the included template."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:835
msgid "Template inheritance makes it possible to reuse template layouts."
msgstr ""

#. type: Block title
#: upstream/_guides/qute-reference.adoc:836
#, no-wrap
msgid "Template \"base\""
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:848
#, no-wrap
msgid ""
"<html>\n"
"<head>\n"
"<meta charset=\"UTF-8\">\n"
"<title>{#insert title}Default Title{/}</title> <1>\n"
"</head>\n"
"<body>\n"
"  {#insert}No body!{/} <2>\n"
"</body>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:850
msgid "`insert` sections are used to specify parts that could be overridden by a template that includes the given template."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:851
msgid "An `insert` section may define the default content that is rendered if not overridden. If no name parameter is supplied then the main block of the relevant `{#include}` section is used."
msgstr ""

#. type: Block title
#: upstream/_guides/qute-reference.adoc:852
#, no-wrap
msgid "Template \"detail\""
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:861
#, no-wrap
msgid ""
"{#include base} <1>\n"
"  {#title}My Title{/title} <2>\n"
"  <div> <3>\n"
"    My body.\n"
"  </div>\n"
"{/include}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:863
msgid "`include` section is used to specify the extended template."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:864
msgid "Nested blocks are used to specify the parts that should be overridden."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:865
msgid "The content of the main block is used for an `{#insert}` section with no name parameter specified."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:867
msgid "Section blocks can also define an optional end tag - `{/title}`."
msgstr ""

#. type: Title ====
#: upstream/_guides/qute-reference.adoc:868
#, no-wrap
msgid "Eval Section"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:872
msgid "This section can be used to parse and evaluate a template dynamically.  The behavior is very similar to the <<include_helper>> but:"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:874
msgid "The template content is passed directly, i.e. not obtained via an `io.quarkus.qute.TemplateLocator`,"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:875
msgid "It's not possible to override parts of the evaluated template."
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:879
#, no-wrap
msgid "{#eval myData.template name='Mia' /} <1><2><3>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:881
msgid "The result of `myData.template` will be used as the template. The template is executed with the <<current_context_object>>, i.e. can reference data from the template it's included into."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:882
msgid "It's also possible to define optional parameters that can be used in the evaluated template."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:883
msgid "The content of the section is always ignored."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:885
msgid "The evaluated template is parsed and evaluated every time the section is executed. In other words, it's not possible to cache the parsed value to conserve resources and optimize the performance."
msgstr ""

#. type: Title ====
#: upstream/_guides/qute-reference.adoc:887
#, no-wrap
msgid "User-defined Tags"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:891
msgid "User-defined tags can be used to include a template and optionally pass some parameters.  Let's suppose we have a template called `itemDetail.html`:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:898
#, no-wrap
msgid ""
"{#if showImage} <1>\n"
"  {it.image} <2>\n"
"  {nested-content} <3>\n"
"{/if}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:900
msgid "`showImage` is a named parameter."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:901
msgid "`it` is a special key that is replaced with the first unnamed param of the tag."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:902
msgid "(optional) `nested-content` is a special key that will be replaced by the content of the tag."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:904
msgid "Now if we register this template under the name `itemDetail.html` and if we add a `UserTagSectionHelper` to the engine:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:910
#, no-wrap
msgid ""
"Engine engine = Engine.builder()\n"
"                   .addSectionHelper(new UserTagSectionHelper.Factory(\"itemDetail\",\"itemDetail.html\"))\n"
"                   .build();\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:913
msgid "In Quarkus, all files from the `src/main/resources/templates/tags` are registered and monitored automatically!"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:915
msgid "We can include the tag like this:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:927
#, no-wrap
msgid ""
"<ul>\n"
"{#for item in items}\n"
"  <li>\n"
"  {#itemDetail item showImage=true} <1>\n"
"    = <b>{item.name}</b> <2>\n"
"  {/itemDetail}\n"
"  </li>\n"
"{/for}\n"
"</ul>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:929
msgid "`item` is resolved to an iteration element and can be referenced using the `it` key in the tag template."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:930
msgid "Tag content injected using the `nested-content` key in the tag template."
msgstr ""

#. type: Title ===
#: upstream/_guides/qute-reference.adoc:931
#, no-wrap
msgid "Rendering Output"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:937
msgid "`TemplateInstance` provides several ways to trigger the rendering and consume the result.  The most straightforward approach is represented by `TemplateInstance.render()`.  This method triggers a synchronous rendering, i.e. the current thread is blocked until the rendering is finished, and returns the output.  By contrast, `TemplateInstance.renderAsync()` returns a `CompletionStage<String>` which is completed when the rendering is finished."
msgstr ""

#. type: Block title
#: upstream/_guides/qute-reference.adoc:938
#, no-wrap
msgid "`TemplateInstance.renderAsync()` Example"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:948
#, no-wrap
msgid ""
"template.data(foo).renderAsync().whenComplete((result, failure) -> { <1>\n"
"   if (failure == null) {\n"
"      // consume the output...\n"
"   } else {\n"
"      // process failure...\n"
"   }\n"
"};\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:950
msgid "Register a callback that is executed once the rendering is finished."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:955
msgid "There are also two methods that return https://smallrye.io/smallrye-mutiny/[Mutiny] types.  `TemplateInstance.createUni()` returns a new `Uni<String>` object.  If you call `createUni()` the template is not rendered right away.  Instead, every time `Uni.subscribe()` is called a new rendering of the template is triggered."
msgstr ""

#. type: Block title
#: upstream/_guides/qute-reference.adoc:956
#, no-wrap
msgid "`TemplateInstance.createUni()` Example"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:960
#, no-wrap
msgid "template.data(foo).createUni().subscribe().with(System.out::println);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:966
msgid "`TemplateInstance.createMulti()` returns a new `Multi<String>` object.  Each item represents a part/chunk of the rendered template.  Again, `createMulti()` does not trigger rendering.  Instead, every time a computation is triggered by a subscriber the template is rendered again."
msgstr ""

#. type: Block title
#: upstream/_guides/qute-reference.adoc:967
#, no-wrap
msgid "`TemplateInstance.createMulti()` Example"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:971
#, no-wrap
msgid "template.data(foo).createMulti().subscribe().with(buffer:append,buffer::flush);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:974
msgid "The template rendering is divided in two phases. During the first phase, which is asynchronous, all expressions in the template are resolved and a _result tree_ is built. In the second phase, which is synchronous, the result tree is _materialized_, i.e. one by one the result nodes emit chunks that are consumed/buffered by the specific consumer."
msgstr ""

#. type: Title ===
#: upstream/_guides/qute-reference.adoc:975
#, no-wrap
msgid "Engine Configuration"
msgstr ""

#. type: Title ====
#: upstream/_guides/qute-reference.adoc:977
#, no-wrap
msgid "Value Resolvers"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:981
msgid "Value resolvers are used when evaluating expressions.  A custom `io.quarkus.qute.ValueResolver` can be registered programmatically via `EngineBuilder.addValueResolver()`."
msgstr ""

#. type: Block title
#: upstream/_guides/qute-reference.adoc:982
#, no-wrap
msgid "`ValueResolver` Builder Example"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:989
#, no-wrap
msgid ""
"engineBuilder.addValueResolver(ValueResolver.builder()\n"
"    .appliesTo(ctx -> ctx.getBase() instanceof Long && ctx.getName().equals(\"tenTimes\"))\n"
"    .resolveSync(ctx -> (Long) ctx.getBase() * 10)\n"
"    .build());\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/qute-reference.adoc:991
#, no-wrap
msgid "Template Locator"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:995
msgid "Manual registration is sometimes handy but it's also possible to register a template locator using `EngineBuilder.addLocator(Function<String, Optional<Reader>>)`.  This locator is used whenever the `Engine.getTemplate()` method is called and the engine has no template for a given id stored in the cache."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:997
msgid "In Quarkus, all templates from the `src/main/resources/templates` are located automatically."
msgstr ""

#. type: Title ====
#: upstream/_guides/qute-reference.adoc:998
#, no-wrap
msgid "Content Filters"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1001
msgid "Content filters can be used to modify the template contents before parsing."
msgstr ""

#. type: Block title
#: upstream/_guides/qute-reference.adoc:1002
#, no-wrap
msgid "Content Filter Example"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1011
#, no-wrap
msgid ""
"engineBuilder.addParserHook(new ParserHook() {\n"
"    @Override\n"
"    public void beforeParsing(ParserHelper parserHelper) {\n"
"        parserHelper.addContentFilter(contents -> contents.replace(\"${\", \"$\\\\{\")); <1>\n"
"    }\n"
"});\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1013
msgid "Escape all occurences of `${`."
msgstr ""

#. type: Title ==
#: upstream/_guides/qute-reference.adoc:1015
#, no-wrap
msgid "Quarkus Integration"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1018
msgid "If you want to use Qute in your Quarkus application add the following dependency to your project:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1025
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-qute</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1029
msgid "In Quarkus, a preconfigured engine instance is provided and available for injection - a bean with scope `@ApplicationScoped`, bean type `io.quarkus.qute.Engine` and qualifier `@Default` is registered automatically.  Moreover, all templates located in the `src/main/resources/templates` directory are validated and can be easily injected."
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1035
#, no-wrap
msgid ""
"import io.quarkus.qute.Engine;\n"
"import io.quarkus.qute.Template;\n"
"import io.quarkus.qute.Location;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1037
#: upstream/_guides/qute-reference.adoc:1060
#, no-wrap
msgid "class MyBean {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1040
#, no-wrap
msgid ""
"    @Inject \n"
"    Template items; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1043
#, no-wrap
msgid ""
"    @Location(\"detail/items2_v1.html\") <2>\n"
"    Template items2;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1047
#, no-wrap
msgid ""
"    @Inject\n"
"    Engine engine; <3>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1049
msgid "If there is no `Location` qualifier provided, the field name is used to locate the template. In this particular case, the container will attempt to locate a template with path `src/main/resources/templates/items.html`."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1050
msgid "The `Location` qualifier instructs the container to inject a template from a path relative from `src/main/resources/templates`. In this case, the full path is `src/main/resources/templates/detail/items2_v1.html`."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1051
msgid "Inject the configured `Engine` instance."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1053
msgid "It's also possible to contribute to the engine configuration via a CDI observer method."
msgstr ""

#. type: Block title
#: upstream/_guides/qute-reference.adoc:1054
#, no-wrap
msgid "`EngineBuilder` Observer Example"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1058
#, no-wrap
msgid "import io.quarkus.qute.EngineBuilder;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1068
#, no-wrap
msgid ""
"    void configureEngine(@Observes EngineBuilder builder) {\n"
"       builder.addValueResolver(ValueResolver.builder()\n"
"                .appliesTo(ctx -> ctx.getBase() instanceof Long && ctx.getName().equals(\"tenTimes\"))\n"
"                .resolveSync(ctx -> (Long) ec.getBase() * 10)\n"
"                .build());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/qute-reference.adoc:1070
#, no-wrap
msgid "Template Variants"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1074
msgid "Sometimes it's useful to render a specific variant of the template based on the content negotiation.  This can be done by setting a special attribute via `TemplateInstance.setAttribute()`:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1078
#, no-wrap
msgid "class MyService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1081
#, no-wrap
msgid ""
"    @Inject\n"
"    Template items; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1084
#, no-wrap
msgid ""
"    @Inject\n"
"    ItemManager manager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1089
#, no-wrap
msgid ""
"    String renderItems() {\n"
"       return items.data(\"items\",manager.findItems()).setAttribute(TemplateInstance.SELECTED_VARIANT, new Variant(Locale.getDefault(),\"text/html\",\"UTF-8\")).render();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1092
msgid "When using `quarkus-resteasy-qute` the content negotiation is performed automatically. See <<resteasy_integration>>."
msgstr ""

#. type: Title ===
#: upstream/_guides/qute-reference.adoc:1093
#, no-wrap
msgid "Injecting Beans Directly In Templates"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1096
msgid "A CDI bean annotated with `@Named` can be referenced in any template through the `inject` namespace:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1100
#, no-wrap
msgid "{inject:foo.price} <1>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1102
msgid "First, a bean with name `foo` is found and then used as the base object."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1105
msgid "All expressions using the `inject` namespace are validated during build.  For the expression `inject:foo.price` the implementation class of the injected bean must either have the `price` property (e.g. a `getPrice()` method) or a matching <<template_extension_methods,template extension method>> must exist."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1107
msgid "A `ValueResolver` is also generated for all beans annotated with `@Named` so that it's possible to access its properties without reflection."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1109
msgid "If your application serves link:http-reference[HTTP requests] you can also inject the current `io.vertx.core.http.HttpServerRequest` via the `inject` namespace, e.g. `{inject:vertxRequest.getParam('foo')}`."
msgstr ""

#. type: Title ===
#: upstream/_guides/qute-reference.adoc:1111
#, no-wrap
msgid "Type-safe Expressions"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1116
msgid "Template expressions can be optionally type-safe.  Which means that an expression is validated against the existing Java types and template extension methods.  If an invalid/incorrect expression is found then the build fails."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1118
msgid "For example, if there is an expression `item.name` where `item` maps to `org.acme.Item` then `Item` must have a property `name` or a matching template extension method must exist."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1121
msgid "An optional _parameter declaration_ is used to bind a Java type to expressions whose first part matches the parameter name.  Parameter declarations are specified directly in a template."
msgstr ""

#. type: Block title
#: upstream/_guides/qute-reference.adoc:1122
#, no-wrap
msgid "Parameter Declaration Example"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1137
#, no-wrap
msgid ""
"{@org.acme.Foo foo} <1>\n"
"<!DOCTYPE html>\n"
"<html>\n"
"<head>\n"
"<meta charset=\"UTF-8\">\n"
"<title>Qute Hello</title>\n"
"</head>\n"
"<body>\n"
"  <h1>{title}</h1> <2>\n"
"  Hello {foo.message.toLowerCase}! <3> <4>\n"
"</body>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1139
msgid "Parameter declaration - maps `foo` to `org.acme.Foo`."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1140
msgid "Not validated - not matching a param declaration."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1141
msgid "This expression is validated. `org.acme.Foo` must have a property `message` or a matching template extension method must exist."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1142
msgid "Likewise, the Java type of the object resolved from `foo.message` must have a property `toLowerCase` or a matching template extension method must exist."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1144
msgid "A value resolver is automatically generated for all types used in parameter declarations so that it's possible to access its properties without reflection."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1146
msgid "Method parameters of <<typesafe_templates,type-safe templates>> are automatically turned into parameter declarations."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1148
msgid "Note that sections can override names that would otherwise match a parameter declaration:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1165
#, no-wrap
msgid ""
"{@org.acme.Foo foo}\n"
"<!DOCTYPE html>\n"
"<html>\n"
"<head>\n"
"<meta charset=\"UTF-8\">\n"
"<title>Qute Hello</title>\n"
"</head>\n"
"<body>\n"
"  <h1>{foo.message}</h1> <1>\n"
"  {#for foo in baz.foos}\n"
"    <p>Hello {foo.message}!</p> <2>\n"
"  {/for}\n"
"</body>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1167
msgid "Validated against `org.acme.Foo`."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1168
msgid "Not validated - `foo` is overridden in the loop section."
msgstr ""

#. type: Title ===
#: upstream/_guides/qute-reference.adoc:1170
#, no-wrap
msgid "Type-safe Templates"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1173
msgid "You can also define type-safe templates in your Java code.  If using <<resteasy_integration,templates in JAX-RS resources>>, you can rely on the following convention:"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1177
msgid "Organise your template files in the `/src/main/resources/templates` directory, by grouping them into one directory per resource class. So, if your `ItemResource` class references two templates `hello` and `goodbye`, place them at `/src/main/resources/templates/ItemResource/hello.txt` and `/src/main/resources/templates/ItemResource/goodbye.txt`. Grouping templates per resource class makes it easier to navigate to them."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1178
msgid "In each of your resource class, declare a `@CheckedTemplate static class Template {}` class within your resource class."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1179
msgid "Declare one `public static native TemplateInstance method();` per template file for your resource."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1180
msgid "Use those static methods to build your template instances."
msgstr ""

#. type: Block title
#: upstream/_guides/qute-reference.adoc:1181
#, no-wrap
msgid "ItemResource.java"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1185
#: upstream/_guides/qute-reference.adoc:1226
#: upstream/_guides/qute-reference.adoc:1245
#: upstream/_guides/qute-reference.adoc:1551
#, no-wrap
msgid "package org.acme.quarkus.sample;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1192
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.PathParam;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1196
#: upstream/_guides/qute-reference.adoc:1230
#, no-wrap
msgid ""
"import io.quarkus.qute.TemplateInstance;\n"
"import io.quarkus.qute.Template;\n"
"import io.quarkus.qute.CheckedTemplate;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1199
#, no-wrap
msgid ""
"@Path(\"item\")\n"
"public class ItemResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1204
#, no-wrap
msgid ""
"    @CheckedTemplate\n"
"    public static class Templates {\n"
"        public static native TemplateInstance item(Item item); <1> <2>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1212
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"{id}\")\n"
"    @Produces(MediaType.TEXT_HTML)\n"
"    public TemplateInstance get(@PathParam(\"id\") Integer id) {\n"
"        return Templates.item(service.findItem(id)); <3>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1214
msgid "Declare a method that gives us a `TemplateInstance` for `templates/ItemResource/item.html` and declare its `Item item` parameter so we can validate the template."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1215
msgid "The `item` parameter is automatically turned into a <<typesafe_expressions,parameter declaration>> and so all expressions that reference this name will be validated."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1216
msgid "Make the `Item` object accessible in the template."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1218
msgid "By default, the templates defined in a class annotated with `@CheckedTemplate` can only contain type-safe expressions, i.e. expressions that can be validated at build time. You can use `@CheckedTemplate(requireTypeSafeExpressions = false)` to relax this requirement."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1221
msgid "You can also declare a top-level Java class annotated with `@CheckedTemplate`:"
msgstr ""

#. type: Block title
#: upstream/_guides/qute-reference.adoc:1222
#, no-wrap
msgid "Top-level checked templates"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1235
#, no-wrap
msgid ""
"@CheckedTemplate\n"
"public class Templates {\n"
"    public static native TemplateInstance hello(String name); <1>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1237
msgid "This declares a template with path `templates/hello.txt`. The `name` parameter is automatically turned into a <<typesafe_expressions,parameter declaration>> and so all expressions that reference this name will be validated."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1240
msgid "Then declare one `public static native TemplateInstance method();` per template file.  Use those static methods to build your template instances:"
msgstr ""

#. type: Block title
#: upstream/_guides/qute-reference.adoc:1241
#: upstream/_guides/qute-reference.adoc:1547
#, no-wrap
msgid "HelloResource.java"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1251
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.QueryParam;\n"
"import io.quarkus.qute.TemplateInstance;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1254
#: upstream/_guides/qute-reference.adoc:1562
#, no-wrap
msgid ""
"@Path(\"hello\")\n"
"public class HelloResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1261
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public TemplateInstance get(@QueryParam(\"name\") String name) {\n"
"        return Templates.hello(name);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/qute-reference.adoc:1264
#, no-wrap
msgid "Template Extension Methods"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1268
msgid "Extension methods can be used to extend the data classes with new functionality (to extend the set of accessible properties and methods) or to resolve expressions for a specific <<namespace_extension_methods,namespace>>.  For example, it is possible to add _computed properties_ and _virtual methods_."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1273
msgid "A value resolver is automatically generated for a method annotated with `@TemplateExtension`.  If a class is annotated with `@TemplateExtension` then a value resolver is generated for every _non-private static method_ declared on the class.  Method-level annotations override the behavior defined on the class.  Methods that do not meet the following requirements are ignored."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1275
msgid "A template extension method:"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1277
msgid "must not be `private`"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1278
msgid "must be static,"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1279
msgid "must not return `void`."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1281
msgid "If there is no namespace defined the class of the first parameter that is not annotated with `@TemplateAttribute` is used to match the base object. Otherwise the namespace is used to match an expression."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1288
msgid "The method name is used to match the property name by default.  However, it is possible to specify the matching name with `TemplateExtension#matchName()`.  A special constant - `TemplateExtension#ANY` - may be used to specify that the extension method matches any name.  It is also possible to match the name against a regular expression specified in `TemplateExtension#matchRegex()`.  In both cases, an additional string method parameter must be used to pass the property name.  If both `matchName()` and `matchRegex()` are set the regular expression is used for matching."
msgstr ""

#. type: Block title
#: upstream/_guides/qute-reference.adoc:1289
#, no-wrap
msgid "Extension Method Example"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1293
#: upstream/_guides/qute-reference.adoc:1468
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1295
#, no-wrap
msgid "class Item {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1297
#: upstream/_guides/qute-reference.adoc:1473
#: upstream/_guides/qute-reference.adoc:1504
#, no-wrap
msgid "    public final BigDecimal price;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1302
#: upstream/_guides/qute-reference.adoc:1509
#, no-wrap
msgid ""
"    public Item(BigDecimal price) {\n"
"        this.price = price;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1305
#, no-wrap
msgid ""
"@TemplateExtension\n"
"class MyExtensions {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1310
#, no-wrap
msgid ""
"    static BigDecimal discountedPrice(Item item) { <1>\n"
"        return item.getPrice().multiply(new BigDecimal(\"0.9\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1312
msgid "This method matches an expression with base object of the type `Item.class` and the `discountedPrice` property name."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1314
msgid "This template extension method makes it possible to render the following template:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1318
#, no-wrap
msgid "{item.discountedPrice} <1>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1320
msgid "`item` is resolved to an instance of `org.acme.Item`."
msgstr ""

#. type: Title ====
#: upstream/_guides/qute-reference.adoc:1321
#, no-wrap
msgid "Method Parameters"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1328
msgid "An extension method may declare parameters.  If no namespace is specified then the first parameter that is not annotated with `@TemplateAttribute` is used to pass the base object, i.e. `org.acme.Item` in the first example.  If matching any name or using a regular expression then a string method parameter needs to be used to pass the property name.  Parameters annotated with `@TemplateAttribute` are obtained via `TemplateInstance#getAttribute()`.  All other parameters are resolved when rendering the template and passed to the extension method."
msgstr ""

#. type: Block title
#: upstream/_guides/qute-reference.adoc:1329
#, no-wrap
msgid "Multiple Parameters Example"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1334
#, no-wrap
msgid ""
"@TemplateExtension\n"
"class BigDecimalExtensions {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1339
#, no-wrap
msgid ""
"    static BigDecimal scale(BigDecimal val, int scale, RoundingMode mode) { <1>\n"
"        return val.setScale(scale, mode);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1341
msgid "This method matches an expression with base object of the type `BigDecimal.class`, with the `scale` virtual method name and two virtual method parameters."
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1345
#, no-wrap
msgid "{item.discountedPrice.scale(2,mode)} <1>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1347
msgid "`item.discountedPrice` is resolved to an instance of `BigDecimal`."
msgstr ""

#. type: Title ====
#: upstream/_guides/qute-reference.adoc:1349
#, no-wrap
msgid "Namespace Extension Methods"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1354
msgid "If `TemplateExtension#namespace()` is specified then the extension method is used to resolve expressions with the given <<expressions,namespace>>.  Template extension methods that share the same namespace are grouped in one resolver ordered by `TemplateExtension#priority()`.  The first matching extension method is used to resolve an expression."
msgstr ""

#. type: Block title
#: upstream/_guides/qute-reference.adoc:1355
#, no-wrap
msgid "Namespace Extension Method Example"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1360
#, no-wrap
msgid ""
"@TemplateExtension(namespace = \"str\")\n"
"public static class StringExtensions {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1364
#, no-wrap
msgid ""
"   static String format(String fmt, Object... args) {\n"
"      return String.format(fmt, args);\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1369
#, no-wrap
msgid ""
"   static String reverse(String val) {\n"
"      return new StringBuilder(val).reverse().toString();\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1372
msgid "These extension methods can be used as follows."
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1377
#, no-wrap
msgid ""
"{str:format('%s %s!','Hello', 'world')} <1>\n"
"{str:reverse('hello')} <2>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1379
msgid "The output is `Hello world!`"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1380
msgid "The output is `olleh`"
msgstr ""

#. type: Title ====
#: upstream/_guides/qute-reference.adoc:1382
#, no-wrap
msgid "Built-in Template Extensions"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1385
msgid "Quarkus provides a set of built-in extension methods."
msgstr ""

#. type: Title =====
#: upstream/_guides/qute-reference.adoc:1386
#, no-wrap
msgid "Maps"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1389
msgid "`keys` or `keySet`: Returns a Set view of the keys contained in a map"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1390
msgid "`{#for key in map.keySet}`"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1392
msgid "`values`: Returns a Collection view of the values contained in a map"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1393
msgid "`{#for value in map.values}`"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1395
msgid "`size`: Returns the number of key-value mappings in a map"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1396
msgid "`{map.size}`"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1398
msgid "`isEmpty`: Returns true if a map contains no key-value mappings"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1399
msgid "`{#if map.isEmpty}`"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1401
msgid "`get(key)`: Returns the value to which the specified key is mapped"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1402
msgid "`{map.get('foo')}`"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1404
msgid "A map value can be also accessed directly: `{map.myKey}`. Use the bracket notation for keys that are not legal identifiers: `{map['my key']}`."
msgstr ""

#. type: Title =====
#: upstream/_guides/qute-reference.adoc:1405
#, no-wrap
msgid "Collections"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1408
msgid "`get(index)`: Returns the element at the specified position in a list"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1409
msgid "`{list.get(0)}`"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1411
msgid "`reversed`: Returns a reversed iterator over a list"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1412
msgid "`{#for r in recordsList.reversed}`"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1414
msgid "A list element can be accessed directly: `{list.10}` or `{list[10]}`."
msgstr ""

#. type: Title =====
#: upstream/_guides/qute-reference.adoc:1415
#, no-wrap
msgid "Numbers"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1418
msgid "`mod`: Modulo operation"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1419
msgid "`{#if counter.mod(5) == 0}`"
msgstr ""

#. type: Title ====
#: upstream/_guides/qute-reference.adoc:1420
#, no-wrap
msgid "Strings"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1423
msgid "`fmt` or `format`: format the string instance via `java.lang.String.format()`"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1424
msgid "`{myStr.fmt(\"arg1\",\"arg2\")}`"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1425
msgid "`{myStr.format(locale,arg1)}`"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1426
msgid "`str:fmt` or `str:format`: format the supplied string value via `java.lang.String.format()`"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1427
msgid "`{str:format(\"Hello %s!\",name)}`"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1428
msgid "`{str:fmt(locale,'%tA',now)}`"
msgstr ""

#. type: Title =====
#: upstream/_guides/qute-reference.adoc:1429
#, no-wrap
msgid "Config "
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1432
msgid "`config:<name>` or `config:[<name>]`: Returns the config value for the given property name"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1433
msgid "`{config:foo}` or `{config:['property.with.dot.in.name']}`"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1435
msgid "`config:property(name)`: Returns the config value for the given property name; the name can be obtained dynamically by an expression"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1436
msgid "`{config:property('quarkus.foo')}` or `{config:property(foo.getPropertyName())}`"
msgstr ""

#. type: Title =====
#: upstream/_guides/qute-reference.adoc:1437
#, no-wrap
msgid "Time"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1440
msgid "`format(pattern)`: Formats temporal objects from the `java.time` package"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1441
msgid "`{dateTime.format('d MMM uuuu')}`"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1443
msgid "`format(pattern,locale)`: Formats temporal objects from the `java.time` package"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1444
msgid "`{dateTime.format('d MMM uuuu',myLocale)}`"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1446
msgid "`format(pattern,locale,timeZone)`: Formats temporal objects from the `java.time` package"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1447
msgid "`{dateTime.format('d MMM uuuu',myLocale,myTimeZoneId)}`"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1449
msgid "`time:format(dateTime,pattern)`: Formats temporal objects from the `java.time` package, `java.util.Date`, `java.util.Calendar` and `java.lang.Number`"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1450
msgid "`{time:format(myDate,'d MMM uuuu')}`"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1452
msgid "`time:format(dateTime,pattern,locale)`: Formats temporal objects from the `java.time` package, `java.util.Date`, `java.util.Calendar` and `java.lang.Number`"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1453
msgid "`{time:format(myDate,'d MMM uuuu', myLocale)}`"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1455
msgid "`time:format(dateTime,pattern,locale,timeZone)`: Formats temporal objects from the `java.time` package, `java.util.Date`, `java.util.Calendar` and `java.lang.Number`"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1456
msgid "`{time:format(myDate,'d MMM uuuu',myTimeZoneId)}`"
msgstr ""

#. type: Title ===
#: upstream/_guides/qute-reference.adoc:1458
#, no-wrap
msgid "@TemplateData"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1462
msgid "A value resolver is automatically generated for a type annotated with `@TemplateData`.  This allows Quarkus to avoid using reflection to access the data at runtime."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1464
msgid "Non-public members, constructors, static initializers, static, synthetic and void methods are always ignored."
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1471
#, no-wrap
msgid ""
"@TemplateData\n"
"class Item {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1477
#, no-wrap
msgid ""
"    public Item(BigDecimal price) {\n"
"        this.price = price;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1482
#, no-wrap
msgid ""
"    public BigDecimal getDiscountedPrice() {\n"
"        return price.multiply(new BigDecimal(\"0.9\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1485
msgid "Any instance of `Item` can be used directly in the template:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1491
#, no-wrap
msgid ""
"{#each items} <1>\n"
"  {it.price} / {it.discountedPrice}\n"
"{/each}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1493
msgid "`items` is resolved to a list of `org.acme.Item` instances."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1496
msgid "Furthermore, `@TemplateData.properties()` and `@TemplateData.ignore()` can be used to fine-tune the generated resolver.  Finally, it is also possible to specify the \"target\" of the annotation - this could be useful for third-party classes not controlled by the application:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1502
#, no-wrap
msgid ""
"@TemplateData(target = BigDecimal.class)\n"
"@TemplateData\n"
"class Item {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1516
#, no-wrap
msgid ""
"{#each items} <1>\n"
"  {it.price.setScale(2, rounding)} <1>\n"
"{/each}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1518
msgid "The generated value resolver knows how to invoke the `BigDecimal.setScale()` method."
msgstr ""

#. type: Title ===
#: upstream/_guides/qute-reference.adoc:1520
#, no-wrap
msgid "RESTEasy Integration"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1524
msgid "If you want to use Qute in your JAX-RS application, then depending on which JAX-RS stack you are using, you'll need to register the proper extension first.  If you are using the traditional `quakus-resteasy` extension, then in your `pom.xml` file, add:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1531
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-qute</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1534
msgid "If instead you are using RESTEasy Reactive via the `quarkus-resteasy-reactive` extension, then in your `pom.xml` file, add:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1541
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-reactive-qute</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1544
msgid "Both of these extensions register a special `ContainerResponseFilter` implementation which enables resource methods to return a `TemplateInstance`, thus freeing users of having to take care of all necessary internal steps."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1546
msgid "The end result is that a using Qute within a JAX-RS resource may look as simple as:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1556
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.QueryParam;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1559
#, no-wrap
msgid ""
"import io.quarkus.qute.TemplateInstance;\n"
"import io.quarkus.qute.Template;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1565
#, no-wrap
msgid ""
"    @Inject\n"
"    Template hello; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1572
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public TemplateInstance get(@QueryParam(\"name\") String name) {\n"
"        return hello.data(\"name\", name); <2> <3>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1574
msgid "If there is no `@Location` qualifier provided, the field name is used to locate the template. In this particular case, we're injecting a template with path `templates/hello.txt`."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1575
msgid "`Template.data()` returns a new template instance that can be customized before the actual rendering is triggered. In this case, we put the name value under the key `name`. The data map is accessible during rendering."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1576
msgid "Note that we don't trigger the rendering - this is done automatically by a special `ContainerResponseFilter` implementation."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1578
msgid "Users are encouraged to use <<typesafe_templates,Type-safe templates>> that help to organize the templates for a specific JAX-RS resource and enable <<typesafe_expressions,type-safe expressions>> automatically."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1581
msgid "The content negotiation is performed automatically.  The resulting output depends on the `Accept` header received from the client."
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1586
#: upstream/_guides/qute-reference.adoc:1607
#, no-wrap
msgid ""
"@Path(\"/detail\")\n"
"class DetailResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1589
#, no-wrap
msgid ""
"    @Inject\n"
"    Template item; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1596
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces({ MediaType.TEXT_HTML, MediaType.TEXT_PLAIN })\n"
"    public TemplateInstance item() {\n"
"        return item.data(\"myItem\", new Item(\"Alpha\", 1000)); <2>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1598
msgid "Inject a variant template with base path derived from the injected field - `src/main/resources/templates/item`."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1599
msgid "For `text/plain` the `src/main/resources/templates/item.txt` template is used. For `text/html` the `META-INF/resources/templates/item.html` template is used."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1601
msgid "The `RestTemplate` util class can be used to obtain a template instance from a body of a JAX-RS resource method:"
msgstr ""

#. type: Block title
#: upstream/_guides/qute-reference.adoc:1602
#, no-wrap
msgid "RestTemplate Example"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1614
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces({ MediaType.TEXT_HTML, MediaType.TEXT_PLAIN })\n"
"    public TemplateInstance item() {\n"
"        return RestTemplate.data(\"myItem\", new Item(\"Alpha\", 1000)); <1>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1616
msgid "The name of the template is derived from the resource class and method name; `DetailResource/item` in this particular case."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1618
msgid "Unlike with `@Inject` the templates obtained via `RestTemplate` are not validated, i.e. the build does not fail if a template does not exist."
msgstr ""

#. type: Title ===
#: upstream/_guides/qute-reference.adoc:1619
#, no-wrap
msgid "Development Mode"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1622
msgid "In the development mode, all files located in `src/main/resources/templates` are watched for changes and modifications are immediately visible."
msgstr ""

#. type: Title ===
#: upstream/_guides/qute-reference.adoc:1623
#, no-wrap
msgid "Type-safe Message Bundles"
msgstr ""

#. type: Title ====
#: upstream/_guides/qute-reference.adoc:1625
#, no-wrap
msgid "Basic Concepts"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1631
msgid "The basic idea is that every message is potentially a very simple template.  In order to prevent type errors a message is defined as an annotated method of a *message bundle interface*.  Quarkus generates the *message bundle implementation* at build time.  Subsequently, the bundles can be used at runtime:"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1633
msgid "Directly in your code via `io.quarkus.qute.i18n.MessageBundles#get()`; e.g. `MessageBundles.get(AppMessages.class).hello_name(\"Lucie\")`"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1634
msgid "Injected in your beans via `@Inject`; e.g. `@Inject AppMessages`"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1635
msgid "Referenced in the templates via the message bundle namespace:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1640
#, no-wrap
msgid ""
" {msg:hello_name('Lucie')} <1> <2> <3>\n"
" {msg:message(myKey,'Lu')} <4>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1642
msgid "`msg` is the default namespace."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1643
msgid "`hello_name` is the message key."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1644
msgid "`Lucie` is the parameter of the message bundle interface method."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1645
msgid "It is also possible to obtain a localized message for a key resolved at runtime using a reserved key `message`. The validation is skipped in this case though."
msgstr ""

#. type: Block title
#: upstream/_guides/qute-reference.adoc:1646
#, no-wrap
msgid "Message Bundle Interface Example"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1651
#, no-wrap
msgid ""
"import io.quarkus.qute.i18n.Message;\n"
"import io.quarkus.qute.i18n.MessageBundle;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1654
#, no-wrap
msgid ""
"@MessageBundle <1>\n"
"public interface AppMessages {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1658
#, no-wrap
msgid ""
"    @Message(\"Hello {name}!\") <2>\n"
"    String hello_name(String name); <3>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1660
msgid "Denotes a message bundle interface. The bundle name is defaulted to `msg` and is used as a namespace in templates expressions, e.g. `{msg:hello_name}`."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1661
msgid "Each method must be annotated with `@Message`. The value is a qute template."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1662
msgid "The method parameters can be used in the template."
msgstr ""

#. type: Title ====
#: upstream/_guides/qute-reference.adoc:1663
#, no-wrap
msgid "Bundle Name and Message Keys"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1671
msgid "Keys are used directly in templates.  The bundle name is used as a namespace in template expressions.  The `@MessageBundle` can be used to define the default strategy used to generate message keys from method names.  However, the `@Message` can override this strategy and even define a custom key.  By default, the annotated element's name is used as-is.  Other possibilities are:"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1673
msgid "De-camel-cased and hyphenated; e.g. `helloName()` -> `hello-name`"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1674
msgid "De-camel-cased and parts separated by underscores; e.g. `helloName()` -> `hello_name`."
msgstr ""

#. type: Title ====
#: upstream/_guides/qute-reference.adoc:1675
#, no-wrap
msgid "Validation"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1678
msgid "All message bundle templates are validated:"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1679
msgid "All expressions without a namespace must map to a parameter; e.g. `Hello {foo}` -> the method must have a param of name `foo`"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1680
msgid "All expressions are validated against the types of the parameters; e.g. `Hello {foo.bar}` where the parameter `foo` is of type `org.acme.Foo` -> `org.acme.Foo` must have a property of name `bar`"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1682
msgid "A warning message is logged for each _unused_ parameter."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1683
msgid "Expressions that reference a message bundle method, such as `{msg:hello(item.name)}`, are validated too."
msgstr ""

#. type: Title ====
#: upstream/_guides/qute-reference.adoc:1684
#, no-wrap
msgid "Localization"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1689
msgid "The default locale of the Java Virtual Machine used to *build the application* is used for the `@MessageBundle` interface by default.  However, the `io.quarkus.qute.i18n.MessageBundle#locale()` can be used to specify a custom locale.  Additionally, there are two ways to define a localized bundle:"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1691
msgid "Create an interface that extends the default interface that is annotated with `@Localized`"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1692
msgid "Create an UTF-8 encoded file located in `src/main/resources/messages`; e.g. `msg_de.properties`."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1694
msgid "A localized interface is the preferred solution mainly due to the possibility of easy refactoring."
msgstr ""

#. type: Block title
#: upstream/_guides/qute-reference.adoc:1695
#, no-wrap
msgid "Localized Interface Example"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1700
#, no-wrap
msgid ""
"import io.quarkus.qute.i18n.Localized;\n"
"import io.quarkus.qute.i18n.Message;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1703
#, no-wrap
msgid ""
"@Localized(\"de\") <1>\n"
"public interface GermanAppMessages extends AppMessages {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1708
#, no-wrap
msgid ""
"    @Override\n"
"    @Message(\"Hallo {name}!\") <2>\n"
"    String hello_name(String name);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1710
msgid "The value is the locale tag string (IETF)."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1711
msgid "The value is the localized template."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1719
msgid "Message bundle files must be encoded in UTF-8.  The file name consists of the relevant bundle name (e.g. `msg`) and underscore followed by the locate tag (IETF).  The file format is very simple: each line represents either a key/value pair with the equals sign used as a separator or a comment (line starts with `#`).  Keys are mapped to method names from the corresponding message bundle interface.  Values represent the templates normally defined by `io.quarkus.qute.i18n.Message#value()`.  We use `.properties` suffix in our example because most IDEs and text editors support syntax highlighting of `.properties` files.  But in fact, the suffix could be anything."
msgstr ""

#. type: Block title
#: upstream/_guides/qute-reference.adoc:1720
#, no-wrap
msgid "Localized File Example - `msg_de.properties`"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1724
#, no-wrap
msgid "hello_name=Hallo {name}! <1> <2>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1726
msgid "Each line in a localized file represents a message template."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1727
msgid "Keys and values are separated by the equals sign."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1730
msgid "Once we have the localized bundles defined we need a way to _select_ a correct bundle.  If you use a message bundle expression in a template you'll have to specify the `locale` attribute of a template instance."
msgstr ""

#. type: Block title
#: upstream/_guides/qute-reference.adoc:1731
#, no-wrap
msgid "`locale` Attribute Example"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1736
#: upstream/_guides/qute-reference.adoc:1757
#, no-wrap
msgid ""
"@Singleton\n"
"public class MyBean {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1739
#, no-wrap
msgid ""
"    @Inject\n"
"    Template hello;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1744
#, no-wrap
msgid ""
"    String render() {\n"
"       return hello.instance().setAttribute(\"locale\", Locale.forLanguageTag(\"cs\")).render(); <1>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1746
msgid "You can set a `Locale` instance or a locale tag string (IETF)."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1749
msgid "When using <<resteasy_integration,quarkus-resteasy-qute>> the `locale` attribute is derived from the the `Accept-Language` header if not set by a user."
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1751
msgid "The `@Localized` qualifier can be used to inject a localized message bundle interface."
msgstr ""

#. type: Block title
#: upstream/_guides/qute-reference.adoc:1752
#, no-wrap
msgid "Injected Localized Message Bundle Example"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1760
#, no-wrap
msgid ""
"    @Localized(\"cs\") <1>\n"
"    AppMessages msg;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/qute-reference.adoc:1765
#, no-wrap
msgid ""
"    String render() {\n"
"       return msg.hello_name(\"Jachym\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/qute-reference.adoc:1767
msgid "The annotation value is a locale tag string (IETF)."
msgstr ""

#. type: Title ===
#: upstream/_guides/qute-reference.adoc:1769
#, no-wrap
msgid "Configuration Reference"
msgstr ""
