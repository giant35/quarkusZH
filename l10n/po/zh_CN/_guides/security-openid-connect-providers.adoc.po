# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-14 01:07+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: upstream/_guides/security-openid-connect-providers.adoc:7
#, no-wrap
msgid "Configuring Well-Known OpenID Connect Providers"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:15
msgid "This document explains how to configure well-known social OIDC and OAuth2 providers."
msgstr ""

#. type: Title ==
#: upstream/_guides/security-openid-connect-providers.adoc:16
#, no-wrap
msgid "Introduction"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:19
msgid "If you use xref:security-oidc-code-flow-authentication.adoc[OpenID Connect Authorization Code Flow] to protect Quarkus endpoints, then you need to configure Quarkus to tell it how to connect to OpenID Connect providers, how to authenticate to such providers, which scopes to use, and so on."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:21
msgid "Sometimes you need to use the configuration to work around the fact that some providers do not implement OpenID Connect completely or when they are in fact xref:security-oidc-code-flow-authentication.adoc#oauth2[OAuth2 providers only]."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:23
msgid "The configuration of such providers can become complex, very technical and difficult to understand."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:25
msgid "`quarkus.oidc.provider` configuration property has been introduced to refer to well-known OpenID Connect and OAuth2 providers. This property can be used to refer to a provider such as `github` with only a minimum number of customizations required, typically, an account specific `client id`, `client secret` and some properties have to be set to complete the configuration."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:27
msgid "This property can be used in `application.properties`, in xref:security-openid-connect-multitenancy.adoc[multi-tenant] set-ups if more than one provider has to be configured (for example, see https://quarkiverse.github.io/quarkiverse-docs/quarkus-renarde/dev/security.html#_using_oidc_for_login[Quarkus Renarde security documentation]), in custom xref:security-openid-connect-multitenancy.adoc#tenant-config-resolver[TenantConfigResolvers] if the tenant configurations are created dynamically."
msgstr ""

#. type: Title ==
#: upstream/_guides/security-openid-connect-providers.adoc:28
#, no-wrap
msgid "Well Known Providers"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-providers.adoc:31
#, no-wrap
msgid "GitHub"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:34
msgid "In order to set up OIDC for GitHub you need to create a new OAuth application in your https://github.com/settings/applications/new[GitHub developer settings]:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:35
#, no-wrap
msgid "oidc-github-1.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:39
msgid "Make sure to fill in the appropriate details, but more importantly the Authorization Callback URL, set to `http://localhost:8080/_renarde/security/github-success` (if you intend to test this using the Quarkus DEV mode)."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:41
msgid "Now click on `Register application` and you'll be shown your application page:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:42
#, no-wrap
msgid "oidc-github-2.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:47
msgid "You need to click on `Generate a new client secret`, confirm your credentials, and write down your Client ID and Client secret (especially that one, because you will not be able to see it again later from that page, but you can always recreate one, do don't worry too much):"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:48
#, no-wrap
msgid "oidc-github-3.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:51
msgid "Now add the following configuration to your `application.properties`:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-providers.adoc:57
#, no-wrap
msgid ""
"quarkus.oidc.provider=github\n"
"quarkus.oidc.client-id=<Client ID>\n"
"quarkus.oidc.credentials.secret=<Secret>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:60
msgid "`quarkus.oidc.provider=github` will request `GitHub` to add a `user:email` scope to issued access tokens. For information about overriding this scope or requesting more scopes, see the xref:provider-scope[Provider scopes] section."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:62
msgid "You can also send access tokens issued by `GitHub` to `quarkus.oidc.application-type=service` or `quarkus.oidc.application-type=hybrid` Quarkus applications."
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-providers.adoc:64
#, no-wrap
msgid "Google"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:67
msgid "In order to set up OIDC for Google you need to create a new project in your https://console.cloud.google.com/projectcreate[Google Cloud Platform console]:"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:69
msgid "Pick a project name and click on `CREATE`."
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:70
#, no-wrap
msgid "oidc-google-1.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:73
msgid "Now make sure you select your project in the top selector, and click on the left-hand bar menu on `APIs and Services > OAuth consent screen`:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:74
#, no-wrap
msgid "oidc-google-2.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:77
msgid "Select `External` to authorise any Google user to log in to your application and press `CREATE`:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:78
#, no-wrap
msgid "oidc-google-3.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:81
msgid "Now you can fill in your application name, your support email, your developer contact information and press `SAVE AND CONTINUE`:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:82
#, no-wrap
msgid "oidc-google-4.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:85
msgid "Do not add any scopes on the next page, and press `SAVE AND CONTINUE`:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:86
#, no-wrap
msgid "oidc-google-5.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:89
msgid "Do not add any test user on the next page, and press `SAVE AND CONTINUE`:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:90
#, no-wrap
msgid "oidc-google-6.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:93
msgid "Click on the top menu `CREATE CREDENTIALS` > `OAuth client ID`:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:94
#, no-wrap
msgid "oidc-google-7.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:98
msgid "Select `Web application` as `Application type`, and add `http://localhost:8080/_renarde/security/oidc-success` in the `Authorised redirect URIs` list, then press `CREATE`:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:99
#, no-wrap
msgid "oidc-google-8.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:102
msgid "Copy your Client ID and Client Secret:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:103
#, no-wrap
msgid "oidc-google-9.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:106
#: upstream/_guides/security-openid-connect-providers.adoc:152
#: upstream/_guides/security-openid-connect-providers.adoc:275
#: upstream/_guides/security-openid-connect-providers.adoc:320
#: upstream/_guides/security-openid-connect-providers.adoc:379
#: upstream/_guides/security-openid-connect-providers.adoc:423
#: upstream/_guides/security-openid-connect-providers.adoc:441
msgid "You can now configure your `application.properties`:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-providers.adoc:112
#: upstream/_guides/security-openid-connect-providers.adoc:549
#, no-wrap
msgid ""
"quarkus.oidc.provider=google\n"
"quarkus.oidc.client-id=<Client ID>\n"
"quarkus.oidc.credentials.secret=<Secret>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:115
msgid "`quarkus.oidc.provider=google` will request `Google` to add `openid`, `email` and `profile` scopes to issued access tokens. For information about overriding these scopes or requesting more scopes, see the xref:provider-scope[Provider scopes] section."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:117
msgid "You can also send access tokens issued by `Google` to `quarkus.oidc.application-type=service` or `quarkus.oidc.application-type=hybrid` Quarkus applications."
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-providers.adoc:119
#, no-wrap
msgid "Microsoft"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:123
msgid "In order to set up OIDC for Microsoft you need to go to your https://portal.azure.com[Microsoft Azure Portal], and search for `Azure Active Directory`, then click on it:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:124
#, no-wrap
msgid "oidc-microsoft-1.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:127
msgid "Once there, on the left side under `Manage`, click on `App registrations` then click on `New registration`:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:128
#, no-wrap
msgid "oidc-microsoft-2.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:132
msgid "Fill in your application name, select `Accounts in any organizational directory (Any Azure AD directory - Multitenant) and personal Microsoft accounts (e.g. Skype, Xbox)` to allow anyone to log in, and add a `Web` Redirect URI as `http://localhost:8080/_renarde/security/oidc-success`, then click on `Register`:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:133
#, no-wrap
msgid "oidc-microsoft-3.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:136
msgid "On that resulting page, copy the `Client Id` (under `Application (client) ID`, then click on `Add a certificate or secret`:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:137
#, no-wrap
msgid "oidc-microsoft-4.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:140
msgid "Now, under `Client secrets (0)`, click on `New client secret`:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:141
#, no-wrap
msgid "oidc-microsoft-5.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:144
msgid "Click on `Add` in that dialog without changing anything:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:145
#, no-wrap
msgid "oidc-microsoft-6.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:148
msgid "On the resulting page, copy your `Secret Value`:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:149
#, no-wrap
msgid "oidc-microsoft-7.png"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-providers.adoc:158
#, no-wrap
msgid ""
"quarkus.oidc.provider=microsoft\n"
"quarkus.oidc.client-id=<Client ID>\n"
"quarkus.oidc.credentials.secret=<Secret>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:161
msgid "`quarkus.oidc.provider=microsoft` will request `Microsoft` to add `openid`, `email` and `profile` scopes to issued access tokens. For information about overriding these scopes or requesting more scopes, see the xref:provider-scope[Provider scopes] section."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:163
msgid "You can also send access tokens issued by `Microsoft` to `quarkus.oidc.application-type=service` or `quarkus.oidc.application-type=hybrid` Quarkus applications but you may need to set `quarkus.oidc.verify-access-token-with-user-info` configuration property to `true` if access tokens issued by Microsoft are not in JWT format."
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-openid-connect-providers.adoc:168
msgid "Some Microsoft services may issue tokens whose signatures can only be verified if the current token's `nonce` header is reset with its SHA-256 digest value.  If your application has to deal with such tokens then please enable an Azure token customizer:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-providers.adoc:175
#, no-wrap
msgid ""
"quarkus.oidc.provider=microsoft\n"
"quarkus.oidc.client-id=<Client ID>\n"
"quarkus.oidc.credentials.secret=<Secret>\n"
"quarkus.oidc.token.customizer-name=azure-access-token-customizer\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-providers.adoc:180
#, no-wrap
msgid "Apple"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-openid-connect-providers.adoc:185
msgid "In order to set up OIDC for Apple you need to create a developer account, and sign up for the 99€/year program, but you cannot test your application on `localhost` like most other OIDC providers: you will need to run it over `https` and make it publicly accessible, so for development purposes you may want to use a service such as https://ngrok.com."
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-openid-connect-providers.adoc:187
msgid "Go to https://developer.apple.com/account/resources/identifiers/list[Create a new identifier] and press `+`"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:188
#, no-wrap
msgid "oidc-apple-1.png"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-openid-connect-providers.adoc:191
msgid "Don't touch anything, keep `App IDs` selected, and press `Continue`:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:192
#, no-wrap
msgid "oidc-apple-2.png"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-openid-connect-providers.adoc:195
msgid "Don't touch anything, keep `App` selected, and press `Continue`:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:196
#, no-wrap
msgid "oidc-apple-3.png"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-openid-connect-providers.adoc:199
msgid "Enter a description and a Bundle ID (use your application package name):"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:200
#, no-wrap
msgid "oidc-apple-4.png"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-openid-connect-providers.adoc:203
msgid "Then scroll down to find the `Sign in with Apple` Capability, select it, and press `Continue`:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:204
#, no-wrap
msgid "oidc-apple-5.png"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-openid-connect-providers.adoc:207
msgid "Write down your App ID Prefix, then press `Register`:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:208
#, no-wrap
msgid "oidc-apple-6.png"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-openid-connect-providers.adoc:211
msgid "Back on the `Identifiers` page, press `+`:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:212
#, no-wrap
msgid "oidc-apple-7.png"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-openid-connect-providers.adoc:215
msgid "Select `Service IDs` and press `Continue`:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:216
#, no-wrap
msgid "oidc-apple-8.png"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-openid-connect-providers.adoc:219
msgid "Enter a description and Bundle ID (use your application package name), then press `Continue`:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:220
#, no-wrap
msgid "oidc-apple-9.png"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-openid-connect-providers.adoc:223
#: upstream/_guides/security-openid-connect-providers.adoc:267
msgid "Now press `Register`:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:224
#, no-wrap
msgid "oidc-apple-10.png"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-openid-connect-providers.adoc:227
msgid "Back on the service list, click on your newly created service:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:228
#, no-wrap
msgid "oidc-apple-11.png"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-openid-connect-providers.adoc:231
msgid "Enable `Sign in with Apple` and press `Configure`:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:232
#, no-wrap
msgid "oidc-apple-12.png"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-openid-connect-providers.adoc:235
msgid "Add your domain and return URL (set to `<host>/_renarde/security/oidc-success`) and press `Next`:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:236
#, no-wrap
msgid "oidc-apple-13.png"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-openid-connect-providers.adoc:239
msgid "Now press `Done`:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:240
#, no-wrap
msgid "oidc-apple-14.png"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-openid-connect-providers.adoc:243
msgid "Now press `Continue`:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:244
#, no-wrap
msgid "oidc-apple-15.png"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-openid-connect-providers.adoc:247
msgid "And now press `Save`:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:248
#, no-wrap
msgid "oidc-apple-16.png"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-openid-connect-providers.adoc:251
msgid "Go to the https://developer.apple.com/account/resources/authkeys/list[Keys] page on the left menu, and press `+`:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:252
#, no-wrap
msgid "oidc-apple-17.png"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-openid-connect-providers.adoc:255
msgid "Fill in a key name, enable `Sign in with Apple`, and press `Configure`:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:256
#, no-wrap
msgid "oidc-apple-18.png"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-openid-connect-providers.adoc:259
msgid "Select your Primary App ID and press `Save`:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:260
#, no-wrap
msgid "oidc-apple-19.png"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-openid-connect-providers.adoc:263
msgid "Back on the key page, press `Continue`:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:264
#, no-wrap
msgid "oidc-apple-20.png"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:268
#, no-wrap
msgid "oidc-apple-21.png"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-openid-connect-providers.adoc:271
msgid "Write down your `Key ID`, download your key and save it to your Quarkus application in `src/main/resources/AuthKey_<KEYID>.p8`:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:272
#, no-wrap
msgid "oidc-apple-22.png"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-providers.adoc:284
#, no-wrap
msgid ""
"quarkus.oidc.provider=apple\n"
"quarkus.oidc.client-id=<Bundle ID>\n"
"quarkus.oidc.credentials.jwt.key-file=AuthKey_<Key ID>.p8\n"
"quarkus.oidc.credentials.jwt.token-key-id=<Key ID>\n"
"quarkus.oidc.credentials.jwt.issuer=<App ID Prefix>\n"
"quarkus.oidc.credentials.jwt.subject=<Bundle ID}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:287
msgid "`quarkus.oidc.provider=apple` will request `Apple` to add `openid`, `email` and `name` scopes to issued access tokens. For information about overriding these scopes or requesting more scopes, see the xref:provider-scope[Provider scopes] section."
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-providers.adoc:289
#, no-wrap
msgid "Facebook"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:294
msgid "Facebook you will not be let you test your application on `localhost` like most other OIDC providers: you will need to run it over `https` and make it publicly accessible, so for development purposes you may want to use a service such as https://ngrok.com."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:296
msgid "In order to set up OIDC for Facebook start by https://developers.facebook.com/apps/create/[Creating an application], select `None` as an app type, and press `Next`:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:297
#, no-wrap
msgid "oidc-facebook-1.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:300
msgid "Now enter an application name, and contact email, and press `Create app`:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:301
#, no-wrap
msgid "oidc-facebook-2.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:304
msgid "On the app page, click `Set up` on the `Facebook login` product:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:305
#, no-wrap
msgid "oidc-facebook-3.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:308
msgid "Quick the `Quickstarts` page and click on `Facebook login > Settings` on the left menu:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:309
#, no-wrap
msgid "oidc-facebook-4.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:312
msgid "Enter your `Redirect URIs` (set to `<host>/_renarde/security/oidc-success`) and press `Save changes`:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:313
#, no-wrap
msgid "oidc-facebook-5.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:316
msgid "Now go to `Settings > Basic` on the left-hand menu, and write down your `App ID` and `App secret`:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:317
#, no-wrap
msgid "oidc-facebook-6.png"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-providers.adoc:326
#, no-wrap
msgid ""
"quarkus.oidc.provider=facebook\n"
"quarkus.oidc.client-id=<App ID>\n"
"quarkus.oidc.credentials.secret=<App secret>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:329
msgid "`quarkus.oidc.provider=facebook` will request `Facebook` to add `email` and `public_profile` scopes to issued access tokens. For information about overriding these scopes or requesting more scopes, see the xref:provider-scope[Provider scopes] section."
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-providers.adoc:331
#, no-wrap
msgid "Twitter"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:335
msgid "You can use Twitter for OIDC login, but at the moment, it restricts access to the user's email, which means you will have to obtain it and verify it yourself."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:337
msgid "In order to set up OIDC for Twitter start by https://developer.twitter.com/en/portal/projects/new[Creating a project], enter a project name, and press `Next`:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:338
#, no-wrap
msgid "oidc-twitter-1.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:341
msgid "Enter a use case, and press `Next`:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:342
#, no-wrap
msgid "oidc-twitter-2.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:345
msgid "Enter a project description, and press `Next`:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:346
#, no-wrap
msgid "oidc-twitter-3.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:349
msgid "Now enter an application name, and press `Next`:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:350
#, no-wrap
msgid "oidc-twitter-4.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:353
msgid "Write down your keys, because they will not be displayed again, and press `App Settings`:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:354
#, no-wrap
msgid "oidc-twitter-5.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:357
msgid "Navigate down to the `User authentication settings` section and press `Set up`:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:358
#, no-wrap
msgid "oidc-twitter-6.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:361
msgid "Check the `OAuth 2.0` check box:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:362
#, no-wrap
msgid "oidc-twitter-7.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:366
msgid "Select `Web App` as application type, then fill in your application details (use `<host>/_renarde/security/twitter-success` for the `Callback URI`)."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:369
msgid "Twitter doesn't require https usage in practice, but won't accept your `Website URL` without it, so you can still use ngrok for it."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:371
msgid "Now press `Save`:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:372
#, no-wrap
msgid "oidc-twitter-8.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:375
msgid "You can now copy your `Client ID` and `Client Secret` and press `Done`:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:376
#, no-wrap
msgid "oidc-twitter-9.png"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-providers.adoc:385
#, no-wrap
msgid ""
"quarkus.oidc.provider=twitter\n"
"quarkus.oidc.client-id=<Client ID>\n"
"quarkus.oidc.credentials.secret=<Client Secret>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:388
msgid "`quarkus.oidc.provider=twitter` will request `Twitter` to add `offline.access`, `tweet.read` and `users.read` scopes to issued access tokens. For information about overriding these scopes or requesting more scopes, see the xref:provider-scope[Provider scopes] section."
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-openid-connect-providers.adoc:394
msgid "Twitter provider requires Proof Key for Code Exchange (PKCE) which is supported by the `quarkus.oidc.provider=twitter` declaration.  Quarkus has to encrypt the current PKCE code verifier in a state cookie while the authorization code flow with Twitter is in progress and it will generate a secure random secret key for encrypting it."
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-openid-connect-providers.adoc:397
msgid "You can provide your own secret key for encrypting the PKCE code verifier if you prefer with the `quarkus.oidc.authentication.state-secret` property but note that this secret should be 32 characters long, and an error will be reported if it is less than 16 characters long."
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-openid-connect-providers.adoc:402
msgid "`X` is a new name for `Twitter`, see xref:x[X]. You can continue using `quarkus.oidc.provider=twitter` but it might need to be changed to `quarkus.oidc.provider=x` in the future."
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-providers.adoc:405
#, no-wrap
msgid "X"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:408
msgid "`X` is a new name for `Twitter`. You can currently use either `quarkus.oidc.provider=x` or `quarkus.oidc.provider=twitter` but only `quarkus.oidc.provider=x` may end up supported in the future."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:410
msgid "Please see xref:twitter[Twitter] for more information about registering your Quarkus application in `X` (`Twitter`)."
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-providers.adoc:412
#, no-wrap
msgid "Spotify"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:415
msgid "Create a https://developer.spotify.com/documentation/general/guides/authorization/app-settings/[Spotify application]:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:416
#, no-wrap
msgid "oidc-spotify-1.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:419
msgid "Don't forget to add `http://localhost:8080` as a redirect URI for testing during development purposes. You should get a client id and secret generated once a Spotify application setup has been complete, for example:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:420
#, no-wrap
msgid "oidc-spotify-2.png"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-providers.adoc:429
#, no-wrap
msgid ""
"quarkus.oidc.provider=spotify\n"
"quarkus.oidc.client-id=<Client ID>\n"
"quarkus.oidc.credentials.secret=<Client Secret>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:432
msgid "`quarkus.oidc.provider=spotiify` will request `Spotify` to add `user-read-private` and `user-read-email` scopes to issued access tokens. For information about overriding these scopes or requesting more scopes, see the xref:provider-scope[Provider scopes] section."
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-providers.adoc:434
#, no-wrap
msgid "Twitch"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:437
msgid "Create a https://dev.twitch.tv/console/apps[Twitch application]:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:438
#, no-wrap
msgid "oidc-twitch-1.png"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-providers.adoc:447
#, no-wrap
msgid ""
"quarkus.oidc.provider=twitch\n"
"quarkus.oidc.client-id=<Client ID>\n"
"quarkus.oidc.credentials.client-secret.value=<Client Secret>\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-openid-connect-providers.adoc:451
#, no-wrap
msgid "Provider scopes"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:454
msgid "Each provider declaration will request one or more token scopes added to access tokens issued by a given provider. For example, `quarkus.oidc.provider=google` will request `Google` to add `openid`, `email` and `profile` scopes."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:456
msgid "You can override these scopes with `quarkus.oidc.authentication.scopes` property, for example, if you work with `Google` and would not like to have an `email` scope added to access tokens:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-providers.adoc:461
#, no-wrap
msgid ""
"quarkus.oidc.provider=google\n"
"quarkus.oidc.authentication.scopes=oidc,profile\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:464
msgid "You may also want to add one or more scopes in addition to the scopes requested by default. For example, if you would like to use an access token issued by `Google` to access `Google Calendar` service, you can do it like this:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-providers.adoc:469
#, no-wrap
msgid ""
"quarkus.oidc.provider=google\n"
"quarkus.oidc.authentication.extra-params.scope=https://www.googleapis.com/auth/calendar\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:472
msgid "It is simpler than using `quarkus.oidc.authentication.scopes` to add a new scope, because `quarkus.oidc.authentication.scopes` overrides the scopes already set by the provider declaration, which is why you need to list all the required scopes in this case:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-providers.adoc:477
#, no-wrap
msgid ""
"quarkus.oidc.provider=google\n"
"quarkus.oidc.authentication.scopes=oidc,email,profile,https://www.googleapis.com/auth/calendar\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-openid-connect-providers.adoc:479
#, no-wrap
msgid "Support for multiple providers"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:482
msgid "If you would like to support authenticating users with more than one provider then a provider-specific tenant configuration resolution must be supported."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:484
msgid "For more information, see the Quarkus xref:security-openid-connect-multitenancy.adoc#static-tenant-resolution[Using OpenID Connect (OIDC) Multi-Tenancy] guide."
msgstr ""

#. type: Title ==
#: upstream/_guides/security-openid-connect-providers.adoc:485
#, no-wrap
msgid "Access provider services with token propagation"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:489
msgid "Sometimes, only authenticating users with a social provider is not enough.  A provider-specific service also needs to be accessed for the Quarkus OIDC `web-app` application to fetch or update data from the provider service on behalf of the currently authenticated user."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:492
msgid "As mentioned in the xref:security-oidc-code-flow-authentication.adoc[OIDC code flow mechanism for protecting web applications] guide, ID and access tokens are returned after the authorization code flow has been completed, with some providers like `GitHub` returning an access token only.  It is this access token that has to be propagated to services such as `Google Calendar`, or `Spotify Playlists` for the currently authenticated user to be able to use such services."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:495
msgid "You do not have to bring provider-specific libraries in order to achieve this, but instead you can use a reactive `Token Propagation` filter, which can be bound to a given REST client with a simple annotation.  For more information, see the Quarkus xref:security-openid-connect-client-reference.adoc#token-propagation-reactive[Access token propagation] guide."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:497
msgid "For example, after you have configured the xref:google[Google] provider, you can have events added to the user's Google Calendar by using a REST client as shown in the following example:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-providers.adoc:501
#: upstream/_guides/security-openid-connect-providers.adoc:562
#, no-wrap
msgid "package org.acme.calendar;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-providers.adoc:503
#, no-wrap
msgid "import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-providers.adoc:511
#, no-wrap
msgid ""
"import io.quarkus.oidc.token.propagation.AccessToken;\n"
"import io.smallrye.mutiny.Uni;\n"
"import jakarta.ws.rs.Consumes;\n"
"import jakarta.ws.rs.POST;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-providers.adoc:527
#, no-wrap
msgid ""
"@RegisterRestClient(configKey=\"google-calendar-api\")\n"
"@AccessToken  <1>\n"
"@Path(\"/calendars/primary\")\n"
"public interface GoogleCalendarClient {\n"
"    @POST\n"
"    @Path(\"events\")\n"
"    @Consumes(MediaType.APPLICATION_JSON)\n"
"    @Produces(MediaType.APPLICATION_JSON)\n"
"    Uni<String> addEvent(Event event);\n"
"    public static class Event {\n"
"        public String summary;\n"
"        public String kind = \"calendar#event\";\n"
"        public Time start;\n"
"        public Time end\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-providers.adoc:538
#, no-wrap
msgid ""
"    public static class Time {\n"
"        public String dateTime;\n"
"        public String timeZone = \"Europe/CET\";\n"
"        public Time() {\n"
"        }\n"
"        public Time(String value) {\n"
"            dateTime = value;\n"
"\t}\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:541
msgid "The `@AccessToken` annotation enables an access token propagation to the target service."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:543
msgid "Finally, you need to configure the Google Calendar address and request the Google Calendar scope for an access token, as outlined in the following example:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-providers.adoc:552
#, no-wrap
msgid ""
"# Add a required calendar scope\n"
"quarkus.oidc.authentication.extra-params.scope=https://www.googleapis.com/auth/calendar\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-providers.adoc:555
#, no-wrap
msgid ""
"# Point REST client to Google Calendar endpoint\n"
"quarkus.rest-client.google-calendar-api.url=https://www.googleapis.com/calendar/v3\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:558
msgid "Now you are ready to have users authenticated with Google and support updating their `Google` calendars on their behalf, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-providers.adoc:565
#, no-wrap
msgid ""
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
"import org.eclipse.microprofile.rest.client.inject.RestClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-providers.adoc:573
#, no-wrap
msgid ""
"import io.quarkus.oidc.IdToken;\n"
"import io.quarkus.security.Authenticated;\n"
"import io.smallrye.mutiny.Uni;\n"
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-providers.adoc:577
#, no-wrap
msgid ""
"@Path(\"/calendar\")\n"
"@Authenticated\n"
"public class CalendarService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-providers.adoc:581
#, no-wrap
msgid ""
"    @Inject\n"
"    @IdToken\n"
"    JsonWebToken jwt;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-providers.adoc:585
#, no-wrap
msgid ""
"    @Inject\n"
"    @RestClient\n"
"    GoogleCalendarClient calendarClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-providers.adoc:594
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/event\")\n"
"    @Produces(\"text/plain\")\n"
"    public Uni<String> get() {\n"
"        return calendarClient.addEvent(new Event()).onItem()\n"
"           .transform(c -> (\"Hello \" + jwt.getName() + \", new event: \" + c));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:597
msgid "You must update the application registered with the xref:google[Google] provider to list `http://localhost:8080/calendar/event` as one of the authorized redirect URIs if you would like to test this endpoint on the local host, for example:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:598
#, no-wrap
msgid "oidc-google-authorized-redirects.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:601
msgid "You might also have to register one or more test users:"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-openid-connect-providers.adoc:602
#, no-wrap
msgid "oidc-google-test-users.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:605
msgid "Follow the same approach if the endpoint must access other Google services."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:607
msgid "The pattern of authenticating with a given provider, where the endpoint uses either an ID token or UserInfo (especially if an OAuth2-only provider such as `GitHub` is used) to get some information about the currently authenticated user and using an access token to access some downstream services (provider or application specific ones) on behalf of this user can be universally applied, irrespectively of which provider is used to secure the application."
msgstr ""

#. type: Title ==
#: upstream/_guides/security-openid-connect-providers.adoc:608
#, no-wrap
msgid "HTTPS Redirect URL"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:611
msgid "Some providers will only accept HTTPS-based redirect URLs. Tools such as https://ngrok.com/[ngrok] https://linuxhint.com/set-up-use-ngrok/[can be set up] to help testing such providers with Quarkus endpoints running on localhost in devmode."
msgstr ""

#. type: Title ==
#: upstream/_guides/security-openid-connect-providers.adoc:612
#, no-wrap
msgid "References"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:615
msgid "xref:security-oidc-code-flow-authentication.adoc[OIDC code flow mechanism for protecting web applications]"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-providers.adoc:615
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr ""
