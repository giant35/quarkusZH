# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-12-23 01:01+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/amqp.adoc:6
#, no-wrap
msgid "Getting Started to SmallRye Reactive Messaging with AMQP 1.0"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:11
msgid "This guide demonstrates how your Quarkus application can utilize SmallRye Reactive Messaging to interact with AMQP 1.0."
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:18
msgid "If you want to use RabbitMQ, you should use the xref:rabbitmq.adoc[SmallRye Reactive Messaging RabbitMQ extension].  Alternatively, if want to use RabbitMQ with AMQP 1.0 you need to enable the AMQP 1.0 plugin in the RabbitMQ broker; check the https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/3.9/amqp/amqp.html#amqp-rabbitmq[connecting to RabbitMQ] documentation."
msgstr ""

#. type: Title ==
#: upstream/_guides/amqp.adoc:19
#, no-wrap
msgid "Prerequisites"
msgstr "准备"

#. type: Plain text
#: upstream/_guides/amqp.adoc:22
msgid "To complete this guide, you need:"
msgstr "要完成本指南，您需要："

#. type: Plain text
#: upstream/_guides/amqp.adoc:24
msgid "less than 15 minutes"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:25
msgid "an IDE"
msgstr "IDE"

#. type: Plain text
#: upstream/_guides/amqp.adoc:26
msgid "JDK 11+ installed with `JAVA_HOME` configured appropriately"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:27
msgid "Apache Maven {maven-version}"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:28
msgid "docker and docker-compose"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:29
msgid "GraalVM installed if you want to run in native mode."
msgstr ""

#. type: Title ==
#: upstream/_guides/amqp.adoc:30
#, no-wrap
msgid "Architecture"
msgstr "架构"

#. type: Plain text
#: upstream/_guides/amqp.adoc:36
msgid "In this guide, we are going to develop two applications communicating with an AMQP broker.  We will use https://activemq.apache.org/components/artemis/[Artemis], but you can use any AMQP 1.0 broker.  The first application sends a _quote request_ to an AMQP queue and consumes messages from the _quote_ queue.  The second application receives the _quote request_ and sends a _quote_ back."
msgstr ""

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_guides/amqp.adoc:37
#, fuzzy, no-wrap
#| msgid "Architecture"
msgid "Architecture,"
msgstr "架构"

#. type: Target for macro image
#: upstream/_guides/amqp.adoc:37
#, fuzzy, no-wrap
#| msgid "Architecture"
msgid "amqp-qs-architecture.png"
msgstr "架构"

#. type: Plain text
#: upstream/_guides/amqp.adoc:42
msgid "The first application, the `producer`, will let the user request some quotes over an HTTP endpoint.  For each quote request, a random identifier is generated and returned to the user, to put the quote request on _pending_.  At the same time the generated request id is sent over the `quote-requests` queue."
msgstr ""

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_guides/amqp.adoc:43
#, no-wrap
msgid "Producer"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/amqp.adoc:43
#, no-wrap
msgid "amqp-qs-app-screenshot.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:46
msgid "The second application, the `processor`, in turn, will read from the `quote-requests` queue put a random price to the quote, and send it to a queue named `quotes`."
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:49
msgid "Lastly, the `producer` will read the quotes and send them to the browser using server-sent events.  The user will therefore see the quote price updated from _pending_ to the received price in real-time."
msgstr ""

#. type: Title ==
#: upstream/_guides/amqp.adoc:50
#, no-wrap
msgid "Solution"
msgstr "完整源码"

#. type: Plain text
#: upstream/_guides/amqp.adoc:54
msgid "We recommend that you follow the instructions in the next sections and create applications step by step.  However, you can go right to the completed example."
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:56
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:58
msgid "The solution is located in the `amqp-quickstart` {quickstarts-tree-url}/amqp-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_guides/amqp.adoc:59
#, no-wrap
msgid "Creating the Maven Project"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:62
msgid "First, we need to create two projects: the _producer_ and the _processor_."
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:64
msgid "To create the _producer_ project, in a terminal run:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:72
#, no-wrap
msgid ""
"mvn io.quarkus.platform:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=amqp-quickstart-producer \\\n"
"    -DnoCode=true \\\n"
"    -Dextensions=resteasy-reactive-jackson,smallrye-reactive-messaging-amqp\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:75
msgid "This command creates the project structure and select the two Quarkus extensions we will be using:"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:77
msgid "RESTEasy Reactive and it's Jackson support to handle JSON payloads"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:78
msgid "The Reactive Messaging AMQP connector"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:80
msgid "To create the _processor_ project, from the same directory, run:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:88
#, no-wrap
msgid ""
"mvn io.quarkus.platform:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=amqp-quickstart-processor \\\n"
"    -DnoCode=true \\\n"
"    -Dextensions=smallrye-reactive-messaging-amqp\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:91
msgid "At that point you should have the following structure:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:117
#, no-wrap
msgid ""
".\n"
"├── amqp-quickstart-processor\n"
"│  ├── README.md\n"
"│  ├── mvnw\n"
"│  ├── mvnw.cmd\n"
"│  ├── pom.xml\n"
"│  └── src\n"
"│     └── main\n"
"│        ├── docker\n"
"│        ├── java\n"
"│        └── resources\n"
"│           └── application.properties\n"
"└── amqp-quickstart-producer\n"
"   ├── README.md\n"
"   ├── mvnw\n"
"   ├── mvnw.cmd\n"
"   ├── pom.xml\n"
"   └── src\n"
"      └── main\n"
"         ├── docker\n"
"         ├── java\n"
"         └── resources\n"
"            └── application.properties\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:120
msgid "Open the two projects in your favorite IDE."
msgstr ""

#. type: Title ==
#: upstream/_guides/amqp.adoc:121
#, no-wrap
msgid "The Quote object"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:126
msgid "The `Quote` class will be used in both `producer` and `processor` projects.  For the sake of simplicity we will duplicate the class.  In both projects, create the `src/main/java/org/acme/amqp/model/Quote.java` file, with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:130
#, no-wrap
msgid "package org.acme.amqp.model;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:132
#, no-wrap
msgid "import io.quarkus.runtime.annotations.RegisterForReflection;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:135
#, no-wrap
msgid ""
"@RegisterForReflection\n"
"public class Quote {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:138
#, no-wrap
msgid ""
"    public String id;\n"
"    public int price;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:143
#, no-wrap
msgid ""
"    /**\n"
"    * Default constructor required for Jackson serializer\n"
"    */\n"
"    public Quote() { }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:148
#, no-wrap
msgid ""
"    public Quote(String id, int price) {\n"
"        this.id = id;\n"
"        this.price = price;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:157
#, no-wrap
msgid ""
"    @Override\n"
"    public String toString() {\n"
"        return \"Quote{\" +\n"
"                \"id='\" + id + '\\'' +\n"
"                \", price=\" + price +\n"
"                '}';\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:161
msgid "JSON representation of `Quote` objects will be used in messages sent to the AMQP queues and also in the server-sent events sent to browser clients."
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:163
msgid "Quarkus has built-in capabilities to deal with JSON AMQP messages."
msgstr ""

#. type: Block title
#: upstream/_guides/amqp.adoc:165
#, no-wrap
msgid "@RegisterForReflection"
msgstr ""

#. type: delimited block =
#: upstream/_guides/amqp.adoc:170
msgid "The `@RegisterForReflection` annotation instructs Quarkus to include the class (including fields and methods) when building the native executable.  This will be useful later when we run the applications as native executables inside containers.  Without, the native compilation would remove the fields and methods during the dead-code elimination phase."
msgstr ""

#. type: Title ==
#: upstream/_guides/amqp.adoc:172
#, no-wrap
msgid "Sending quote request"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:175
msgid "Inside the `producer` project locate the generated `src/main/java/org/acme/amqp/producer/QuotesResource.java` file, and update the content to be:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:179
#, no-wrap
msgid "package org.acme.amqp.producer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:181
#, no-wrap
msgid "import java.util.UUID;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:187
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:191
#, no-wrap
msgid ""
"import org.acme.amqp.model.Quote;\n"
"import org.eclipse.microprofile.reactive.messaging.Channel;\n"
"import org.eclipse.microprofile.reactive.messaging.Emitter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:193
#, no-wrap
msgid "import io.smallrye.mutiny.Multi;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:196
#, no-wrap
msgid ""
"@Path(\"/quotes\")\n"
"public class QuotesResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:198
#, no-wrap
msgid "    @Channel(\"quote-requests\") Emitter<String> quoteRequestEmitter; // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:211
#, no-wrap
msgid ""
"    /**\n"
"     * Endpoint to generate a new quote request id and send it to \"quote-requests\" AMQP queue using the emitter.\n"
"     */\n"
"    @POST\n"
"    @Path(\"/request\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String createRequest() {\n"
"        UUID uuid = UUID.randomUUID();\n"
"        quoteRequestEmitter.send(uuid.toString()); // <2>\n"
"        return uuid.toString();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:213
msgid "Inject a Reactive Messaging `Emitter` to send messages to the `quote-requests` channel."
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:214
msgid "On a post request, generate a random UUID and send it to the AMQP queue using the emitter."
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:218
msgid "The `quote-requests` channel is going to be managed as a AMQP queue, as that's the only connector on the classpath.  If not indicated otherwise, like in this example, Quarkus uses the channel name as AMQP queue name.  So, in this example, the application sends messages to the `quote-requests` queue."
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:220
msgid "When you have multiple connectors, you would need to indicate which connector you want to use in the application configuration."
msgstr ""

#. type: Title ==
#: upstream/_guides/amqp.adoc:221
#, no-wrap
msgid "Processing quote requests"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:225
msgid "Now let's consume the quote request and give out a price.  Inside the `processor` project, locate the `src/main/java/org/acme/amqp/processor/QuoteProcessor.java` file and add the following:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:229
#, no-wrap
msgid "package org.acme.amqp.processor;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:231
#, no-wrap
msgid "import java.util.Random;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:233
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:237
#, no-wrap
msgid ""
"import org.acme.amqp.model.Quote;\n"
"import org.eclipse.microprofile.reactive.messaging.Incoming;\n"
"import org.eclipse.microprofile.reactive.messaging.Outgoing;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:239
#, no-wrap
msgid "import io.smallrye.reactive.messaging.annotations.Blocking;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:246
#, no-wrap
msgid ""
"/**\n"
" * A bean consuming data from the \"request\" AMQP queue and giving out a random quote.\n"
" * The result is pushed to the \"quotes\" AMQP queue.\n"
" */\n"
"@ApplicationScoped\n"
"public class QuoteProcessor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:248
#, no-wrap
msgid "    private Random random = new Random();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:258
#, no-wrap
msgid ""
"    @Incoming(\"requests\")       // <1>\n"
"    @Outgoing(\"quotes\")         // <2>\n"
"    @Blocking                   // <3>\n"
"    public Quote process(String quoteRequest) throws InterruptedException {\n"
"        // simulate some hard working task\n"
"        Thread.sleep(200);\n"
"        return new Quote(quoteRequest, random.nextInt(100));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:260
msgid "Indicates that the method consumes the items from the `requests` channel"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:261
msgid "Indicates that the objects returned by the method are sent to the `quotes` channel"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:262
msgid "Indicates that the processing is _blocking_ and cannot be run on the caller thread."
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:264
msgid "The `process` method is called for every AMQP message from the `quote-requests` queue, and will send a `Quote` object to the `quotes` queue."
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:267
msgid "Because we want to consume messages from the `quotes-requests` queue into the `requests` channel, we need to configure this association.  Open the `src/main/resources/application.properties` file and add:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:271
#, no-wrap
msgid "mp.messaging.incoming.requests.address=quote-requests\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:274
msgid "The configuration keys are structured as follows:"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:276
msgid "`mp.messaging.[outgoing|incoming].{channel-name}.property=value`"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:278
msgid "In our case, we want to configure the `address` attribute to indicate the name of the queue."
msgstr ""

#. type: Title ==
#: upstream/_guides/amqp.adoc:279
#, no-wrap
msgid "Receiving quotes"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:283
msgid "Back to our `producer` project.  Let's modify the `QuotesResource` to consume quotes, bind it to an HTTP endpoint to send events to clients:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:288
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Multi;\n"
"//...\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:290
#, no-wrap
msgid "@Channel(\"quotes\") Multi<Quote> quotes;     // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:299
#, no-wrap
msgid ""
"/**\n"
" * Endpoint retrieving the \"quotes\" queue and sending the items to a server sent event.\n"
" */\n"
"@GET\n"
"@Produces(MediaType.SERVER_SENT_EVENTS) // <2>\n"
"public Multi<Quote> stream() {\n"
"    return quotes; // <3>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:301
msgid "Injects the `quotes` channel using the `@Channel` qualifier"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:302
msgid "Indicates that the content is sent using `Server Sent Events`"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:303
msgid "Returns the stream (_Reactive Stream_)"
msgstr ""

#. type: Title ==
#: upstream/_guides/amqp.adoc:304
#, no-wrap
msgid "The HTML page"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:307
msgid "Final touch, the HTML page reading the converted prices using SSE."
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:309
msgid "Create inside the `producer` project `src/main/resources/META-INF/resources/quotes.html` file, with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:313
#, no-wrap
msgid "<!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>Quotes</title>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:349
#, no-wrap
msgid ""
"    <link rel=\"stylesheet\" type=\"text/css\"\n"
"          href=\"https://cdnjs.cloudflare.com/ajax/libs/patternfly/3.24.0/css/patternfly.min.css\">\n"
"    <link rel=\"stylesheet\" type=\"text/css\"\n"
"          href=\"https://cdnjs.cloudflare.com/ajax/libs/patternfly/3.24.0/css/patternfly-additions.min.css\">\n"
"</head>\n"
"<body>\n"
"<div class=\"container\">\n"
"    <div class=\"card\">\n"
"        <div class=\"card-body\">\n"
"            <h2 class=\"card-title\">Quotes</h2>\n"
"            <button class=\"btn btn-info\" id=\"request-quote\">Request Quote</button>\n"
"            <div class=\"quotes\"></div>\n"
"        </div>\n"
"    </div>\n"
"</div>\n"
"</body>\n"
"<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n"
"<script>\n"
"    $(\"#request-quote\").click((event) => {\n"
"        fetch(\"/quotes/request\", {method: \"POST\"})\n"
"        .then(res => res.text())\n"
"        .then(qid => {\n"
"            var row = $(`<h4 class='col-md-12' id='${qid}'>Quote # <i>${qid}</i> | <strong>Pending</strong></h4>`);\n"
"            $(\".quotes\").append(row);\n"
"        });\n"
"    });\n"
"    var source = new EventSource(\"/quotes\");\n"
"    source.onmessage = (event) => {\n"
"      var json = JSON.parse(event.data);\n"
"      $(`#${json.id}`).html(function(index, html) {\n"
"        return html.replace(\"Pending\", `\\$\\xA0${json.price}`);\n"
"      });\n"
"    };\n"
"</script>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:353
msgid "Nothing spectacular here.  On each received quote, it updates the page."
msgstr ""

#. type: Title ==
#: upstream/_guides/amqp.adoc:354
#, no-wrap
msgid "Get it running"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:357
msgid "You just need to run both applications using:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:361
#, no-wrap
msgid "> mvn -f amqp-quickstart-producer quarkus:dev\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:364
msgid "And, in a separate terminal:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:368
#, no-wrap
msgid "> mvn -f amqp-quickstart-processor quarkus:dev\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:372
msgid "Quarkus starts a AMQP broker automatically, configures the application and shares the broker instance between different applications.  See xref:amqp-dev-services.adoc[Dev Services for AMQP] for more details."
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:375
msgid "Open `http://localhost:8080/quotes.html` in your browser and request some quotes by clicking the button."
msgstr ""

#. type: Title ==
#: upstream/_guides/amqp.adoc:376
#, no-wrap
msgid "Running in JVM or Native mode"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:380
msgid "When not running in dev or test mode, you will need to start your AMQP broker.  You can follow the instructions from the https://activemq.apache.org/components/artemis/documentation/latest/using-server.html[Apache ActiveMQ Artemis website] or create a `docker-compose.yaml` file with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:384
#, no-wrap
msgid "version: '2'\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:386
#, no-wrap
msgid "services:\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:398
#, no-wrap
msgid ""
"  artemis:\n"
"    image: quay.io/artemiscloud/activemq-artemis-broker:0.1.2\n"
"    ports:\n"
"      - \"8161:8161\"\n"
"      - \"61616:61616\"\n"
"      - \"5672:5672\"\n"
"    environment:\n"
"      AMQ_USER: quarkus\n"
"      AMQ_PASSWORD: quarkus\n"
"    networks:\n"
"      - amqp-quickstart-network\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:411
#, no-wrap
msgid ""
"  producer:\n"
"    image: quarkus-quickstarts/amqp-quickstart-producer:1.0-${QUARKUS_MODE:-jvm}\n"
"    build:\n"
"      context: amqp-quickstart-producer\n"
"      dockerfile: src/main/docker/Dockerfile.${QUARKUS_MODE:-jvm}\n"
"    environment:\n"
"      AMQP_HOST: artemis\n"
"      AMQP_PORT: 5672\n"
"    ports:\n"
"      - \"8080:8080\"\n"
"    networks:\n"
"      - amqp-quickstart-network\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:422
#, no-wrap
msgid ""
"  processor:\n"
"    image: quarkus-quickstarts/amqp-quickstart-processor:1.0-${QUARKUS_MODE:-jvm}\n"
"    build:\n"
"      context: amqp-quickstart-processor\n"
"      dockerfile: src/main/docker/Dockerfile.${QUARKUS_MODE:-jvm}\n"
"    environment:\n"
"      AMQP_HOST: artemis\n"
"      AMQP_PORT: 5672\n"
"    networks:\n"
"      - amqp-quickstart-network\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:426
#, no-wrap
msgid ""
"networks:\n"
"  amqp-quickstart-network:\n"
"    name: amqp-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:430
msgid "Note how the AMQP broker location is configured.  The `amqp.host` and `amqp.port` (`AMQP_HOST` and `AMQP_PORT` environment variables) properties configure location."
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:433
msgid "First, make sure you stopped the applications, and build both applications in JVM mode with:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:438
#, no-wrap
msgid ""
"> mvn -f amqp-quickstart-producer clean package\n"
"> mvn -f amqp-quickstart-processor clean package\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:442
msgid "Once packaged, run `docker compose up --build`.  The UI is exposed on http://localhost:8080/quotes.html"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:444
msgid "To run your applications as native, first we need to build the native executables:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:449
#, no-wrap
msgid ""
"> mvn -f amqp-quickstart-producer package -Pnative  -Dquarkus.native.container-build=true\n"
"> mvn -f amqp-quickstart-processor package -Pnative -Dquarkus.native.container-build=true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:453
msgid "The `-Dquarkus.native.container-build=true` instructs Quarkus to build Linux 64bits native executables, who can run inside containers.  Then, run the system using:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:458
#, no-wrap
msgid ""
"> export QUARKUS_MODE=native\n"
"> docker compose up --build\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:461
msgid "As before, the UI is exposed on http://localhost:8080/quotes.html"
msgstr ""

#. type: Title ==
#: upstream/_guides/amqp.adoc:462
#, no-wrap
msgid "Going further"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:466
msgid "This guide has shown how you can interact with AMQP 1.0 using Quarkus.  It utilizes https://smallrye.io/smallrye-reactive-messaging[SmallRye Reactive Messaging] to build data streaming applications."
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:469
msgid "If you did the Kafka quickstart, you have realized that it's the same code.  The only difference is the connector configuration and the JSON mapping."
msgstr ""
