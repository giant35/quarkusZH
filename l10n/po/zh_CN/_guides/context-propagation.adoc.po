# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-07-10 05:19+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/context-propagation.adoc:6
#, no-wrap
msgid "Context Propagation in Quarkus"
msgstr ""

#. type: Plain text
#: upstream/_guides/context-propagation.adoc:15
#, no-wrap
msgid ""
"Traditional blocking code uses link:https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/ThreadLocal.html[`ThreadLocal`]\n"
" variables to store contextual objects in order to avoid\n"
"passing them as parameters everywhere. Many Quarkus extensions require those contextual objects to operate\n"
"properly: link:rest-json[RESTEasy], link:cdi-reference[ArC] and link:transaction[Transaction]\n"
"for example.\n"
msgstr "従来のブロッキングコードでは  link:https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/ThreadLocal.html[`ThreadLocal`] 変数を使用してコンテキストオブジェクトを格納します。多くのQuarkusエクステンションは、適切に動作するためにこれらのコンテキストオブジェクトを必要とします。例えば、 link:rest-json[RESTEasy]、 link:cdi-reference[ArC]、 link:transaction[Transaction]などです。\n"

#. type: Plain text
#: upstream/_guides/context-propagation.adoc:20
msgid "If you write reactive/async code, you have to cut your work into a pipeline of code blocks that get executed \"later\", and in practice after the method you defined them in have returned. As such, `try/finally` blocks as well as `ThreadLocal` variables stop working, because your reactive code gets executed in another thread, after the caller ran its `finally` block."
msgstr "リアクティブ/非同期コードを書く場合、「後で」実行されるコードブロックのパイプラインに作業を切り 込まなければならず、実際には、定義したメソッドがreturnされた後に実行されます。そのため、 `try/finally` ブロックや `ThreadLocal` 変数は動作しなくなります。なぜならば、呼び出し元が `finally` ブロックを実行した後に、 リアクティブコードは別のスレッドで実行されるからです。"

#. type: Plain text
#: upstream/_guides/context-propagation.adoc:25
msgid "link:https://github.com/smallrye/smallrye-context-propagation[SmallRye Context Propagation] an implementation of link:https://github.com/eclipse/microprofile-context-propagation[MicroProfile Context Propagation] was made to make those Quarkus extensions work properly in reactive/async settings. It works by capturing those contextual values that used to be in thread-locals, and restoring them when your code is called."
msgstr "link:https://github.com/eclipse/microprofile-context-propagation[MicroProfile Context Propagation] の実装である link:https://github.com/smallrye/smallrye-context-propagation[SmallRye Context Propagation] は、リアクティブ/非同期設定でQuarkusエクステンションが正しく動作するようにするために作られました。これは、スレッドローカルにあったコンテキスト値を取得し、コードが呼び出されたときにそれらを復元することで動作します。"

#. type: Title ==
#: upstream/_guides/context-propagation.adoc:26
#, no-wrap
msgid "Setting it up"
msgstr "設定"

#. type: Plain text
#: upstream/_guides/context-propagation.adoc:30
msgid "If you are using link:http://smallrye.io/smallrye-mutiny[Mutiny] (the `quarkus-mutiny` extension), you just need to add the the `quarkus-smallrye-context-propagation` extension to enable context propagation."
msgstr "link:http://smallrye.io/smallrye-mutiny[Mutiny] ( `quarkus-mutiny` のエクステンション) を使用している場合は、コンテキストの伝播を有効にするために `quarkus-smallrye-context-propagation` のエクステンションを追加するだけです。"

#. type: Plain text
#: upstream/_guides/context-propagation.adoc:32
msgid "In other words, add the following dependencies to your `pom.xml`:"
msgstr "つまり、以下の依存関係を `pom.xml` に追加します:"

#. type: delimited block -
#: upstream/_guides/context-propagation.adoc:51
#, no-wrap
msgid ""
"<dependencies>\n"
"    <!-- Mutiny and RestEasy support extensions if not already included -->\n"
"    <dependency>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-mutiny</artifactId>\n"
"    </dependency>\n"
"    <dependency>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-resteasy-mutiny</artifactId>\n"
"    </dependency>\n"
"    <!-- Context Propagation extension -->\n"
"    <dependency>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-smallrye-context-propagation</artifactId>\n"
"    </dependency>\n"
"</dependencies>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/context-propagation.adoc:54
msgid "With this, you will get context propagation for ArC, RESTEasy and transactions, if you are using them."
msgstr "これにより、ArC、RESTEasy、トランザクションを使用している場合は、コンテキストの伝播を得ることができます。"

#. type: Title ==
#: upstream/_guides/context-propagation.adoc:55
#, no-wrap
msgid "Usage example with Mutiny"
msgstr ""

#. type: Block title
#: upstream/_guides/context-propagation.adoc:58
#, no-wrap
msgid "Mutiny"
msgstr "Mutiny"

#. type: delimited block =
#: upstream/_guides/context-propagation.adoc:61
msgid "This section uses Mutiny reactive types, if you're not familiar with them, read the link:getting-started-reactive#mutiny[Getting Started with Reactive guide] first."
msgstr "このセクションでは、Mutinyのリアクティブタイプ を使用しています。慣れていない場合は、 link:getting-started-reactive#mutiny[Getting Started with Reactive guide] を先にお読みください。"

#. type: Plain text
#: upstream/_guides/context-propagation.adoc:66
msgid "Let's write a REST endpoint that reads the next 3 items from a link:kafka[Kafka topic], stores them in a database using link:hibernate-orm-panache[Hibernate ORM with Panache] (all in the same transaction) before returning them to the client, you can do it like this:"
msgstr "link:kafka[Kafkaトピック] から次の3つのアイテムを読み込んで、 link:hibernate-orm-panache[Hibernate ORM with Panache] を使ってデータベースに保存してからクライアントに返すRESTエンドポイントを書いてみましょう:"

#. type: delimited block -
#: upstream/_guides/context-propagation.adoc:72
#, no-wrap
msgid ""
"    // Get the prices stream\n"
"    @Inject\n"
"    @Channel(\"prices\") Publisher<Double> prices;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/context-propagation.adoc:93
#, no-wrap
msgid ""
"    @Transactional\n"
"    @GET\n"
"    @Path(\"/prices\")\n"
"    @Produces(MediaType.SERVER_SENT_EVENTS)\n"
"    @SseElementType(MediaType.TEXT_PLAIN)\n"
"    public Publisher<Double> prices() {\n"
"        // get the next three prices from the price stream\n"
"        return Multi.createFrom().publisher(prices)\n"
"                .select().first(3)\n"
"                .map(price -> {\n"
"                    // store each price before we send them\n"
"                    Price priceEntity = new Price();\n"
"                    priceEntity.value = price;\n"
"                    // here we are all in the same transaction\n"
"                    // thanks to context propagation\n"
"                    priceEntity.persist();\n"
"                    return price;\n"
"                    // the transaction is committed once the stream completes\n"
"                });\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/context-propagation.adoc:97
msgid "Notice that thanks to Mutiny support for context propagation, this works out of the box.  The 3 items are persisted using the same transaction and this transaction is committed when the stream completes."
msgstr "コンテキストの伝播のための Mutiny サポートのおかげで、これは、そのまま直ぐに動作することに注目してください。3つのアイテムは同じトランザクションを使用して保持され、このトランザクションはストリームが完了するとコミットされます。"

#. type: Title ==
#: upstream/_guides/context-propagation.adoc:98
#, no-wrap
msgid "Usage example for `CompletionStage`"
msgstr "`CompletionStage` の使用例"

#. type: Plain text
#: upstream/_guides/context-propagation.adoc:106
msgid "If you are using link:https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/CompletionStage.html[`CompletionStage`] you need manual context propagation. You can do that by injecting a `ThreadContext` or `ManagedExecutor` that will propagate every context. For example, here we use the link:vertx[Vert.x Web Client] to get the list of Star Wars people, then store them in the database using link:hibernate-orm-panache[Hibernate ORM with Panache] (all in the same transaction) before returning them to the client as JSON using link:rest-json[Jackson or JSON-B]:"
msgstr "link:https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/CompletionStage.html[`CompletionStage`]を使用する場合、手動でコンテキストを伝播させる必要があります。 `ThreadContext` や `ManagedExecutor` を注入することで、すべてのコンテキストを伝播させることができます。例えば、ここでは link:vertx[Vert.x Web Client] を使用してスターウォーズの登場人物のリストを取得し、 link:hibernate-orm-panache[Hibernate ORM with Panache を]使用して(全て同じトランザクション内で) データベースに保存します。その後、 link:rest-json[Jackson または JSON-B] を使用して JSON としてクライアントに返します:"

#. type: delimited block -
#: upstream/_guides/context-propagation.adoc:112
#, no-wrap
msgid ""
"    @Inject ThreadContext threadContext;\n"
"    @Inject ManagedExecutor managedExecutor;\n"
"    @Inject Vertx vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/context-propagation.adoc:139
#, no-wrap
msgid ""
"    @Transactional\n"
"    @GET\n"
"    @Path(\"/people\")\n"
"    public CompletionStage<List<Person>> people() throws SystemException {\n"
"        // Create a REST client to the Star Wars API\n"
"        WebClient client = WebClient.create(vertx,\n"
"                         new WebClientOptions()\n"
"                          .setDefaultHost(\"swapi.dev\")\n"
"                          .setDefaultPort(443)\n"
"                          .setSsl(true));\n"
"        // get the list of Star Wars people, with context capture\n"
"        return threadContext.withContextCapture(client.get(\"/api/people/\").send())\n"
"                .thenApplyAsync(response -> {\n"
"                    JsonObject json = response.bodyAsJsonObject();\n"
"                    List<Person> persons = new ArrayList<>(json.getInteger(\"count\"));\n"
"                    // Store them in the DB\n"
"                    // Note that we're still in the same transaction as the outer method\n"
"                    for (Object element : json.getJsonArray(\"results\")) {\n"
"                        Person person = new Person();\n"
"                        person.name = ((JsonObject) element).getString(\"name\");\n"
"                        person.persist();\n"
"                        persons.add(person);\n"
"                    }\n"
"                    return persons;\n"
"                }, managedExecutor);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/context-propagation.adoc:143
msgid "Using `ThreadContext` or `ManagedExecutor` you can wrap most useful functional types and `CompletionStage` in order to get context propagated."
msgstr "`ThreadContext` または `ManagedExecutor` を使用することで、ほとんどの有用な関数型と `CompletionStage` をラップしてコンテキストを伝播させることができます。"

#. type: delimited block =
#: upstream/_guides/context-propagation.adoc:147
msgid "The injected `ManagedExecutor` uses the Quarkus thread pool."
msgstr "注入された `ManagedExecutor` は、Quarkus のスレッドプールを使用しています。"

#. type: Title ==
#: upstream/_guides/context-propagation.adoc:149
#, no-wrap
msgid "Adding support for RxJava2"
msgstr ""

#. type: Plain text
#: upstream/_guides/context-propagation.adoc:152
msgid "You need to include the following modules to get RxJava2 support:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/context-propagation.adoc:175
#, no-wrap
msgid ""
"<dependencies>\n"
"    <!-- Automatic context propagation for RxJava2 -->\n"
"    <dependency>\n"
"        <groupId>io.smallrye</groupId>\n"
"        <artifactId>smallrye-context-propagation-propagators-rxjava2</artifactId>\n"
"    </dependency>\n"
"    <!-- \n"
"    Required if you want transactions extended to the end of methods returning\n"
"    an RxJava2 type.\n"
"     -->\n"
"    <dependency>\n"
"        <groupId>io.smallrye.reactive</groupId>\n"
"        <artifactId>smallrye-reactive-converter-rxjava2</artifactId>\n"
"    </dependency>\n"
"    <!-- Required if you return RxJava2 types from your REST endpoints -->\n"
"    <dependency>\n"
"        <groupId>org.jboss.resteasy</groupId>\n"
"        <artifactId>resteasy-rxjava2</artifactId>\n"
"    </dependency>\n"
"</dependencies>\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/context-propagation.adoc:177
#, no-wrap
msgid "Context Propagation for CDI"
msgstr ""

#. type: Plain text
#: upstream/_guides/context-propagation.adoc:181
msgid "In terms of CDI, `@RequestScoped`, `@ApplicationScoped` and `@Singleton` beans get propagated and are available in other threads.  `@Dependent` beans as well as any custom scoped beans cannot be automatically propagated via CDI Context Propagation."
msgstr "CDI の観点からは、 `@RequestScoped`, `@ApplicationScoped`, `@Singleton` Beanは伝播され、他のスレッドで利用可能です。 `@Dependent` BeanやカスタムスコープされたBeanは、CDI コンテキスト伝播を介して自動的に伝播されることはありません。"

#. type: Plain text
#: upstream/_guides/context-propagation.adoc:188
msgid "`@ApplicationScoped` and `@Singleton` beans are always active scopes and as such are easy to deal with - context propagation tasks can work with those beans so long as the CDI container is running.  However, `@RequestScoped` beans are a different story. They are only active for a short period of time which can be bound either to HTTP request or some other request/task when manually activated/deactivated.  In this case user must be aware that once the original thread gets to an end of a request, it will terminate the context, calling `@PreDestroy` on those beans and then clearing them from the context.  Subsequent attempts to access those beans from other threads can result in unexpected behaviour.  It is therefore recommended to make sure all tasks using request scoped beans via context propagation are performed in such a manner that they don't outlive the original request duration."
msgstr "`@ApplicationScoped` と `@Singleton` のBeanは常にアクティブなスコープであり、そのため対処が簡単です - コンテキスト伝播タスクは、CDI コンテナーが動作している限り、これらのBeanで動作します。しかし、 `@RequestScoped` Beanは話が違います。手動で有効化/無効化すると、HTTP リクエストや他のリクエスト/タスクにバインドされます。この場合、元のスレッドがリクエストの終了に到達すると、コンテキストを終了し、それらのBeanで `@PreDestroy` を呼び出し、コンテキストからクリアされることに注意しなければなりません。その後、他のスレッドからこれらのBeanにアクセスしようとすると、予期せぬ動作をすることがあります。したがって、コンテキストの伝播を介してリクエストスコープされたBeanを使用するすべてのタスクは、元のリクエストの持続時間を超えないような方法で実行されることを確認することが推奨されます。"

#. type: delimited block =
#: upstream/_guides/context-propagation.adoc:193
msgid "Due to the above described behavior, it is recommended to avoid using `@PreDestroy` on `@RequestScoped` beans when working with Context Propagation in CDI."
msgstr "上記で説明した動作のため、CDI で Context Propagation を使用する際には `@PreDestroy` を `@RequestScoped` Beanで使用しないことをお勧めします。"
