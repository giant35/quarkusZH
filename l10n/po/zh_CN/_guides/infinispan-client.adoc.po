# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-07-10 05:19+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/infinispan-client.adoc:6
#, no-wrap
msgid "Quarkus - Infinispan Client"
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:12
msgid "Infinispan is an in memory data grid that allows running in a server outside of application processes. This extension provides functionality to allow the client that can connect to said server when running in Quarkus."
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:15
msgid "Check out the https://infinispan.org/documentation[Infinispan documentation] to find out more about the Infinispan project, in particular the https://infinispan.org/docs/stable/titles/hotrod_java/hotrod_java.html[Hot Rod Java client guide]."
msgstr ""

#. type: Title ==
#: upstream/_guides/infinispan-client.adoc:16
#, no-wrap
msgid "Configuration"
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:20
msgid "Once you have your Quarkus project configured you can add the `infinispan-client` extension to your project by running the following from the command line in your project base directory."
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:24
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"infinispan-client\"\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:27
msgid "This will add the following to your pom.xml"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:34
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-infinispan-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:39
msgid "The Infinispan client is configurable in the `application.properties` file that can be provided in the `src/main/resources` directory. These are the properties that can be configured in this file:"
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:45
msgid "It is also possible to configure a `hotrod-client.properties` as described in the Infinispan user guide. Note that the `hotrod-client.properties` values overwrite any matching property from the other configuration values (eg. near cache).  This properties file is build time only and if it is changed, requires a full rebuild."
msgstr ""

#. type: Title ==
#: upstream/_guides/infinispan-client.adoc:46
#, no-wrap
msgid "Serialization (Key Value types support)"
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:51
msgid "By default the client will support keys and values of the following types: byte[], primitive wrappers (eg. Integer, Long, Double etc.), String, Date and Instant. User types require some additional steps that are detailed here. Let's say we have the following user classes:"
msgstr ""

#. type: Block title
#: upstream/_guides/infinispan-client.adoc:52
#: upstream/_guides/infinispan-client.adoc:98
#, no-wrap
msgid "Author.java"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:58
#, no-wrap
msgid ""
"public class Author {\n"
"   private final String name;\n"
"   private final String surname;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:65
#, no-wrap
msgid ""
"   public Author(String name, String surname) {\n"
"      this.name = Objects.requireNonNull(name);\n"
"      this.surname = Objects.requireNonNull(surname);\n"
"   }\n"
"   // Getter/Setter/equals/hashCode/toString omitted\n"
"}\n"
msgstr ""

#. type: Block title
#: upstream/_guides/infinispan-client.adoc:67
#: upstream/_guides/infinispan-client.adoc:118
#, no-wrap
msgid "Book.java"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:76
#, no-wrap
msgid ""
"public class Book {\n"
"   private final String title;\n"
"   private final String description;\n"
"   private final int publicationYear;\n"
"   private final Set<Author> authors;\n"
"   private final BigDecimal price;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:86
#, no-wrap
msgid ""
"   public Book(String title, String description, int publicationYear, Set<Author> authors, BigDecimal price) {\n"
"      this.title = Objects.requireNonNull(title);\n"
"      this.description = Objects.requireNonNull(description);\n"
"      this.publicationYear = publicationYear;\n"
"      this.authors = Objects.requireNonNull(authors);\n"
"      this.price = price;\n"
"   }\n"
"   // Getter/Setter/equals/hashCode/toString omitted\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:89
msgid "Serialization of user types uses a library based on protobuf, called Protostream."
msgstr ""

#. type: Title ===
#: upstream/_guides/infinispan-client.adoc:90
#, no-wrap
msgid "Annotation based Serialization"
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:95
msgid "This can be done automatically by adding protostream annotations to your user classes.  In addition a single Initializer annotated interface is required which controls how the supporting classes are generated."
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:97
msgid "Here is an example of how the preceding classes should be changed:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:106
#, no-wrap
msgid ""
"    @ProtoFactory\n"
"    public Author(String name, String surname) {\n"
"        this.name = Objects.requireNonNull(name);\n"
"        this.surname = Objects.requireNonNull(surname);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:111
#, no-wrap
msgid ""
"    @ProtoField(number = 1)\n"
"    public String getName() {\n"
"        return name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:116
#, no-wrap
msgid ""
"    @ProtoField(number = 2)\n"
"    public String getSurname() {\n"
"        return surname;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:128
#, no-wrap
msgid ""
"    @ProtoFactory\n"
"    public Book(String title, String description, int publicationYear, Set<Author> authors) {\n"
"        this.title = Objects.requireNonNull(title);\n"
"        this.description = Objects.requireNonNull(description);\n"
"        this.publicationYear = publicationYear;\n"
"        this.authors = Objects.requireNonNull(authors);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:133
#, no-wrap
msgid ""
"    @ProtoField(number = 1)\n"
"    public String getTitle() {\n"
"        return title;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:138
#, no-wrap
msgid ""
"    @ProtoField(number = 2)\n"
"    public String getDescription() {\n"
"        return description;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:143
#, no-wrap
msgid ""
"    @ProtoField(number = 3, defaultValue = \"-1\")\n"
"    public int getPublicationYear() {\n"
"        return publicationYear;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:148
#, no-wrap
msgid ""
"    @ProtoField(number = 4)\n"
"    public Set<Author> getAuthors() {\n"
"        return authors;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:152
msgid "If your classes have only mutable fields, then the `ProtoFactory` annotation is not required, assuming your class has a no arg constructor."
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:155
msgid "Then all that is required is a very simple `SerializationContextInitializer` interface with an annotation on it to specify configuration settings"
msgstr ""

#. type: Block title
#: upstream/_guides/infinispan-client.adoc:156
#, no-wrap
msgid "BookContextInitializer.java"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:162
#, no-wrap
msgid ""
"import org.infinispan.protostream.SerializationContextInitializer;\n"
"import org.infinispan.protostream.annotations.AutoProtoSchemaBuilder;\n"
"import org.infinispan.protostream.types.java.math.BigDecimalAdapter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:166
#, no-wrap
msgid ""
"@AutoProtoSchemaBuilder(includeClasses = { Book.class, Author.class, BigDecimalAdapter.class }, schemaPackageName = \"book_sample\")\n"
"interface BookContextInitializer extends SerializationContextInitializer {\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:171
msgid "So in this case we will automatically generate the marshaller and schemas for the included classes and place them in the schema package automatically. The package does not have to be provided, but if you utilize querying, you must know the generated package."
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:173
msgid "In Quarkus the `schemaFileName` and `schemaFilePath` attributes should NOT be set on the `AutoProtoSchemaBuilder` annotation, setting either will cause native runtime to error."
msgstr ""

#. type: Title ===
#: upstream/_guides/infinispan-client.adoc:174
#, no-wrap
msgid "User written serialization"
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:180
msgid "The previous method is suggested for any case when the user can annotate their classes.  Unfortunately the user may not be able to annotate all classes they will put in the cache. In this case you must define your schema and create your own Marshaller(s)  yourself."
msgstr ""

#. type: Labeled list
#: upstream/_guides/infinispan-client.adoc:181
#, no-wrap
msgid "Protobuf schema"
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:182
msgid "You can supply a protobuf schema through either one of two ways."
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:183
msgid "Proto File"
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:186
msgid "+ You can put the `.proto` file in the `META-INF` directory of the project. These files will automatically be picked up at initialization time."
msgstr ""

#. type: Block title
#: upstream/_guides/infinispan-client.adoc:187
#, no-wrap
msgid "library.proto"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:190
#, no-wrap
msgid "package book_sample;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:198
#, no-wrap
msgid ""
"message Book {\n"
"  required string title = 1;\n"
"  required string description = 2;\n"
"  required int32 publicationYear = 3; // no native Date type available in Protobuf\n"
"  repeated Author authors = 4;\n"
"  requited double price = 5; // no native BigDecimal type available in Protobuf\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:203
#, no-wrap
msgid ""
"message Author {\n"
"  required string name = 1;\n"
"  required string surname = 2;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:205
msgid "In Code"
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:208
msgid "+ Or you can define the proto schema directly in user code by defining a produced bean of type `org.infinispan.protostream.FileDescriptorSource`."
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:230
#, no-wrap
msgid ""
"   @Produces\n"
"   FileDescriptorSource bookProtoDefinition() {\n"
"      return FileDescriptorSource.fromString(\"library.proto\", \"package book_sample;\\n\" +\n"
"            \"\\n\" +\n"
"            \"message Book {\\n\" +\n"
"            \"  required string title = 1;\\n\" +\n"
"            \"  required string description = 2;\\n\" +\n"
"            \"  required int32 publicationYear = 3; // no native Date type available in Protobuf\\n\" +\n"
"            \"\\n\" +\n"
"            \"  repeated Author authors = 4;\\n\" +\n"
"            \"\\n\" +\n"
"            \"  required double price = 5; // no native BigDecimal type available in Protobuf\\n\" +\n"
"            \"}\\n\" +\n"
"            \"\\n\" +\n"
"            \"message Author {\\n\" +\n"
"            \"  required string name = 1;\\n\" +\n"
"            \"  required string surname = 2;\\n\" +\n"
"            \"}\");\n"
"   }\n"
msgstr ""

#. type: Labeled list
#: upstream/_guides/infinispan-client.adoc:231
#, no-wrap
msgid "User Marshaller"
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:235
msgid "The last thing to do is to provide a `org.infinispan.protostream.MessageMarshaller` implementation for each user class defined in the proto schema. This class is then provided via `@Produces` in a similar fashion to the code based proto schema definition above."
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:237
msgid "Here is the Marshaller class for our Author & Book classes."
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:239
msgid "The type name must match the `<protobuf package>.<protobuf message>` exactly!"
msgstr ""

#. type: Block title
#: upstream/_guides/infinispan-client.adoc:240
#, no-wrap
msgid "AuthorMarshaller.java"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:244
#, no-wrap
msgid "public class AuthorMarshaller implements MessageMarshaller<Author> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:249
#, no-wrap
msgid ""
"   @Override\n"
"   public String getTypeName() {\n"
"      return \"book_sample.Author\";\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:254
#, no-wrap
msgid ""
"   @Override\n"
"   public Class<? extends Author> getJavaClass() {\n"
"      return Author.class;\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:260
#, no-wrap
msgid ""
"   @Override\n"
"   public void writeTo(ProtoStreamWriter writer, Author author) throws IOException {\n"
"      writer.writeString(\"name\", author.getName());\n"
"      writer.writeString(\"surname\", author.getSurname());\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:268
#, no-wrap
msgid ""
"   @Override\n"
"   public Author readFrom(ProtoStreamReader reader) throws IOException {\n"
"      String name = reader.readString(\"name\");\n"
"      String surname = reader.readString(\"surname\");\n"
"      return new Author(name, surname);\n"
"   }\n"
"}\n"
msgstr ""

#. type: Block title
#: upstream/_guides/infinispan-client.adoc:270
#, no-wrap
msgid "BookMarshaller.java"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:274
#, no-wrap
msgid "public class BookMarshaller implements MessageMarshaller<Book> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:279
#, no-wrap
msgid ""
"   @Override\n"
"   public String getTypeName() {\n"
"      return \"book_sample.Book\";\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:284
#, no-wrap
msgid ""
"   @Override\n"
"   public Class<? extends Book> getJavaClass() {\n"
"      return Book.class;\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:293
#, no-wrap
msgid ""
"   @Override\n"
"   public void writeTo(ProtoStreamWriter writer, Book book) throws IOException {\n"
"      writer.writeString(\"title\", book.getTitle());\n"
"      writer.writeString(\"description\", book.getDescription());\n"
"      writer.writeInt(\"publicationYear\", book.getPublicationYear());\n"
"      writer.writeCollection(\"authors\", book.getAuthors(), Author.class);\n"
"      writer.writeDouble(\"price\", book.getPrice().doubleValue());\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:304
#, no-wrap
msgid ""
"   @Override\n"
"   public Book readFrom(ProtoStreamReader reader) throws IOException {\n"
"      String title = reader.readString(\"title\");\n"
"      String description = reader.readString(\"description\");\n"
"      int publicationYear = reader.readInt(\"publicationYear\");\n"
"      Set<Author> authors = reader.readCollection(\"authors\", new HashSet<>(), Author.class);\n"
"      BigDecimal price = BigDecimal.valueOf(reader.readDouble(\"price\"));\n"
"      return new Book(title, description, publicationYear, authors, price);\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:307
msgid "And you pass the marshaller by defining the following:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:314
#, no-wrap
msgid ""
"   @Produces\n"
"   MessageMarshaller authorMarshaller() {\n"
"      return new AuthorMarshaller();\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:319
#, no-wrap
msgid ""
"   @Produces\n"
"   MessageMarshaller bookMarshaller() {\n"
"      return new BookMarshaller();\n"
"   }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:321
msgid "The above produced Marshaller method MUST return `MessageMarshaller` without types or else it will not be found."
msgstr ""

#. type: Title ==
#: upstream/_guides/infinispan-client.adoc:322
#, no-wrap
msgid "Dependency Injection"
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:328
msgid "As you saw above we support the user injecting Marshaller configuration. You can do the inverse with the Infinispan client extension providing injection for `RemoteCacheManager` and `RemoteCache` objects.  There is one global `RemoteCacheManager` that takes all of the configuration parameters setup in the above sections."
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:331
msgid "It is very simple to inject these components. All you need to do is to add the Inject annotation to the field, constructor or method. In the below code we utilize field and constructor injection."
msgstr ""

#. type: Block title
#: upstream/_guides/infinispan-client.adoc:332
#, no-wrap
msgid "SomeClass.java"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:338
#, no-wrap
msgid ""
"    @Inject SomeClass(RemoteCacheManager remoteCacheManager) {\n"
"       this.remoteCacheManager = remoteCacheManager;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:341
#, no-wrap
msgid ""
"    @Inject @Remote(\"myCache\")\n"
"    RemoteCache<String, Book> cache;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:343
#, no-wrap
msgid "    RemoteCacheManager remoteCacheManager;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:348
msgid "If you notice the `RemoteCache` declaration has an additional optional annotation named `Remote`.  This is a qualifier annotation allowing you to specify which named cache that will be injected. This annotation is not required and if it is not supplied, the default cache will be injected."
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:350
msgid "Other types may be supported for injection, please see other sections for more information"
msgstr ""

#. type: Title ==
#: upstream/_guides/infinispan-client.adoc:351
#, no-wrap
msgid "Querying"
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:356
msgid "The Infinispan client supports both indexed and non indexed querying as long as the `ProtoStreamMarshaller` is configured above. This allows the user to query based on the properties of the proto schema."
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:361
msgid "Query builds upon the proto definitions you can configure when setting up the `ProtoStreamMarshaller`.  Either method of Serialization above will automatically register the schema with the server at startup, meaning that you will automatically gain the ability to query objects stored in the remote Infinispan Server."
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:363
msgid "You can read more about https://infinispan.org/docs/stable/titles/developing/developing.html#creating_ickle_queries-querying[querying] in the Infinispan documentation."
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:366
msgid "You can use either the Query DSL or the Ickle Query language with the Quarkus Infinispan client extension."
msgstr ""

#. type: Title ==
#: upstream/_guides/infinispan-client.adoc:367
#, no-wrap
msgid "Counters"
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:371
msgid "Infinispan also has a notion of counters and the Quarkus Infinispan client supports them out of the box."
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:375
msgid "The Quarkus Infinispan client extension allows for Dependency Injection of the `CounterManager` directly. All you need to do is annotate your field, constructor or method and you get it with no fuss. You can then use counters as you would normally."
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:380
#, no-wrap
msgid ""
"@Inject\n"
"CounterManager counterManager;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:383
msgid "You can read more about https://infinispan.org/docs/stable/titles/developing/developing.html#clustered_counters[clustered counters] in the Infinispan documentation."
msgstr ""

#. type: Title ==
#: upstream/_guides/infinispan-client.adoc:384
#, no-wrap
msgid "Near Caching"
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:390
msgid "Near caching is disabled by default, but you can enable it by setting the profile config property `quarkus.infinispan-client.near-cache-max-entries` to a value greater than 0. You can also configure a regular expression so that only a subset of caches have near caching applied through the `quarkus.infinispan-client.near-cache-name-pattern` attribute."
msgstr ""

#. type: Title ==
#: upstream/_guides/infinispan-client.adoc:391
#, no-wrap
msgid "Encryption"
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:394
msgid "Encryption at this point requires additional steps to get working."
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:397
msgid "The first step is to configure the `hotrod-client.properties` file to point to your truststore and/or keystore. This is further detailed https://infinispan.org/docs/stable/titles/hotrod_java/hotrod_java.html#hotrod_encryption[here]."
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:400
msgid "The Infinispan Client extension enables SSL by default. You can read more about this at link:native-and-ssl[Using SSL With Native Executables]."
msgstr ""

#. type: Title ==
#: upstream/_guides/infinispan-client.adoc:401
#, no-wrap
msgid "Authentication"
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:405
msgid "This chart illustrates what mechanisms have been verified to be working properly with the Quarkus Infinispan Client extension."
msgstr ""

#. type: Block title
#: upstream/_guides/infinispan-client.adoc:406
#, no-wrap
msgid "Mechanisms"
msgstr ""

#. type: Table
#: upstream/_guides/infinispan-client.adoc:408
#, no-wrap
msgid "Name"
msgstr ""

#. type: Table
#: upstream/_guides/infinispan-client.adoc:410
#, no-wrap
msgid "Verified"
msgstr ""

#. type: Table
#: upstream/_guides/infinispan-client.adoc:411
#, no-wrap
msgid "DIGEST-MD5"
msgstr ""

#. type: Table
#: upstream/_guides/infinispan-client.adoc:413
#: upstream/_guides/infinispan-client.adoc:416
#: upstream/_guides/infinispan-client.adoc:419
#, no-wrap
msgid "[green]*Y*"
msgstr ""

#. type: Table
#: upstream/_guides/infinispan-client.adoc:414
#, no-wrap
msgid "PLAIN"
msgstr ""

#. type: Table
#: upstream/_guides/infinispan-client.adoc:417
#, no-wrap
msgid "EXTERNAL"
msgstr ""

#. type: Table
#: upstream/_guides/infinispan-client.adoc:420
#, no-wrap
msgid "GSSAPI"
msgstr ""

#. type: Table
#: upstream/_guides/infinispan-client.adoc:422
#: upstream/_guides/infinispan-client.adoc:425
#, no-wrap
msgid "[red]*N*"
msgstr ""

#. type: Table
#: upstream/_guides/infinispan-client.adoc:423
#, no-wrap
msgid "Custom"
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:429
msgid "The guide for configuring these can be found https://infinispan.org/docs/stable/titles/hotrod_java/hotrod_java.html#hotrod_authentication[here].  However you need to configure these through the `hotrod-client.properties` file if using Dependency Injection."
msgstr ""

#. type: Title ==
#: upstream/_guides/infinispan-client.adoc:430
#, no-wrap
msgid "Additional Features"
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:434
msgid "The Infinispan Client has additional features that were not mentioned here. This means this feature was not tested in a Quarkus environment and they may or may not work. Please let us know if you need these added!"
msgstr ""
