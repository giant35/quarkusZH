# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-07-10 05:20+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/container-image.adoc:6
#, no-wrap
msgid "Quarkus - Container Images"
msgstr ""

#. type: Plain text
#: upstream/_guides/container-image.adoc:11
msgid "Quarkus provides extensions for building (and pushing) container images. Currently it supports:"
msgstr "Quarkus は、コンテナーイメージを構築 (およびプッシュ) するためのエクステンションを提供しています。現在は以下をサポートしています。"

#. type: Plain text
#: upstream/_guides/container-image.adoc:13
msgid "<<#jib,Jib>>"
msgstr "<<#jib,Jib>>"

#. type: Plain text
#: upstream/_guides/container-image.adoc:14
msgid "<<#docker,Docker>>"
msgstr "<<#docker,Docker>>"

#. type: Plain text
#: upstream/_guides/container-image.adoc:15
msgid "<<#s2i,S2I>>"
msgstr "<<#s2i,S2I>>"

#. type: Title ==
#: upstream/_guides/container-image.adoc:16
#, no-wrap
msgid "Container Image extensions"
msgstr "コンテナーイメージのエクステンション"

#. type: Title ===
#: upstream/_guides/container-image.adoc:19
#, no-wrap
msgid "Jib"
msgstr "Jib"

#. type: Plain text
#: upstream/_guides/container-image.adoc:25
msgid "The extension `quarkus-container-image-jib` is powered by https://github.com/GoogleContainerTools/jib[Jib] for performing container image builds.  The major benefit of using Jib with Quarkus is that all the dependencies (everything found under `target/lib`) are cached in a different layer than the actual application making rebuilds really fast and small (when it comes to pushing).  Another important benefit of using this extension is that it provides the ability to create a container image without having to have any dedicated client side tooling (like Docker) or running daemon processes (like the Docker daemon)  when all that is needed is the ability to push to a container image registry."
msgstr "エクステンション `quarkus-container-image-jib` は、コンテナーイメージのビルドを実行するために link:https://github.com/GoogleContainerTools/jib[Jib] を使用しています。Jib を Quarkus で使用する主な利点は、すべての依存関係 (`target/lib` の下にあるすべてのもの) が実際のアプリケーションとは別のレイヤーにキャッシュされるため、リビルドが非常に高速かつ小規模に (プッシュする場合) 行えることです。このエクステンションを使用するもう 1 つの重要な利点は、コンテナーイメージレジストリーにプッシュする機能さえあれば、専用のクライアントサイドツール (Docker など) やデーモンプロセス (Docker デーモンなど) を実行しなくてもコンテナーイーメージを作成できることです。"

#. type: Plain text
#: upstream/_guides/container-image.adoc:27
msgid "To use this feature, add the following extension to your project:"
msgstr "この機能を使用するには、以下のエクステンションをプロジェクトに追加します。"

#. type: delimited block -
#: upstream/_guides/container-image.adoc:31
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"container-image-jib\"\n"
msgstr "./mvnw quarkus:add-extension -Dextensions=\"container-image-jib\"\n"

#. type: Plain text
#: upstream/_guides/container-image.adoc:36
msgid "In situations where all that is needed to build a container image and no push to a registry is necessary (essentially by having set `quarkus.container-image.build=true` and left `quarkus.container-image.push` unset - it defaults to `false`), then this extension creates a container image and registers it with the Docker daemon. This means that although Docker isn't used to build the image, it is nevertheless necessary. Also note that using this mode, the built container image *will* show up when executing `docker images`."
msgstr "必要なことがコンテナーイメージを構築するだけで、レジストリーへのプッシュが不要な場合 (基本的には `quarkus.container-image.build=true` を設定して `quarkus.container-image.push` のままにしておくことで、デフォルトは `false` になります)、このエクステンションはコンテナーイメージを作成し、Docker デーモンに登録します。これは、Docker がイメージのビルドには使われなくても必要であることを意味します。また、このモードを使用すると、`docker images` を実行するとコンテナーイメージが表示されます。"

#. type: Title ====
#: upstream/_guides/container-image.adoc:37
#, no-wrap
msgid "Including extra files"
msgstr "追加ファイルの追加"

#. type: Plain text
#: upstream/_guides/container-image.adoc:43
msgid "There are cases when additional files (other than ones produced by the Quarkus build) need to be added to a container image.  To support these cases, Quarkus copies any file under `src/main/jib` into the built container image (which is essentially the same idea that the Jib Maven and Gradle plugins support).  For example, the presence of `src/main/jib/foo/bar` would result in `/foo/bar` being added into the container filesystem."
msgstr "コンテナーイメージに追加のファイル(Quarkus のビルドで作成されたもの以外)を追加する必要がある場合があります。このような場合に対応するため、Quarkus は、`src/main/jib` 以下のファイルをすべてビルドされたコンテナーイメージにコピーします (これは、Jib Maven や Gradle プラグインがサポートしているのと基本的に同じ考え方です)。例えば、`src/main/jib/foo/bar` が存在すると、`/foo/bar` がコンテナファイルシステムに追加されます。"

#. type: Title ====
#: upstream/_guides/container-image.adoc:44
#, no-wrap
msgid "JVM Debugging"
msgstr ""

#. type: Plain text
#: upstream/_guides/container-image.adoc:49
msgid "There are cases where the built container image may need to have Java debugging conditionally enabled at runtime.  There are a few ways to achieve this, but they all rely on the fact that in the `container-image-jib` you can control the entrypoint to use for the container image.  By default, the container-image is created with a minimal `java -jar ...` style entrypoint, but that can be changed using the `quarkus.jib.jvm-entrypoint` configuration option."
msgstr ""

#. type: Plain text
#: upstream/_guides/container-image.adoc:52
msgid "If the base image has not been changed (and therefore `fabric8/java-alpine-openjdk11-jre` is used) then you leverage that image's built-in `run-java.sh` script (more details about it can be found link:https://hub.docker.com/r/fabric8/java-alpine-openjdk11-jre#startup-script-run-javash[here]])  by adding the following entries to `application.properties`:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/container-image.adoc:57
#, no-wrap
msgid ""
"quarkus.jib.jvm-entrypoint=/deployments/run-java.sh #this is the location of the script in the container image\n"
"quarkus.jib.environment-variables.\"JAVA_APP_DIR\"=/work #this is needed so the script knows where the Quarkus jar is\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/container-image.adoc:60
msgid "When running the container, the `JAVA_DEBUG` environment variable can then be used to control whether or not the application will be listening on the debug port."
msgstr ""

#. type: Plain text
#: upstream/_guides/container-image.adoc:62
msgid "An example launch command is:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/container-image.adoc:66
#, no-wrap
msgid "docker run --rm -p 8080:8080 -p 5005:5005 -e JAVA_DEBUG=true quarkus/getting-started:1.0.0-SNAPSHOT\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/container-image.adoc:69
msgid "If you are using a different base image or would like to use a custom launch script, then see the previous section on how to add the script to the container image and set the `quarkus.jib.jvm-entrypoint` in `application.properties` to the location of that script."
msgstr ""

#. type: Title ===
#: upstream/_guides/container-image.adoc:71
#, no-wrap
msgid "Docker"
msgstr "Docker"

#. type: Plain text
#: upstream/_guides/container-image.adoc:74
msgid "The extension `quarkus-container-image-docker` is using the Docker binary and the generated Dockerfiles under `src/main/docker` in order to perform Docker builds."
msgstr "エクステンション `quarkus-container-image-docker` は、Docker ビルドを実行するために `src/main/docker` 下で Docker バイナリーと生成された Dockerfiles を使用しています。"

#. type: Plain text
#: upstream/_guides/container-image.adoc:76
#: upstream/_guides/container-image.adoc:91
msgid "To use this feature, add the following extension to your project."
msgstr "この機能を使用するには、以下のエクステンションをプロジェクトに追加します。"

#. type: delimited block -
#: upstream/_guides/container-image.adoc:80
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"container-image-docker\"\n"
msgstr "./mvnw quarkus:add-extension -Dextensions=\"container-image-docker\"\n"

#. type: Title ===
#: upstream/_guides/container-image.adoc:83
#, no-wrap
msgid "S2I"
msgstr ""

#. type: Plain text
#: upstream/_guides/container-image.adoc:87
msgid "The extension `quarkus-container-image-s2i` is using S2I binary builds in order to perform container builds inside the OpenShift cluster.  The idea behind the binary build is that you just upload the artifact and its dependencies to the cluster and during the build they will be merged to a builder image (defaults to `fabric8/s2i-java`)."
msgstr "エクステンション `quarkus-container-image-s2i` は、OpenShift クラスター内でコンテナービルドを実行するために S2I バイナリービルドを使用しています。バイナリービルドの考え方は、アーティファクトとその依存関係をクラスタにアップロードするだけで、ビルド中にそれらがビルダーイメージにマージされます (デフォルトは `fabric8/s2i-java`)。"

#. type: Plain text
#: upstream/_guides/container-image.adoc:89
msgid "The benefit of this approach, is that it can be combined with OpenShift's `DeploymentConfig` that makes it easy to roll out changes to the cluster."
msgstr "このアプローチの利点は、クラスターへの変更を簡単にロールアウトできる OpenShift の `DeploymentConfig` と組み合わせることができることです。"

#. type: delimited block -
#: upstream/_guides/container-image.adoc:95
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"container-image-s2i\"\n"
msgstr "./mvnw quarkus:add-extension -Dextensions=\"container-image-s2i\"\n"

#. type: Plain text
#: upstream/_guides/container-image.adoc:99
msgid "S2I builds require creating a `BuildConfig` and two `ImageStream` resources, one for the builder image and one for the output image.  The creation of such objects is being taken care of by the Quarkus Kubernetes extension."
msgstr "S2I のビルドでは、`BuildConfig` と 2 つの `ImageStream` リソースを作成する必要があります。このようなオブジェクトの作成は、Quarkus Kubernetes エクステンションによって行われます。"

#. type: Title ==
#: upstream/_guides/container-image.adoc:100
#, no-wrap
msgid "Building"
msgstr "ビルド"

#. type: Plain text
#: upstream/_guides/container-image.adoc:103
msgid "To build a container image for your project, `quarkus.container-image.build=true` needs to be set using any of the ways that Quarkus supports."
msgstr "プロジェクト用のコンテナーイメージを作成するには、Quarkus がサポートしている方法のいずれかで、 `quarkus.container-image.build=true` を設定する必要があります。"

#. type: delimited block -
#: upstream/_guides/container-image.adoc:107
#, no-wrap
msgid "./mvnw clean package -Dquarkus.container-image.build=true\n"
msgstr "./mvnw clean package -Dquarkus.container-image.build=true\n"

#. type: Plain text
#: upstream/_guides/container-image.adoc:110
msgid "If you ever want to build a native container image and already have an existing native image you can set `-Dquarkus.native.reuse-existing=true` and the native image build will not be re-run."
msgstr ""

#. type: Title ==
#: upstream/_guides/container-image.adoc:111
#, no-wrap
msgid "Pushing"
msgstr "プッシュ"

#. type: Plain text
#: upstream/_guides/container-image.adoc:114
msgid "To push a container image for your project, `quarkus.container-image.push=true` needs to be set using any of the ways that Quarkus supports."
msgstr "プロジェクトにコンテナーイメージをプッシュするには、Quarkus がサポートしている方法のいずれかで、`quarkus.container-image.push=true` を設定する必要があります。"

#. type: delimited block -
#: upstream/_guides/container-image.adoc:118
#, no-wrap
msgid "./mvnw clean package -Dquarkus.container-image.push=true\n"
msgstr "./mvnw clean package -Dquarkus.container-image.push=true\n"

#. type: Plain text
#: upstream/_guides/container-image.adoc:121
msgid "If no registry is set (using `quarkus.container-image.registry`) then `docker.io` will be used as the default."
msgstr "レジストリーが設定されていない場合 (`quarkus.container-image.registry` を使用) は、 `docker.io` がデフォルトとして使用されます。"

#. type: Title ==
#: upstream/_guides/container-image.adoc:122
#, no-wrap
msgid "Selecting among multiple extensions"
msgstr "複数のエクステンションから選択する"

#. type: Plain text
#: upstream/_guides/container-image.adoc:125
msgid "It does not make sense to use multiple extension as part of the same build. When multiple container image extensions are present, an error will be raised to inform the user. The user can either remove the uneeded extensions or select one using `application.properties`."
msgstr "複数のエクステンションを同じビルドの一部として使用するのは意味がありません。複数のコンテナー-イメージエクステンションが存在する場合は、エラーが発生してユーザーに通知されます。ユーザーは不要なエクステンション削除するか、`application.properties` を使って選択することができます。"

#. type: Plain text
#: upstream/_guides/container-image.adoc:127
msgid "For example, if both `container-image-docker` and `container-image-s2i` are present and the user needs to use `container-image-docker`:"
msgstr "例えば、`container-image-docker` と `container-image-s2i` の両方が存在し、ユーザーが `container-image-docker` を使用する場合:"

#. type: delimited block -
#: upstream/_guides/container-image.adoc:131
#, no-wrap
msgid "quarkus.container-image.builder=docker\n"
msgstr "quarkus.container-image.builder=docker\n"

#. type: Title ==
#: upstream/_guides/container-image.adoc:133
#, no-wrap
msgid "Customizing"
msgstr "カスタマイズ"

#. type: Plain text
#: upstream/_guides/container-image.adoc:136
msgid "The following properties can be used to customize the container image build process."
msgstr "以下のプロパティーを使用して、コンテナーイメージのビルドプロセスをカスタマイズすることができます。"

#. type: Title ===
#: upstream/_guides/container-image.adoc:137
#, no-wrap
msgid "Container Image Options"
msgstr "コンテナーイメージオプション"

#. type: Title ====
#: upstream/_guides/container-image.adoc:141
#, no-wrap
msgid "Using CI Environments"
msgstr ""

#. type: Plain text
#: upstream/_guides/container-image.adoc:145
msgid "Various CI environments provide a ready to use container-image registry which can be combined with the container-image Quarkus extensions in order to effortlessly create and push a Quarkus application to said registry."
msgstr "さまざまな CI 環境では、Quarkus アプリケーションを作成してレジストリーをプッシュするために、コンテナーイメージ Quarkus エクステンションと組み合わせることで、すぐに使えるコンテナーイメージレジストリ-を利用できます。"

#. type: Plain text
#: upstream/_guides/container-image.adoc:149
msgid "For example, https://gitlab.com/[GitLab] provides such a registry and in the provided CI environment, makes available the `CI_REGISTRY_IMAGE` environment variable (see GitLab's https://docs.gitlab.com/ee/ci/variables/[documentation]) for more information), which can be used in Quarkus like so:"
msgstr "例えば、 link:https://gitlab.com/[GitLab] はこのようなレジストリーを提供しており、提供されている CI 環境では、環境変数 `CI_REGISTRY_IMAGE` (詳しくは GitLab の link:https://docs.gitlab.com/ee/ci/variables/[ドキュメント] を参照) を利用できるようになっています。なお、Quarkus ではこのように利用できます。"

#. type: delimited block -
#: upstream/_guides/container-image.adoc:153
#, no-wrap
msgid "quarkus.container-image.image=${CI_REGISTRY_IMAGE}\n"
msgstr "quarkus.container-image.image=${CI_REGISTRY_IMAGE}\n"

#. type: Plain text
#: upstream/_guides/container-image.adoc:156
msgid "See link:config.adoc#combine-property-env-var[this] for more information on how to combine properties with environment variables."
msgstr "環境変数とプロパティーを組み合わせる方法については link:config.adoc#combine-property-env-var[こちら] を参照してください。"

#. type: Title ===
#: upstream/_guides/container-image.adoc:157
#, no-wrap
msgid "Jib Options"
msgstr ""

#. type: Plain text
#: upstream/_guides/container-image.adoc:160
msgid "In addition to the generic container image options, the `container-image-jib` also provides the following options:"
msgstr "一般的なコンテナーイメージのオプションに加えて、`container-image-jib` では以下のオプションも用意されています。"

#. type: Title ===
#: upstream/_guides/container-image.adoc:163
#, no-wrap
msgid "Docker Options"
msgstr ""

#. type: Plain text
#: upstream/_guides/container-image.adoc:166
msgid "In addition to the generic container image options, the `container-image-docker` also provides the following options:"
msgstr "一般的なコンテナーイメージのオプションに加えて、`container-image-docker` では以下のオプションも用意されています。"

#. type: Title ===
#: upstream/_guides/container-image.adoc:169
#, no-wrap
msgid "S2I  Options"
msgstr "S2I オプション"

#. type: Plain text
#: upstream/_guides/container-image.adoc:172
msgid "In addition to the generic container image options, the `container-image-s2i` also provides the following options:"
msgstr "一般的なコンテナーイメージのオプションに加えて、`container-image-s2i` では以下のオプションも用意されています。"
