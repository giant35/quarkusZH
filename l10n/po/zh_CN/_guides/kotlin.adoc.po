# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-07-10 05:20+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/kotlin.adoc:6
#, no-wrap
msgid "Quarkus - Using Kotlin"
msgstr ""

#. type: Plain text
#: upstream/_guides/kotlin.adoc:12
msgid "https://kotlinlang.org/[Kotlin] is a very popular programming language that targets the JVM (amongst other environments). Kotlin has experienced a surge in popularity the last few years making it the most popular JVM language, except for Java of course."
msgstr "link:https://kotlinlang.org/[Kotlin] は、JVMをターゲットにした(他の環境を含めても)非常に人気のあるプログラミング言語です。Kotlinはここ数年で人気が急上昇し、Javaを除いて最も人気のあるJVM言語となっています。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:14
msgid "Quarkus provides first class support for using Kotlin as will be explained in this guide."
msgstr "このガイドで説明するように、QuarkusはKotlinを使用するためのファーストクラスのサポートを提供しています。"

#. type: Title ==
#: upstream/_guides/kotlin.adoc:17
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:20
msgid "To complete this guide, you need:"
msgstr "このガイドを完成させるには、以下が必要です:"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:22
msgid "less than 10 minutes"
msgstr ""

#. type: Plain text
#: upstream/_guides/kotlin.adoc:23
msgid "an IDE"
msgstr "IDE"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:24
msgid "JDK 11+ installed with `JAVA_HOME` configured appropriately"
msgstr ""

#. type: Plain text
#: upstream/_guides/kotlin.adoc:25
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:27
msgid "NB: For Gradle project setup please see below, and for further reference consult the guide in the link:gradle-tooling[Gradle setup page]."
msgstr "注: link:gradle-tooling[Gradle] プロジェクトのセットアップについては以下を参照してください。"

#. type: Title ==
#: upstream/_guides/kotlin.adoc:28
#, no-wrap
msgid "Creating the Maven project"
msgstr ""

#. type: Plain text
#: upstream/_guides/kotlin.adoc:31
msgid "First, we need a new Kotlin project. This can be done using the following command:"
msgstr "まず、新しいKotlinプロジェクトが必要です。これは以下のコマンドで行うことができます。"

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:41
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=rest-kotlin-quickstart \\\n"
"    -DclassName=\"org.acme.rest.GreetingResource\" \\\n"
"    -Dpath=\"/greeting\" \\\n"
"    -Dextensions=\"resteasy,kotlin,resteasy-jackson\"\n"
"cd rest-kotlin-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kotlin.adoc:46
msgid "When adding `kotlin` to the extensions list, the Maven plugin will generate a project that is properly configured to work with Kotlin. Furthermore the `org.acme.rest.GreetingResource` class is implemented as Kotlin source code (as is the case with the generated tests).  The addition of `resteasy-jackson` in the extension list results in importing the RESTEasy/JAX-RS and Jackson extensions."
msgstr "`kotlin` をエクステンションリストに追加すると、Maven プラグインは Kotlin で動作するように適切に設定されたプロジェクトを生成します。さらに、 `org.acme.rest.GreetingResource` クラスは Kotlin ソースコードとして実装されます (生成されたテストも同様です)。エクステンションリストに `resteasy-jackson` を追加すると、RESTEasy/JAX-RS と Jackson エクステンションがインポートされます。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:48
msgid "`GreetingResource.kt` looks like this:"
msgstr "`GreetingResource.kt` はこのようになります。"

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:52 upstream/_guides/kotlin.adoc:74
#, no-wrap
msgid "package org.acme.rest\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:57
#, no-wrap
msgid ""
"import javax.ws.rs.GET\n"
"import javax.ws.rs.Path\n"
"import javax.ws.rs.Produces\n"
"import javax.ws.rs.core.MediaType\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:60 upstream/_guides/kotlin.adoc:88
#, no-wrap
msgid ""
"@Path(\"/greeting\")\n"
"class GreetingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:65
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    fun hello() = \"hello\"\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/kotlin.adoc:67
#, no-wrap
msgid "Update code"
msgstr "コードの更新"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:70
msgid "In order to show a more practical example of Kotlin usage we will add a simple link:https://kotlinlang.org/docs/reference/data-classes.html[data class] called `Greeting.kt` like so:"
msgstr "Kotlin のより実用的な使用例を示すために、 `Greeting.kt` というシンプルな link:https://kotlinlang.org/docs/reference/data-classes.html[データクラス] を追加してみましょう。"

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:76
#, no-wrap
msgid "data class Greeting(val message: String = \"\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kotlin.adoc:79
msgid "We also update the `GreetingResource.kt` like so:"
msgstr "`GreetingResource.kt` もこのように更新します。"

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:85
#, no-wrap
msgid ""
"import javax.ws.rs.GET\n"
"import javax.ws.rs.Path\n"
"import javax.ws.rs.core.MediaType\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:92
#, no-wrap
msgid ""
"    @GET\n"
"    fun hello() = Greeting(\"hello\")\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kotlin.adoc:95
msgid "With these changes in place the `/greeting` endpoint will reply with a JSON object instead of a simple String."
msgstr "これらの変更により、 `/greeting` エンドポイントは単純な String の代わりに JSON オブジェクトを応答します。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:97
msgid "To make the test pass, we also need to update `GreetingResourceTest.kt` like so:"
msgstr "テストをパスさせるためには、 `GreetingResourceTest.kt` に以下のような更新も必要です。"

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:102
#, no-wrap
msgid ""
"@QuarkusTest\n"
"class GreetingResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:111
#, no-wrap
msgid ""
"    @Test\n"
"    fun testHelloEndpoint() {\n"
"        given()\n"
"          .`when`().get(\"/greeting\")\n"
"          .then()\n"
"             .statusCode(200)\n"
"             .body(\"message\", equalTo(\"hello\"))\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:113 upstream/_guides/kotlin.adoc:419
#: upstream/_guides/kotlin.adoc:435
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/kotlin.adoc:115
#, no-wrap
msgid "Important Maven configuration points"
msgstr "重要なMavenの設定ポイント"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:118
msgid "The generated `pom.xml` contains the following modifications compared to its counterpart when Kotlin is not selected:"
msgstr "生成された `pom.xml` には、Kotlin が選択されていない場合と比較して、以下の修正が含まれています。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:120 upstream/_guides/kotlin.adoc:183
msgid "The `quarkus-kotlin` artifact is added to the dependencies. This artifact provides support for Kotlin in the live reload mode (more about this later on)"
msgstr "`quarkus-kotlin` アーティファクトが依存関係に追加されています。このアーティファクトはライブリロードモードでの Kotlin のサポートを提供します (これについては後ほど説明します)。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:121 upstream/_guides/kotlin.adoc:184
msgid "The `kotlin-stdlib-jdk8` is also added as a dependency."
msgstr "`kotlin-stdlib-jdk8` も依存関係として追加されています。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:122
msgid "Maven's `sourceDirectory` and `testSourceDirectory` build properties are configured to point to Kotlin sources (`src/main/kotlin` and `src/test/kotlin` respectively)"
msgstr "Maven の `sourceDirectory` と `testSourceDirectory` ビルドプロパティーは、Kotlin ソースを指すように設定されています (それぞれ `src/main/kotlin` と `src/test/kotlin` )。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:123
msgid "The `kotlin-maven-plugin` is configured as follows:"
msgstr "`kotlin-maven-plugin` は以下のように設定されています。"

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:148
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>kotlin-maven-plugin</artifactId>\n"
"    <groupId>org.jetbrains.kotlin</groupId>\n"
"    <version>${kotlin.version}</version>\n"
"    <executions>\n"
"        <execution>\n"
"            <id>compile</id>\n"
"            <goals>\n"
"                <goal>compile</goal>\n"
"            </goals>\n"
"        </execution>\n"
"        <execution>\n"
"            <id>test-compile</id>\n"
"            <goals>\n"
"                <goal>test-compile</goal>\n"
"            </goals>\n"
"        </execution>\n"
"    </executions>\n"
"    <configuration>\n"
"        <compilerPlugins>\n"
"            <plugin>all-open</plugin>\n"
"        </compilerPlugins>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:154
#, no-wrap
msgid ""
"        <pluginOptions>\n"
"            <!-- Each annotation is placed on its own line -->\n"
"            <option>all-open:annotation=javax.ws.rs.Path</option>\n"
"        </pluginOptions>\n"
"    </configuration>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:163
#, no-wrap
msgid ""
"    <dependencies>\n"
"        <dependency>\n"
"            <groupId>org.jetbrains.kotlin</groupId>\n"
"            <artifactId>kotlin-maven-allopen</artifactId>\n"
"            <version>${kotlin.version}</version>\n"
"        </dependency>\n"
"    </dependencies>\n"
"</plugin>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kotlin.adoc:167
msgid "The important thing to note is the use of the https://kotlinlang.org/docs/reference/compiler-plugins.html#all-open-compiler-plugin[all-open] Kotlin compiler plugin.  In order to understand why this plugin is needed, first we need to note that by default all the classes generated from the Kotlin compiler are marked as `final`."
msgstr "注意すべき重要なこととして、 link:https://kotlinlang.org/docs/reference/compiler-plugins.html#all-open-compiler-plugin[all-open] Kotlinコンパイラーのプラグインを使用していることです。なぜこのプラグインが必要なのかを理解するためには、まず、Kotlin コンパイラから生成されるクラスはデフォルトで `final` でマークされていることに注目してください。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:169
msgid "Having `final` classes however does not work well with various frameworks that need to create https://docs.oracle.com/javase/8/docs/technotes/guides/reflection/proxy.html[Dynamic Proxies]."
msgstr "しかし、 `final` クラスであることは、 link:https://docs.oracle.com/javase/8/docs/technotes/guides/reflection/proxy.html[ダイナミックプロキシー] を作成する必要がある様々なフレームワークではうまく機能しません。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:172
msgid "Thus, the `all-open` Kotlin compiler plugin allows us to configure the compiler to *not* mark as `final` classes that have certain annotations. In the snippet above, we have specified that classes annotated with `javax.ws.rs.Path` should not be `final`."
msgstr "このように、 `all-open` Kotlin コンパイラプラグインを使うと、特定のアノテーションを持つクラスを `final` としてマークし *ない* ようにコンパイラを設定することができます。上のスニペットでは、 `javax.ws.rs.Path` でアノテーションされたクラスを `final` ではないようにします。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:175
msgid "If your application contains classes annotated with `javax.enterprise.context.ApplicationScoped` for example, then `<option>all-open:annotation=javax.enterprise.context.ApplicationScoped</option>` needs to be added as well. Same goes for any class that needs to have a dynamic proxy created at runtime."
msgstr "例えば、アプリケーションに `javax.enterprise.context.ApplicationScoped` のアノテーションが付いたクラスがある場合、 `<option>all-open:annotation=javax.enterprise.context.ApplicationScoped</option>` も追加する必要があります。実行時にダイナミックプロキシーを作成する必要があるクラスについても同様です。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:177
msgid "Future versions of Quarkus will configure the Kotlin compiler plugin in a way that will make it unnecessary to alter this configuration."
msgstr "Quarkusの将来のバージョンでは、この設定を変更する必要がないようにKotlinコンパイラプラグインを設定するようになる予定です。"

#. type: Title ==
#: upstream/_guides/kotlin.adoc:178
#, no-wrap
msgid "Important Gradle configuration points"
msgstr "重要なGradle設定ポイント"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:181
msgid "Similar to the Maven configuration, when using Gradle, the following modifications are required when Kotlin is selected:"
msgstr "Mavenの設定と同様、Gradleを使用する場合、Kotlinを選択すると以下のような修正が必要になります。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:185
msgid "The Kotlin plugin is activated, which implicitly adds `sourceDirectory` and `testSourceDirectory` build properties to point to Kotlin sources (`src/main/kotlin` and `src/test/kotlin` respectively)"
msgstr "Kotlin プラグインが有効になり、暗黙のうちに `sourceDirectory` と `testSourceDirectory` のビルドプロパティーが追加され、Kotlin ソース (それぞれ `src/main/kotlin` と `src/test/kotlin` ) を指すようになります。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:186
msgid "The all-open Kotlin plugin tells the compiler not to mark as final, those classes with the annotations highlighted (customize as required)"
msgstr "all-open Kotlinプラグインは、アノテーションがハイライトされているクラスを最終的なものとしてマークしないようにコンパイラに指示します (必要に応じてカスタマイズしてください)"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:187
msgid "When using native-image, the use of http (or https) protocol(s) must be declared"
msgstr "ネイティブイメージを使用する場合は、http (または https) プロトコルの使用を宣言しなければなりません。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:188
msgid "An example configuration follows:"
msgstr "以下に設定例を示します。"

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:194
#, no-wrap
msgid ""
"plugins {\n"
"    id 'java'\n"
"    id 'io.quarkus' \n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:198
#, no-wrap
msgid ""
"    id \"org.jetbrains.kotlin.jvm\" version \"{kotlin-version}\" // <1>\n"
"    id \"org.jetbrains.kotlin.plugin.allopen\" version \"{kotlin-version}\" // <1>\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:203 upstream/_guides/kotlin.adoc:259
#: upstream/_guides/kotlin.adoc:272
#, no-wrap
msgid ""
"repositories {\n"
"    mavenLocal()\n"
"    mavenCentral()\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:206
#, no-wrap
msgid ""
"dependencies { \n"
"    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:{kotlin-version}'\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:208
#, no-wrap
msgid "   implementation enforcedPlatform(\"${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}\")\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:212
#, no-wrap
msgid ""
"    implementation 'io.quarkus:quarkus-resteasy'\n"
"    implementation 'io.quarkus:quarkus-resteasy-jackson'\n"
"    implementation 'io.quarkus:quarkus-kotlin'\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:216
#, no-wrap
msgid ""
"    testImplementation 'io.quarkus:quarkus-junit5'\n"
"    testImplementation 'io.rest-assured:rest-assured'\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:219
#, no-wrap
msgid ""
"group = '...' // set your group\n"
"version = '1.0.0-SNAPSHOT'\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:224 upstream/_guides/kotlin.adoc:293
#, no-wrap
msgid ""
"java {\n"
"    sourceCompatibility = JavaVersion.VERSION_11\n"
"    targetCompatibility = JavaVersion.VERSION_11\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:230 upstream/_guides/kotlin.adoc:299
#, no-wrap
msgid ""
"allOpen { // <2>\n"
"    annotation(\"javax.ws.rs.Path\")\n"
"    annotation(\"javax.enterprise.context.ApplicationScoped\")\n"
"    annotation(\"io.quarkus.test.junit.QuarkusTest\")\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:235
#, no-wrap
msgid ""
"compileKotlin {\n"
"    kotlinOptions.jvmTarget = JavaVersion.VERSION_11\n"
"    kotlinOptions.javaParameters = true\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:239
#, no-wrap
msgid ""
"compileTestKotlin {\n"
"    kotlinOptions.jvmTarget = JavaVersion.VERSION_11\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kotlin.adoc:242 upstream/_guides/kotlin.adoc:308
msgid "The Kotlin plugin version needs to be specified."
msgstr "Kotlinプラグインのバージョンを指定する必要があります。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:243 upstream/_guides/kotlin.adoc:309
msgid "The all-open configuration required, as per Maven guide above"
msgstr "上記のMavenガイドにあるように、all-open設定が必要です。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:245
msgid "or, if you use the Gradle Kotlin DSL:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:254
#, no-wrap
msgid ""
"plugins {\n"
"    kotlin(\"jvm\") version \"{kotlin-version}\" // <1>\n"
"    kotlin(\"plugin.allopen\") version \"{kotlin-version}\"\n"
"    id(\"io.quarkus\")\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:263
#, no-wrap
msgid ""
"val quarkusPlatformGroupId: String by project\n"
"val quarkusPlatformArtifactId: String by project\n"
"val quarkusPlatformVersion: String by project\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:266
#, no-wrap
msgid ""
"group = \"...\"\n"
"version = \"1.0.0-SNAPSHOT\"\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:275
#, no-wrap
msgid ""
"dependencies {\n"
"    implementation(kotlin(\"stdlib-jdk8\"))\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:277
#, no-wrap
msgid "    implementation(enforcedPlatform(\"${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}\"))\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:281
#, no-wrap
msgid ""
"    implementation(\"io.quarkus:quarkus-kotlin\")\n"
"    implementation(\"io.quarkus:quarkus-resteasy\")\n"
"    implementation(\"io.quarkus:quarkus-resteasy-jackson\")\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:285
#, no-wrap
msgid ""
"    testImplementation(\"io.quarkus:quarkus-junit5\")\n"
"    testImplementation(\"io.rest-assured:rest-assured\")\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:288
#, no-wrap
msgid ""
"group = '...' // set your group\n"
"version = \"1.0.0-SNAPSHOT\"\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:304
#, no-wrap
msgid ""
"tasks.withType<org.jetbrains.kotlin.gradle.tasks.KotlinCompile> {\n"
"    kotlinOptions.jvmTarget = JavaVersion.VERSION_11.toString()\n"
"    kotlinOptions.javaParameters = true\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/kotlin.adoc:312
#, no-wrap
msgid "Live reload"
msgstr "ライブ・リロード"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:316
msgid "Quarkus provides support for live reloading changes made to source code. This support is also available to Kotlin, meaning that developers can update their Kotlin source code and immediately see their changes reflected."
msgstr "Quarkusは、ソースコードに加えられた変更をライブでリロードする機能をサポートしています。このサポートはKotlinでも利用できます。つまり、開発者はKotlinのソースコードを更新して、変更が反映されたことをすぐに確認することができます。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:318
msgid "To see this feature in action, first execute: `./mvnw compile quarkus:dev`"
msgstr "この機能の動作を確認するには、まず次を実行します: `./mvnw compile quarkus:dev`"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:320
msgid "When executing an HTTP GET request against `http://localhost:8080/greeting`, you see a JSON message with the value `hello` as its `message` field."
msgstr "`http://localhost:8080/greeting` に対して HTTP GET リクエストを実行すると、 `hello` という値を `message` フィールドに持つ JSON メッセージが表示されます。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:322
msgid "Now using your favorite editor or IDE, update `GreetingResource.kt` and change the `hello` method to the following:"
msgstr "好きなエディタやIDEを使って、 `GreetingResource.kt` を更新し、 `hello` の方法を以下のように変更してください。"

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:326
#, no-wrap
msgid "fun hello() = Greeting(\"hi\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kotlin.adoc:329
msgid "When you now execute an HTTP GET request against `http://localhost:8080/greeting`, you should see a JSON message with the value `hi` as its `message` field."
msgstr "`http://localhost:8080/greeting` に対して HTTP GET リクエストを実行すると、 `hi` という値を `message` フィールドに持つ JSON メッセージが表示されるはずです。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:331
msgid "One thing to note is that the live reload feature is not available when making changes to both Java and Kotlin source that have dependencies on each other. We hope to alleviate this limitation in the future."
msgstr "注意点としては、お互いに依存関係にあるJavaとKotlinの両方のソースに変更を加えた場合、ライブリロード機能が利用できないということです。将来的にはこの制限を緩和したいと考えています。"

#. type: Title ==
#: upstream/_guides/kotlin.adoc:332
#, no-wrap
msgid "Packaging the application"
msgstr "アプリケーションのパッケージング"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:335
msgid "As usual, the application can be packaged using `./mvnw clean package` and executed using the `target/quarkus-app/quarkus-run.jar` file. You can also build the native executable using `./mvnw package -Pnative`, or `./gradlew buildNative`."
msgstr "通常通り、 `./mvnw clean package` を使用してアプリケーションをパッケージ化し、 `target/quarkus-app/quarkus-run.jar` ファイルを使用して実行することができます。また、 `./mvnw package -Pnative` 、または `./gradlew buildNative` を使用してネイティブの実行ファイルをビルドすることもできます。"

#. type: Title ==
#: upstream/_guides/kotlin.adoc:336
#, no-wrap
msgid "Kotlin and Jackson"
msgstr ""

#. type: Plain text
#: upstream/_guides/kotlin.adoc:340
msgid "If the `com.fasterxml.jackson.module:jackson-module-kotlin` dependency and the `quarkus-jackson` extension (or the `quarkus-resteasy-jackson` extension) have been added to the project, then Quarkus automatically registers the `KotlinModule` to the `ObjectMapper` bean (see link:rest-json#jackson[this] guide for more details)."
msgstr "`com.fasterxml.jackson.module:jackson-module-kotlin` 依存関係と `quarkus-jackson` エクステンション(または `quarkus-resteasy-extension` )がプロジェクトに追加されている場合、Quarkus は自動的に `KotlinModule` を `ObjectMapper` Beanに登録します(詳細は link:rest-json#jackson[この] ガイドを参照してください)。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:342
msgid "When using Kotlin data classes with `native-image` you may experience serialization errors that do not occur with the `JVM` version, despite the Kotlin Jackson Module being registered. This is especially so if you have a more complex JSON hierarchy, where an issue on a lower node causes a serialization failure. The error message displayed is a catch-all and typically displays an issue with the root object, which may not necessarily be the case."
msgstr "Kotlin のデータクラスを `native-image` で使用すると、Kotlin Jackson Module が登録されているにもかかわらず、 `JVM` バージョンでは発生しないシリアライズエラーが発生することがあります。これは、より複雑なJSON階層を持っている場合に特に見られる現象で、下位のノードで問題が発生するとシリアライズに失敗します。表示されるエラーメッセージはキャッチオールで、通常はルートオブジェクトの問題を表示しますが、必ずしもそうではない場合もあります。"

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:346
#, no-wrap
msgid "com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Cannot construct instance of `Address` (no Creators, like default construct, exist): cannot deserialize from Object value (no delegate- or property-based Creator)\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kotlin.adoc:349
msgid "To ensure full-compability with `native-image`, it is recommended to apply the Jackson `@field:JsonProperty(\"fieldName\")` annotation, and set a nullable default, as illustrated below. You can automate the generation of Kotlin data classes for your sample JSON using Intellij plugins (such as JSON to Kotlin Class), and easily enable the Jackson annotation and select nullable parameters as part of the auto-code generation."
msgstr "`native-image` との完全な互換性を確保するためには、Jackson `@field:JsonProperty(\"fieldName\")` アノテーションを適用し、以下の図のように nullable のデフォルトを設定することをお勧めします。Intellijのプラグイン（JSON to Kotlin Classなど）を使用して、サンプルのJSONに対するKotlinデータクラスの生成を自動化し、Jacksonアノテーションを有効にして、自動コード生成の一部としてnullableパラメータを選択することができます。"

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:353
#, no-wrap
msgid "import com.fasterxml.jackson.annotation.JsonProperty\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:358
#, no-wrap
msgid ""
"data class Response(\n"
"\t@field:JsonProperty(\"chart\")\n"
"\tval chart: ChartData? = null\n"
")\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:362
#, no-wrap
msgid ""
"data class ChartData(\n"
"\t@field:JsonProperty(\"result\")\n"
"\tval result: List<ResultItem?>? = null,\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:366
#, no-wrap
msgid ""
"\t@field:JsonProperty(\"error\")\n"
"\tval error: Any? = null\n"
")\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:370
#, no-wrap
msgid ""
"data class ResultItem(\n"
"\t@field:JsonProperty(\"meta\")\n"
"\tval meta: Meta? = null,\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:373
#, no-wrap
msgid ""
"\t@field:JsonProperty(\"indicators\")\n"
"\tval indicators: IndicatorItems? = null,\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:377
#, no-wrap
msgid ""
"\t@field:JsonProperty(\"timestamp\")\n"
"\tval timestamp: List<Int?>? = null\n"
")\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:379
#, no-wrap
msgid "...\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/kotlin.adoc:382
#, no-wrap
msgid "Kotlin coroutines and Mutiny"
msgstr ""

#. type: Plain text
#: upstream/_guides/kotlin.adoc:386
msgid "Kotlin coroutines provide a imperative programming model that actually gets executed in an asynchronous, reactive manner.  To simplify the interoperation between Mutiny and Kotlin there is the module `io.smallrye.reactive:mutiny-kotlin`, described link:https://smallrye.io/smallrye-mutiny/guides/kotlin[here]."
msgstr "Kotlinのコルーチンは、非同期でリアクティブな方法で実際に実行される命令型プログラミングモデルを提供します。MutinyとKotlinの相互運用を簡単にするために、モジュール `io.smallrye.reactive:mutiny-kotlin` が存在し、 link:https://smallrye.io/smallrye-mutiny/guides/kotlin[ここ] で解説されています。"

#. type: Title ==
#: upstream/_guides/kotlin.adoc:387
#, no-wrap
msgid "CDI @Inject with Kotlin"
msgstr ""

#. type: Plain text
#: upstream/_guides/kotlin.adoc:391
msgid "Kotlin reflection annotation processing differs from Java.  You may experience an error when using CDI @Inject such as: \"kotlin.UninitializedPropertyAccessException: lateinit property xxx has not been initialized\""
msgstr "Kotlinのリフレクションアノテーション処理はJavaとは異なります。CDIの@Injectを使用していると、以下のようなエラーが発生することがあります。\"kotlin.UninitializedPropertyAccessException: lateinitプロパティーxxxが初期化されていません\""

#. type: Plain text
#: upstream/_guides/kotlin.adoc:393
msgid "In the example below, this can be easily solved by adapting the annotation, adding @field: Default, to handle the lack of a @Target on the Kotlin reflection annotation definition."
msgstr "以下の例では、アノテーションに @field を追加することで、Kotlin のリフレクションアノテーション定義に @Target がない場合に対応し、問題を簡単に解決できます。"

#. type: Plain text
#: upstream/_guides/kotlin.adoc:395
msgid "Alternatively, prefer the use of constructor injection which works without modification of the Java examples."
msgstr "または、Javaの例を変更せずに動作するコンストラクタ注入の使用も良いでしょう。"

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:402
#, no-wrap
msgid ""
"import javax.inject.Inject\n"
"import javax.enterprise.inject.Default\n"
"import javax.enterprise.context.ApplicationScoped\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:408
#, no-wrap
msgid ""
"import javax.ws.rs.GET\n"
"import javax.ws.rs.Path\n"
"import javax.ws.rs.PathParam\n"
"import javax.ws.rs.Produces\n"
"import javax.ws.rs.core.MediaType\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:413
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"class GreetingService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:417
#, no-wrap
msgid ""
"    fun greeting(name: String): String {\n"
"        return \"hello $name\"\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:422
#, no-wrap
msgid ""
"@Path(\"/\")\n"
"class GreetingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:426
#, no-wrap
msgid ""
"    @Inject\n"
"    @field: Default // <1> \n"
"    lateinit var service: GreetingService\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kotlin.adoc:433
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    @Path(\"/greeting/{name}\")\n"
"    fun greeting(@PathParam(\"name\") name: String): String {\n"
"        return service.greeting(name)\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kotlin.adoc:437
msgid "Kotlin requires a @field: xxx qualifier as it has no @Target on the annotation definition. Add @field: xxx in this example. @Default is used as the qualifier, explicitly specifying the use of the default bean."
msgstr "Kotlinでは、アノテーション定義に@Targetがないため、@field: xxx修飾子が必要です。この例では @field: xxx を追加します。@Defaultが修飾子として使用され、デフォルトBeanの使用を明示的に指定します。"
