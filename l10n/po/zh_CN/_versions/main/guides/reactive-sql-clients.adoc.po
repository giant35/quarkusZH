# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-12-11 01:01+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:6
#, no-wrap
msgid "Reactive SQL Clients"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:13
msgid "The Reactive SQL Clients have a straightforward API focusing on scalability and low-overhead.  Currently, the following database servers are supported:"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:15
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:470
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:704
#, no-wrap
msgid "DB2"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:16
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:485
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:649
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:716
#, no-wrap
msgid "PostgreSQL"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:17
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:475
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:667
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:708
#, no-wrap
msgid "MariaDB/MySQL"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:18
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:480
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:712
#, no-wrap
msgid "Microsoft SQL Server"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:20
msgid "In this guide, you will learn how to implement a simple CRUD application exposing data stored in *PostgreSQL* over a RESTful API."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:22
msgid "Extension and connection pool class names for each client can be found at the bottom of this document."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:24
msgid "If you are not familiar with the Quarkus Vert.x extension, consider reading the xref:vertx.adoc[Using Eclipse Vert.x] guide first."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:26
msgid "The application shall manage fruit entities:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:30
#, no-wrap
msgid "public class Fruit {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:32
#, no-wrap
msgid "    public Long id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:34
#, no-wrap
msgid "    public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:37
#, no-wrap
msgid ""
"    public Fruit() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:41
#, no-wrap
msgid ""
"    public Fruit(String name) {\n"
"        this.name = name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:47
#, no-wrap
msgid ""
"    public Fruit(Long id, String name) {\n"
"        this.id = id;\n"
"        this.name = name;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:52
msgid "Do you need a ready-to-use PostgreSQL server to try out the examples?"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:56
#, no-wrap
msgid "docker run --ulimit memlock=-1:-1 -it --rm=true --memory-swappiness=0 --name quarkus_test -e POSTGRES_USER=quarkus_test -e POSTGRES_PASSWORD=quarkus_test -e POSTGRES_DB=quarkus_test -p 5432:5432 postgres:10.5\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:59
#, no-wrap
msgid "Installing"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:61
#, no-wrap
msgid "Reactive PostgreSQL Client extension"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:65
msgid "First, make sure your project has the `quarkus-reactive-pg-client` extension enabled.  If you are creating a new project, set the `extensions` parameter as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:75
#, no-wrap
msgid ""
"mvn io.quarkus.platform:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=reactive-pg-client-quickstart \\\n"
"    -DclassName=\"org.acme.vertx.FruitResource\" \\\n"
"    -Dpath=\"/fruits\" \\\n"
"    -Dextensions=\"resteasy,reactive-pg-client,resteasy-mutiny\"\n"
"cd reactive-pg-client-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:78
msgid "If you have an already created project, the `reactive-pg-client` extension can be added to an existing Quarkus project with the `add-extension` command:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:82
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"reactive-pg-client\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:85
msgid "Otherwise, you can manually add this to the dependencies section of your `pom.xml` file:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:92
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-reactive-pg-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:94
#, no-wrap
msgid "Mutiny"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:97
msgid "Reactive REST endpoints in your application that return Uni or Multi need `Mutiny support for RESTEasy` extension (`io.quarkus:quarkus-resteasy-mutiny`) to work properly:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:101
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"resteasy-mutiny\"\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:107
msgid "In this guide, we will use the Mutiny API of the Reactive PostgreSQL Client.  If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:109
#, no-wrap
msgid "JSON Binding"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:113
msgid "We will expose `Fruit` instances over HTTP in the JSON format.  Consequently, you also need to add the `quarkus-resteasy-jackson` extension:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:117
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"resteasy-jackson\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:120
msgid "If you prefer not to use the command line, manually add this to the dependencies section of your `pom.xml` file:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:127
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-jackson</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:130
msgid "Of course, this is only a requirement for this guide, not any application using the Reactive PostgreSQL Client."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:131
#, no-wrap
msgid "Configuring"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:134
msgid "The Reactive PostgreSQL Client can be configured with standard Quarkus datasource properties and a reactive URL:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:136
#, no-wrap
msgid "src/main/resources/application.properties"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:142
#, no-wrap
msgid ""
"quarkus.datasource.db-kind=postgresql\n"
"quarkus.datasource.username=quarkus_test\n"
"quarkus.datasource.password=quarkus_test\n"
"quarkus.datasource.reactive.url=postgresql://localhost:5432/quarkus_test\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:145
msgid "With that you may create your `FruitResource` skeleton and `@Inject` a `io.vertx.mutiny.pgclient.PgPool` instance:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:147
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:166
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:256
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:309
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:336
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:368
#, no-wrap
msgid "src/main/java/org/acme/vertx/FruitResource.java"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:151
#, no-wrap
msgid ""
"@Path(\"fruits\")\n"
"public class FruitResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:155
#, no-wrap
msgid ""
"    @Inject\n"
"    io.vertx.mutiny.pgclient.PgPool client;\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:157
#, no-wrap
msgid "Database schema and seed data"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:161
msgid "Before we implement the REST endpoint and data management code, we need to setup the database schema.  It would also be convenient to have some data inserted upfront."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:164
msgid "For production we would recommend to use something like the xref:flyway.adoc[Flyway database migration tool].  But for development we can simply drop and create the tables on startup, and then insert a few fruits."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:171
#, no-wrap
msgid ""
"@Inject\n"
"@ConfigProperty(name = \"myapp.schema.create\", defaultValue = \"true\") // <1>\n"
"boolean schemaCreate;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:178
#, no-wrap
msgid ""
"@PostConstruct\n"
"void config() {\n"
"    if (schemaCreate) {\n"
"        initdb();\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:182
#, no-wrap
msgid ""
"private void initdb() {\n"
"    // TODO\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:185
msgid "You may override the default value of the `myapp.schema.create` property in the `application.properties` file."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:189
msgid "Almost ready! To initialize the DB in development mode, we will use the client simple `query` method.  It returns a `Uni` and thus can be composed to execute queries sequentially:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:198
#, no-wrap
msgid ""
"client.query(\"DROP TABLE IF EXISTS fruits\").execute()\n"
"    .flatMap(r -> client.query(\"CREATE TABLE fruits (id SERIAL PRIMARY KEY, name TEXT NOT NULL)\").execute())\n"
"    .flatMap(r -> client.query(\"INSERT INTO fruits (name) VALUES ('Orange')\").execute())\n"
"    .flatMap(r -> client.query(\"INSERT INTO fruits (name) VALUES ('Pear')\").execute())\n"
"    .flatMap(r -> client.query(\"INSERT INTO fruits (name) VALUES ('Apple')\").execute())\n"
"    .await().indefinitely();\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:203
msgid "Wondering why we need block until the latest query is completed? This code is part of a `@PostConstruct` method and Quarkus invokes it synchronously.  As a consequence, returning prematurely could lead to serving requests while the database is not ready yet."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:207
msgid "That's it! So far we have seen how to configure a pooled client and execute simple queries.  We are now ready to develop the data management code and implement our RESTful endpoint."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:208
#, no-wrap
msgid "Using"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:210
#, no-wrap
msgid "Query results traversal"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:214
msgid "In development mode, the database is set up with a few rows in the `fruits` table.  To retrieve all the data, we will use the `query` method again:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:218
#, no-wrap
msgid "Uni<RowSet<Row>> rowSet = client.query(\"SELECT id, name FROM fruits ORDER BY name ASC\").execute();\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:222
msgid "When the operation completes, we will get a `RowSet` that has all the rows buffered in memory.  A `RowSet` is an `java.lang.Iterable<Row>` and thus can be converted to a `Multi`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:228
#, no-wrap
msgid ""
"Multi<Fruit> fruits = rowSet\n"
"  .onItem().transformToMulti(set -> Multi.createFrom().iterable(set))\n"
"  .onItem().transform(Fruit::from);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:232
msgid "The `Fruit#from` method converts a `Row` instance to a `Fruit` instance.  It is extracted as a convenience for the implementation of the other data management methods:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:234
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:244
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:294
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:325
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:356
#, no-wrap
msgid "src/main/java/org/acme/vertx/Fruit.java"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:239
#, no-wrap
msgid ""
"private static Fruit from(Row row) {\n"
"    return new Fruit(row.getLong(\"id\"), row.getString(\"name\"));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:242
msgid "Putting it all together, the `Fruit.findAll` method looks like:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:251
#, no-wrap
msgid ""
"public static Multi<Fruit> findAll(PgPool client) {\n"
"    return client.query(\"SELECT id, name FROM fruits ORDER BY name ASC\").execute()\n"
"            .onItem().transformToMulti(set -> Multi.createFrom().iterable(set))\n"
"            .onItem().transform(Fruit::from);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:254
msgid "And the endpoint to get all fruits from the backend:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:262
#, no-wrap
msgid ""
"@GET\n"
"public Multi<Fruit> get() {\n"
"    return Fruit.findAll(client);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:265
msgid "Now start Quarkus in `dev` mode with:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:269
#, no-wrap
msgid "./mvnw compile quarkus:dev\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:272
msgid "Lastly, open your browser and navigate to http://localhost:8080/fruits, you should see:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:276
#, no-wrap
msgid "[{\"id\":3,\"name\":\"Apple\"},{\"id\":1,\"name\":\"Orange\"},{\"id\":2,\"name\":\"Pear\"}]\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:278
#, no-wrap
msgid "Prepared queries"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:281
msgid "The Reactive PostgreSQL Client can also prepare queries and take parameters that are replaced in the SQL statement at execution time:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:285
#, no-wrap
msgid "client.preparedQuery(\"SELECT id, name FROM fruits WHERE id = $1\").execute(Tuple.of(id))\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:289
msgid "For PostgreSQL, the SQL string can refer to parameters by position, using `$1`, `$2`, ...etc.  Please refer to the <<Database Clients details>> section for other databases."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:292
msgid "Similar to the simple `query` method, `preparedQuery` returns an instance of `PreparedQuery<RowSet<Row>>`.  Equipped with this tooling, we are able to safely use an `id` provided by the user to get the details of a particular fruit:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:301
#, no-wrap
msgid ""
"public static Uni<Fruit> findById(PgPool client, Long id) {\n"
"    return client.preparedQuery(\"SELECT id, name FROM fruits WHERE id = $1\").execute(Tuple.of(id)) // <1>\n"
"            .onItem().transform(RowSet::iterator) // <2>\n"
"            .onItem().transform(iterator -> iterator.hasNext() ? from(iterator.next()) : null); // <3>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:303
msgid "Create a `Tuple` to hold the prepared query parameters."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:304
msgid "Get an `Iterator` for the `RowSet` result."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:305
msgid "Create a `Fruit` instance from the `Row` if an entity was found."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:307
msgid "And in the JAX-RS resource:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:318
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"{id}\")\n"
"public Uni<Response> getSingle(@PathParam Long id) {\n"
"    return Fruit.findById(client, id)\n"
"            .onItem().transform(fruit -> fruit != null ? Response.ok(fruit) : Response.status(Status.NOT_FOUND)) // <1>\n"
"            .onItem().transform(ResponseBuilder::build); // <2>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:320
msgid "Prepare a JAX-RS response with either the `Fruit` instance if found or the `404` status code."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:321
msgid "Build and send the response."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:323
msgid "The same logic applies when saving a `Fruit`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:331
#, no-wrap
msgid ""
"public Uni<Long> save(PgPool client) {\n"
"    return client.preparedQuery(\"INSERT INTO fruits (name) VALUES ($1) RETURNING id\").execute(Tuple.of(name))\n"
"            .onItem().transform(pgRowSet -> pgRowSet.iterator().next().getLong(\"id\"));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:334
msgid "And in the web resource we handle the `POST` request:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:344
#, no-wrap
msgid ""
"@POST\n"
"public Uni<Response> create(Fruit fruit) {\n"
"    return fruit.save(client)\n"
"            .onItem().transform(id -> URI.create(\"/fruits/\" + id))\n"
"            .onItem().transform(uri -> Response.created(uri).build());\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:346
#, no-wrap
msgid "Result metadata"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:349
msgid "A `RowSet` does not only hold your data in memory, it also gives you some information about the data itself, such as:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:351
msgid "the number of rows affected by the query (inserted/deleted/updated/retrieved depending on the query type),"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:352
msgid "the column names."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:354
msgid "Let's use this to support removal of fruits in the database:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:362
#, no-wrap
msgid ""
"public static Uni<Boolean> delete(PgPool client, Long id) {\n"
"    return client.preparedQuery(\"DELETE FROM fruits WHERE id = $1\").execute(Tuple.of(id))\n"
"            .onItem().transform(pgRowSet -> pgRowSet.rowCount() == 1); // <1>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:364
msgid "Inspect metadata to determine if a fruit has been actually deleted."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:366
msgid "And to handle the HTTP `DELETE` method in the web resource:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:377
#, no-wrap
msgid ""
"@DELETE\n"
"@Path(\"{id}\")\n"
"public Uni<Response> delete(@PathParam Long id) {\n"
"    return Fruit.delete(client, id)\n"
"            .onItem().transform(deleted -> deleted ? Status.NO_CONTENT : Status.NOT_FOUND)\n"
"            .onItem().transform(status -> Response.status(status).build());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:381
msgid "With `GET`, `POST` and `DELETE` methods implemented, we may now create a minimal web page to try the RESTful application out.  We will use https://jquery.com/[jQuery] to simplify interactions with the backend:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:394
#, no-wrap
msgid ""
"<!doctype html>\n"
"<html>\n"
"<head>\n"
"    <meta charset=\"utf-8\"/>\n"
"    <title>Reactive PostgreSQL Client - Quarkus</title>\n"
"    <script src=\"https://code.jquery.com/jquery-3.3.1.min.js\"\n"
"            integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" crossorigin=\"anonymous\"></script>\n"
"    <script type=\"application/javascript\" src=\"fruits.js\"></script>\n"
"</head>\n"
"<body>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:396
#, no-wrap
msgid "<h1>Fruits API Testing</h1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:399
#, no-wrap
msgid ""
"<h2>All fruits</h2>\n"
"<div id=\"all-fruits\"></div>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:404
#, no-wrap
msgid ""
"<h2>Create Fruit</h2>\n"
"<input id=\"fruit-name\" type=\"text\">\n"
"<button id=\"create-fruit-button\" type=\"button\">Create</button>\n"
"<div id=\"create-fruit\"></div>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:407
#, no-wrap
msgid ""
"</body>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:410
msgid "In the Javascript code, we need a function to refresh the list of fruits when:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:412
msgid "the page is loaded, or"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:413
msgid "a fruit is added, or"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:414
msgid "a fruit is deleted."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:439
#, no-wrap
msgid ""
"function refresh() {\n"
"    $.get('/fruits', function (fruits) {\n"
"        var list = '';\n"
"        (fruits || []).forEach(function (fruit) { // <1>\n"
"            list = list\n"
"                + '<tr>'\n"
"                + '<td>' + fruit.id + '</td>'\n"
"                + '<td>' + fruit.name + '</td>'\n"
"                + '<td><a href=\"#\" onclick=\"deleteFruit(' + fruit.id + ')\">Delete</a></td>'\n"
"                + '</tr>'\n"
"        });\n"
"        if (list.length > 0) {\n"
"            list = ''\n"
"                + '<table><thead><th>Id</th><th>Name</th><th></th></thead>'\n"
"                + list\n"
"                + '</table>';\n"
"        } else {\n"
"            list = \"No fruits in database\"\n"
"        }\n"
"        $('#all-fruits').html(list);\n"
"    });\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:443
#, no-wrap
msgid ""
"function deleteFruit(id) {\n"
"    $.ajax('/fruits/' + id, {method: 'DELETE'}).then(refresh);\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:445
#, no-wrap
msgid "$(document).ready(function () {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:454
#, no-wrap
msgid ""
"    $('#create-fruit-button').click(function () {\n"
"        var fruitName = $('#fruit-name').val();\n"
"        $.post({\n"
"            url: '/fruits',\n"
"            contentType: 'application/json',\n"
"            data: JSON.stringify({name: fruitName})\n"
"        }).then(refresh);\n"
"    });\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:457
#, no-wrap
msgid ""
"    refresh();\n"
"});\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:459
msgid "The `fruits` parameter is not defined when the database is empty."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:462
msgid "All done! Navigate to http://localhost:8080/fruits.html and read/create/delete some fruits."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:463
#, no-wrap
msgid "Database Clients details"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:467
#, no-wrap
msgid "Database"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:467
#, no-wrap
msgid "Extension name"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:467
#, no-wrap
msgid "Pool class name"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:469
#, no-wrap
msgid "Placeholders"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:471
#, no-wrap
msgid "`quarkus-reactive-db2-client`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:472
#, no-wrap
msgid "`io.vertx.mutiny.db2client.DB2Pool`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:474
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:479
#, no-wrap
msgid "`?`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:476
#, no-wrap
msgid "`quarkus-reactive-mysql-client`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:477
#, no-wrap
msgid "`io.vertx.mutiny.mysqlclient.MySQLPool`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:481
#, no-wrap
msgid "`quarkus-reactive-mssql-client`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:482
#, no-wrap
msgid "`io.vertx.mutiny.mssqlclient.MSSQLPool`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:484
#, no-wrap
msgid "`@p1`, `@p2`, etc."
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:486
#, no-wrap
msgid "`quarkus-reactive-pg-client`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:487
#, no-wrap
msgid "`io.vertx.mutiny.pgclient.PgPool`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:488
#, no-wrap
msgid "`$1`, `$2`, etc."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:490
#, no-wrap
msgid "Transactions"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:495
msgid "The reactive SQL clients support transactions.  A transaction is started with `io.vertx.mutiny.sqlclient.SqlConnection#begin` and terminated with either `io.vertx.mutiny.sqlclient.Transaction#commit` or `io.vertx.mutiny.sqlclient.Transaction#rollback`.  All these operations are asynchronous:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:497
msgid "`connection.begin()` returns a `Uni<Transaction>`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:498
msgid "`transaction.commit()` and `transaction.rollback()` return `Uni<Void>`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:501
msgid "Managing transactions in the reactive programming world can be cumbersome.  Instead of writing repetitive and complex (thus error-prone!) code, you can use the `io.vertx.mutiny.sqlclient.Pool#withTransaction` helper method."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:503
msgid "The following snippet shows how to run 2 insertions in the same transaction:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:512
#, no-wrap
msgid ""
"public static Uni<Void> insertTwoFruits(PgPool client, Fruit fruit1, Fruit fruit2) {\n"
"    return client.withTransaction(conn -> {\n"
"        Uni<RowSet<Row>> insertOne = conn.preparedQuery(\"INSERT INTO fruits (name) VALUES ($1) RETURNING id\")\n"
"                .execute(Tuple.of(fruit1.name));\n"
"        Uni<RowSet<Row>> insertTwo = conn.preparedQuery(\"INSERT INTO fruits (name) VALUES ($1) RETURNING id\")\n"
"                .execute(Tuple.of(fruit2.name));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:518
#, no-wrap
msgid ""
"        return Uni.combine().all().unis(insertOne, insertTwo)\n"
"                // Ignore the results (the two ids)\n"
"                .discardItems();\n"
"    });\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:521
msgid "In this example, the transaction is automatically committed on success or rolled back on failure."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:523
msgid "You can also create dependent actions as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:527
#, no-wrap
msgid "return client.withTransaction(conn -> conn\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:530
#, no-wrap
msgid ""
"        .preparedQuery(\"INSERT INTO person (firstname,lastname) VALUES ($1,$2) RETURNING id\")\n"
"        .execute(Tuple.of(person.getFirstName(), person.getLastName()))\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:533
#, no-wrap
msgid ""
"        .onItem().transformToUni(id -> conn.preparedQuery(\"INSERT INTO addr (person_id,addrline1) VALUES ($1,$2)\")\n"
"                .execute(Tuple.of(id.iterator().next().getLong(\"id\"), person.getLastName())))\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:535
#, no-wrap
msgid "        .onItem().ignore().andContinueWithNull());\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:537
#, no-wrap
msgid "Working with batch query results"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:541
msgid "When executing batch queries, reactive SQL clients return a `RowSet` that corresponds to the results of the first element in the batch.  To get the results of the following batch elements, you must invoke the `RowSet#next` method until it returns `null`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:544
msgid "Let's say you want to update some rows and compute the total number of affected rows.  You must inspect each `RowSet`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:548
#, no-wrap
msgid "PreparedQuery<RowSet<Row>> preparedQuery = client.preparedQuery(\"UPDATE fruits SET name = $1 WHERE id = $2\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:553
#, no-wrap
msgid ""
"Uni<RowSet<Row>> rowSet = preparedQuery.executeBatch(Arrays.asList(\n"
"        Tuple.of(\"Orange\", 1),\n"
"        Tuple.of(\"Pear\", 2),\n"
"        Tuple.of(\"Apple\", 3)));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:561
#, no-wrap
msgid ""
"Uni<Integer> totalAffected = rowSet.onItem().transform(res -> {\n"
"    int total = 0;\n"
"    do {\n"
"        total += res.rowCount(); // <1>\n"
"    } while ((res = res.next()) != null); // <2>\n"
"    return total;\n"
"});\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:563
msgid "Compute the sum of `RowSet#rowCount`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:564
msgid "Invoke `RowSet#next` until it returns `null`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:566
msgid "As another example, if you want to load all the rows you just inserted, you must concatenate the contents of each `RowSet`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:570
#, no-wrap
msgid "PreparedQuery<RowSet<Row>> preparedQuery = client.preparedQuery(\"INSERT INTO fruits (name) VALUES ($1) RETURNING *\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:575
#, no-wrap
msgid ""
"Uni<RowSet<Row>> rowSet = preparedQuery.executeBatch(Arrays.asList(\n"
"        Tuple.of(\"Orange\"),\n"
"        Tuple.of(\"Pear\"),\n"
"        Tuple.of(\"Apple\")));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:590
#, no-wrap
msgid ""
"// Generate a Multi of RowSet items\n"
"Multi<RowSet<Row>> rowSets = rowSet.onItem().transformToMulti(res -> {\n"
"    return Multi.createFrom().generator(() -> res, (rs, emitter) -> {\n"
"        RowSet<Row> next = null;\n"
"        if (rs != null) {\n"
"            emitter.emit(rs);\n"
"            next = rs.next();\n"
"        }\n"
"        if (next == null) {\n"
"            emitter.complete();\n"
"        }\n"
"        return next;\n"
"    });\n"
"});\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:593
#, no-wrap
msgid ""
"// Transform each RowSet into Multi of Row items and Concatenate\n"
"Multi<Row> rows = rowSets.onItem().transformToMultiAndConcatenate(Multi.createFrom()::iterable);\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:595
#, no-wrap
msgid "Multiple Datasources"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:598
msgid "The reactive SQL clients support defining several datasources."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:600
msgid "A typical configuration with several datasources would look like:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:607
#, no-wrap
msgid ""
"quarkus.datasource.db-kind=postgresql <1>\n"
"quarkus.datasource.username=user-default\n"
"quarkus.datasource.password=password-default\n"
"quarkus.datasource.reactive.url=postgresql://localhost:5432/default\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:612
#, no-wrap
msgid ""
"quarkus.datasource.\"additional1\".db-kind=postgresql <2>\n"
"quarkus.datasource.\"additional1\".username=user-additional1\n"
"quarkus.datasource.\"additional1\".password=password-additional1\n"
"quarkus.datasource.\"additional1\".reactive.url=postgresql://localhost:5432/additional1\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:617
#, no-wrap
msgid ""
"quarkus.datasource.\"additional2\".db-kind=mysql <3>\n"
"quarkus.datasource.\"additional2\".username=user-additional2\n"
"quarkus.datasource.\"additional2\".password=password-additional2\n"
"quarkus.datasource.\"additional2\".reactive.url=mysql://localhost:3306/additional2\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:619
msgid "The default datasource - using PostgreSQL."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:620
msgid "A named datasource called `additional1` - using PostgreSQL."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:621
msgid "A named datasource called `additional2` - using MySQL."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:623
msgid "You can then inject the clients as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:628
#, no-wrap
msgid ""
"@Inject <1>\n"
"PgPool defaultClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:632
#, no-wrap
msgid ""
"@Inject\n"
"@ReactiveDataSource(\"additional1\") <2>\n"
"PgPool additional1Client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:636
#, no-wrap
msgid ""
"@Inject\n"
"@ReactiveDataSource(\"additional2\")\n"
"MySQLPool additional2Client;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:638
msgid "Injecting the client for the default datasource does not require anything special."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:639
msgid "For a named datasource, you use the `@ReactiveDataSource` CDI qualifier with the datasource name as its value."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:640
#, no-wrap
msgid "UNIX Domain Socket connections"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:643
msgid "The PostgreSQL and MariaDB/MySQL clients can be configured to connect to the server through a UNIX domain socket."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:645
msgid "First make sure that xref:vertx-reference.adoc#native-transport[native transport support] is enabled."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:648
msgid "Then configure the database connection url.  This step depends on the database type."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:652
msgid "PostgresSQL domain socket paths have the following form: `<directory>/.s.PGSQL.<port>`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:654
msgid "The database connection url must be configured so that:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:656
msgid "the `host` is the `directory` in the socket path"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:657
msgid "the `port` is the `port` in the socket path"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:659
msgid "Consider the following socket path: `/var/run/postgresql/.s.PGSQL.5432`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:661
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:674
msgid "In `application.properties` add:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:665
#, no-wrap
msgid "quarkus.datasource.reactive.url=postgresql://:5432/quarkus_test?host=/var/run/postgresql\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:670
msgid "The database connection url must be configured so that the `host` is the socket path."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:672
msgid "Consider the following socket path: `/var/run/mysqld/mysqld.sock`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:678
#, no-wrap
msgid "quarkus.datasource.reactive.url=mysql:///quarkus_test?host=/var/run/mysqld/mysqld.sock\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:680
#, no-wrap
msgid "Pooled Connection `idle-timeout`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:684
msgid "Reactive datasources can be configured with an `idle-timeout` (in milliseconds).  It is the maximum time a connection remains unused in the pool before it is closed."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:686
msgid "The `idle-timeout` is disabled by default."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:688
msgid "For example, you could expire idle connections after 60 minutes:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:692
#, no-wrap
msgid "quarkus.datasource.reactive.idle-timeout=PT60M\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:694
#, no-wrap
msgid "Configuration Reference"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:696
#, no-wrap
msgid "Common Datasource"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/reactive-sql-clients.adoc:700
#, no-wrap
msgid "Reactive Datasource"
msgstr ""
