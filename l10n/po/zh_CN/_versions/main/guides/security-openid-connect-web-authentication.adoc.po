# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-12-04 00:59+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:6
#, no-wrap
msgid "Using OpenID Connect (OIDC) to Protect Web Applications using Authorization Code Flow"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:12
msgid "This guide demonstrates how to use Quarkus OpenID Connect (OIDC) Extension to protect your Quarkus HTTP endpoints using OpenId Connect Authorization Code Flow supported by OpenId Connect compliant Authorization Servers such as https://www.keycloak.org/about.html[Keycloak]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:14
msgid "The extension allows to easily authenticate the users of your web application by redirecting them to the OpenID Connect Provider (e.g.: Keycloak) to login and, once the authentication is complete, return them back with the code confirming the successful authentication. The extension will request ID and access tokens from the OpenID Connect Provider using an authorization code grant and verify these tokens in order to authorize an access to the application."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:16
msgid "Please read the link:security-openid-connect[Using OpenID Connect to Protect Service Applications] guide if you need to protect your applications using Bearer Token Authorization."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:18
msgid "Please read the link:security-openid-connect-multitenancy[Using OpenID Connect Multi-Tenancy] guide how to support multiple tenants."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:19
#, no-wrap
msgid "Quickstart"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:21
#, no-wrap
msgid "Prerequisites"
msgstr "准备"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:24
msgid "To complete this guide, you need:"
msgstr "要完成本指南，您需要："

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:26
msgid "less than 15 minutes"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:27
msgid "an IDE"
msgstr "IDE"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:28
msgid "JDK 11+ installed with `JAVA_HOME` configured appropriately"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:29
msgid "Apache Maven {maven-version}"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:30
msgid "Docker"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:31
#, no-wrap
msgid "Architecture"
msgstr "架构"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:34
msgid "In this example, we build a very simple web application with a single page:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:36
msgid "`/index.html`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:38
msgid "This page is protected and can only be accessed by authenticated users."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:39
#, no-wrap
msgid "Solution"
msgstr "完整源码"

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:43
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:45
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:47
msgid "The solution is located in the `security-openid-connect-web-authentication-quickstart` {quickstarts-tree-url}/security-openid-connect-web-authentication-quickstart[directory]."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:48
#, no-wrap
msgid "Creating the Maven Project"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:51
msgid "First, we need a new project. Create a new project with the following command:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:60
#, no-wrap
msgid ""
"mvn io.quarkus.platform:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=security-openid-connect-web-authentication-quickstart \\\n"
"    -Dextensions=\"resteasy,oidc\" \\\n"
"    -DnoExamples\n"
"cd security-openid-connect-web-authentication-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:64
msgid "If you already have your Quarkus project configured, you can add the `oidc` extension to your project by running the following command in your project base directory:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:68
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"oidc\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:71
msgid "This will add the following to your `pom.xml`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:78
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:80
#, no-wrap
msgid "Writing the application"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:83
msgid "Let's write a simple JAX-RS resource which has all the tokens returned in the authorization code grant response injected:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:87
#, no-wrap
msgid "package org.acme.security.openid.connect.web.authentication;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:91
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:93
#, no-wrap
msgid "import org.eclipse.microprofile.jwt.JsonWebToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:96
#, no-wrap
msgid ""
"import io.quarkus.oidc.IdToken;\n"
"import io.quarkus.oidc.RefreshToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:99
#, no-wrap
msgid ""
"@Path(\"/tokens\")\n"
"public class TokenResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:106
#, no-wrap
msgid ""
"    /**\n"
"     * Injection point for the ID Token issued by the OpenID Connect Provider\n"
"     */\n"
"    @Inject\n"
"    @IdToken\n"
"    JsonWebToken idToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:112
#, no-wrap
msgid ""
"    /**\n"
"     * Injection point for the Access Token issued by the OpenID Connect Provider\n"
"     */\n"
"    @Inject\n"
"    JsonWebToken accessToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:118
#, no-wrap
msgid ""
"    /**\n"
"     * Injection point for the Refresh Token issued by the OpenID Connect Provider\n"
"     */\n"
"    @Inject\n"
"    RefreshToken refreshToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:130
#, no-wrap
msgid ""
"    /**\n"
"     * Returns the tokens available to the application. This endpoint exists only for demonstration purposes, you should not\n"
"     * expose these tokens in a real application.\n"
"     *\n"
"     * @return a map containing the tokens available to the application\n"
"     */\n"
"    @GET\n"
"    public String getTokens() {\n"
"        StringBuilder response = new StringBuilder().append(\"<html>\")\n"
"                .append(\"<body>\")\n"
"                .append(\"<ul>\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:132
#, no-wrap
msgid "        Object userName = this.idToken.getClaim(\"preferred_username\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:136
#, no-wrap
msgid ""
"        if (userName != null) {\n"
"            response.append(\"<li>username: \").append(userName.toString()).append(\"</li>\");\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:138
#, no-wrap
msgid "        Object scopes = this.accessToken.getClaim(\"scope\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:142
#, no-wrap
msgid ""
"        if (scopes != null) {\n"
"            response.append(\"<li>scopes: \").append(scopes.toString()).append(\"</li>\");\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:144
#, no-wrap
msgid "        response.append(\"<li>refresh_token: \").append(refreshToken.getToken() != null).append(\"</li>\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:148
#, no-wrap
msgid ""
"        return response.append(\"</ul>\").append(\"</body>\").append(\"</html>\").toString();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:151
msgid "This endpoint has ID, access and refresh tokens injected. It returns a `preferred_username` claim from the ID token, a `scope` claim from the access token and also a refresh token availability status."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:153
msgid "Note that you do not have to inject the tokens - it is only required if the endpoint needs to use the ID token to interact with the currently authenticated user or use the access token to access a downstream service on behalf of this user."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:155
msgid "Please see <<access_id_and_access_tokens,Access ID and Access Tokens>> section below for more information."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:156
#, no-wrap
msgid "Configuring the application"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:159
msgid "The OpenID Connect extension allows you to define the configuration using the `application.properties` file which should be located at the `src/main/resources` directory."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:168
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus\n"
"quarkus.oidc.client-id=frontend\n"
"quarkus.oidc.credentials.secret=secret\n"
"quarkus.oidc.application-type=web-app\n"
"quarkus.http.auth.permission.authenticated.paths=/*\n"
"quarkus.http.auth.permission.authenticated.policy=authenticated\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:171
msgid "This is the simplest configuration you can have when enabling authentication to your application."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:173
msgid "The `quarkus.oidc.client-id` property references the `client_id` issued by the OpenID Connect Provider and the `quarkus.oidc.credentials.secret` property sets the client secret."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:175
msgid "The `quarkus.oidc.application-type` property is set to `web-app` in order to tell Quarkus that you want to enable the OpenID Connect Authorization Code Flow, so that your users are redirected to the OpenID Connect Provider to authenticate."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:178
msgid "For last, the `quarkus.http.auth.permission.authenticated` permission is set to tell Quarkus about the paths you want to protect. In this case, all paths are being protected by a policy that ensures that only `authenticated` users are allowed to access. For more details check link:security-authorization[Security Authorization Guide]."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:179
#, no-wrap
msgid "Starting and Configuring the Keycloak Server"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:182
msgid "To start a Keycloak Server you can use Docker and just run the following command:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:186
#, no-wrap
msgid "docker run --name keycloak -e KEYCLOAK_USER=admin -e KEYCLOAK_PASSWORD=admin -p 8180:8080 quay.io/keycloak/keycloak:{keycloak version}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:189
msgid "You should be able to access your Keycloak Server at http://localhost:8180/auth[localhost:8180/auth]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:191
msgid "Log in as the `admin` user to access the Keycloak Administration Console. Username should be `admin` and password `admin`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:193
msgid "Import the {quickstarts-tree-url}/security-openid-connect-web-authentication-quickstart/config/quarkus-realm.json[realm configuration file] to create a new realm. For more details, see the Keycloak documentation about how to https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[create a new realm]."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:194
#, no-wrap
msgid "Running the Application in Dev and JVM modes"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:197
msgid "To run the application in a dev mode, use `./mvnw clean compile quarkus:dev`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:199
msgid "When you're done playing with the `dev` mode you can run it as a standard Java application."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:201
msgid "First compile it:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:205
#, no-wrap
msgid "./mvnw package\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:208
msgid "Then run it:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:212
#, no-wrap
msgid "java -jar target/quarkus-app/quarkus-run.jar\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:214
#, no-wrap
msgid "Running the Application in Native Mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:217
msgid "This same demo can be compiled into native code: no modifications required."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:221
msgid "This implies that you no longer need to install a JVM on your production environment, as the runtime technology is included in the produced binary, and optimized to run with minimal resource overhead."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:224
msgid "Compilation will take a bit longer, so this step is disabled by default; let's build again by enabling the `native` profile:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:228
#, no-wrap
msgid "./mvnw package -Pnative\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:231
msgid "After getting a cup of coffee, you'll be able to run this binary directly:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:235
#, no-wrap
msgid "./target/security-openid-connect-web-authentication-quickstart-runner\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:237
#, no-wrap
msgid "Testing the Application"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:240
msgid "To test the application, you should open your browser and access the following URL:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:242
msgid "http://localhost:8080[http://localhost:8080]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:244
msgid "If everything is working as expected, you should be redirected to the Keycloak server to authenticate."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:246
msgid "In order to authenticate to the application you should type the following credentials when at the Keycloak login page:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:248
msgid "Username: *alice*"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:249
msgid "Password: *alice*"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:251
msgid "After clicking the `Login` button you should be redirected back to the application."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:253
msgid "Please also see the <<integration-testing-keycloak-devservices, Dev Services for Keycloak>> section below about writing the integration tests which depend on `Dev Services for Keycloak`."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:254
#, no-wrap
msgid "Reference Guide"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:257
#, no-wrap
msgid "Accessing ID and Access Tokens"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:260
msgid "OIDC Code Authentication Mechanism acquires three tokens during the authorization code flow: https://openid.net/specs/openid-connect-core-1_0.html#IDToken[IDToken], Access Token and Refresh Token."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:263
msgid "ID Token is always a JWT token and is used to represent a user authentication with the JWT claims.  One can access ID Token claims by injecting `JsonWebToken` with an `IdToken` qualifier:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:270
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
"import io.quarkus.oidc.IdToken;\n"
"import io.quarkus.security.Authenticated;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:274
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:298
#, no-wrap
msgid ""
"@Path(\"/web-app\")\n"
"@Authenticated\n"
"public class ProtectedResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:278
#, no-wrap
msgid ""
"    @Inject\n"
"    @IdToken\n"
"    JsonWebToken idToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:284
#, no-wrap
msgid ""
"    @GET\n"
"    public String getUserName() {\n"
"        return idToken.getName();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:287
msgid "Access Token is usually used by the OIDC `web-app` application to access other endpoints on behalf of the currently logged in user. The raw access token can be accessed as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:294
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
"import io.quarkus.oidc.AccessTokenCredential;\n"
"import io.quarkus.security.Authenticated;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:301
#, no-wrap
msgid ""
"    @Inject\n"
"    JsonWebToken accessToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:305
#, no-wrap
msgid ""
"    // or\n"
"    // @Inject\n"
"    // AccessTokenCredential accessTokenCredential;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:311
#, no-wrap
msgid ""
"    @GET\n"
"    public String getReservationOnBehalfOfUser() {\n"
"        String rawAccessToken = accessToken.getRawToken();\n"
"        //or\n"
"        //String rawAccessToken = accessTokenCredential.getToken();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:316
#, no-wrap
msgid ""
"        // Use the raw access token to access a remote endpoint\n"
"        return getReservationfromRemoteEndpoint(rawAccesstoken);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:319
msgid "Note that `AccessTokenCredential` will have to be used if the Access Token issued to the Quarkus `web-app` application is opaque (binary) and can not be parsed to `JsonWebToken`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:321
msgid "Injection of the `JsonWebToken` and `AccessTokenCredential` is supported in both `@RequestScoped` and `@ApplicationScoped` contexts."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:323
msgid "RefreshToken is only used to refresh the current ID and access tokens as part of its link:#session_management[session management] process."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:325
#, no-wrap
msgid "User Info"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:328
msgid "If IdToken does not provide enough information about the currently authenticated user then you can set a `quarkus.oidc.authentication.user-info-required=true` property for a https://openid.net/specs/openid-connect-core-1_0.html#UserInfo[UserInfo] JSON object from the OIDC userinfo endpoint to be requested."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:330
msgid "A request will be sent to the OpenId Provider UserInfo endpoint using the access token returned with the authorization code grant response and an `io.quarkus.oidc.UserInfo` (a simple `javax.json.JsonObject` wrapper) object will be created. `io.quarkus.oidc.UserInfo` can be either injected or accessed as a SecurityIdentity `userinfo` attribute."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:332
#, no-wrap
msgid "Configuration Metadata"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:335
msgid "The current tenant's discovered link:https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata[OpenId Connect Configuration Metadata] is represented by `io.quarkus.oidc.OidcConfigurationMetadata` and can be either injected or accessed as a `SecurityIdentity` `configuration-metadata` attribute."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:337
msgid "The default tenant's `OidcConfigurationMetadata` is injected if the endpoint is public."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:339
#, no-wrap
msgid "Token Claims And SecurityIdentity Roles"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:342
msgid "The way the roles are mapped to the SecurityIdentity roles from the verified tokens is identical to how it is done for the link:security-openid-connect#token-claims-and-securityidentity-roles[bearer tokens] with the only difference being is that https://openid.net/specs/openid-connect-core-1_0.html#IDToken[ID Token] is used as a source of the roles by default."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:344
msgid "Note if you use Keycloak then you should set a Microprofile JWT client scope for ID token to contain a `groups` claim, please see the https://www.keycloak.org/docs/latest/server_admin/#protocol[Keycloak Server Administration Guide] for more information."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:346
msgid "If only the access token contains the roles and this access token is not meant to be propagated to the downstream endpoints then set `quarkus.oidc.roles.source=accesstoken`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:348
msgid "If UserInfo is the source of the roles then set `quarkus.oidc.authentication.user-info-required=true` and `quarkus.oidc.roles.source=userinfo`, and if needed, `quarkus.oidc.roles.role-claim-path`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:350
msgid "Additionally a custom `SecurityIdentityAugmentor` can also be used to add the roles as documented link:security#security-identity-customization[here]."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:352
#, no-wrap
msgid "Token Verification And Introspection"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:355
msgid "Please see link:security-openid-connect#token-verification-introspection[Token Verification And Introspection] for details about how the tokens are verified and introspected."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:357
msgid "Note that in case of `web-app` applications only `IdToken` is verified by default since the access token is not used by default to access the current Quarkus `web-app` endpoint and instead meant to be propagated to the services expecting this access token, for example, to the OpenId Connect Provider's UserInfo endpoint, etc. However if you expect the access token to contain the roles required to access the current Quarkus endpoint (`quarkus.oidc.roles.source=accesstoken`) then it will also be verified."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:359
#, no-wrap
msgid "Token Introspection and UserInfo Cache"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:362
msgid "Code flow access tokens are not introspected unless they are expected to be the source of roles but will be used to get `UserInfo`. So there will be one or two remote calls with the code flow access token, if the token introspection and/or `UserInfo` are required."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:364
msgid "Please see link:security-openid-connect#token-introspection-userinfo-cache[Token Introspection and UserInfo cache] for more information about using a default token cache or registering a custom cache implementation."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:366
#, no-wrap
msgid "JSON Web Token Claim Verification"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:370
msgid "Please see link:security-openid-connect#jwt-claim-verification[JSON Web Token Claim verification] section about the claim verification, including the `iss` (issuer) claim.  It applies to ID tokens but also to access tokens in a JWT format if the `web-app` application has requested the access token verification."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:371
#, no-wrap
msgid "Redirection"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:374
msgid "When the user is redirected to the OpenID Connect Provider to authenticate, the redirect URL includes a `redirect_uri` query parameter which indicates to the Provider where the user has to be redirected to once the authentication has been completed."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:376
msgid "Quarkus will set this parameter to the current request URL by default. For example, if the user is trying to access a Quarkus service endpoint at `http://localhost:8080/service/1` then the `redirect_uri` parameter will be set to `http://localhost:8080/service/1`. Similarly, if the request URL is `http://localhost:8080/service/2` then the `redirect_uri` parameter will be set to `http://localhost:8080/service/2`, etc."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:379
msgid "OpenID Connect Providers may be configured to require the `redirect_uri` parameter to have the same value (eg. `http://localhost:8080/service/callback`) for all the redirect URLs.  In such cases a `quarkus.oidc.authentication.redirect-path` property has to be set, for example, `quarkus.oidc.authentication.redirect-path=/service/callback`, and Quarkus will set the `redirect_uri` parameter to an absolute URL such as `http://localhost:8080/service/callback` which will be the same regardless of the current request URL."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:381
msgid "If `quarkus.oidc.authentication.redirect-path` is set but the original request URL has to be restored after the user has been redirected back to a callback URL such as `http://localhost:8080/service/callback` then a `quarkus.oidc.authentication.restore-path-after-redirect` property has to be set to `true` which will restore the request URL such as `http://localhost:8080/service/1`, etc."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:383
#, no-wrap
msgid "Dealing with Cookies"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:386
msgid "The OIDC adapter uses cookies to keep the session, code flow and post logout state."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:388
msgid "`quarkus.oidc.authentication.cookie-path` property is used to ensure the cookies are visible especially when you access the protected resources with overlapping or different roots, for example:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:390
msgid "`/index.html` and `/web-app/service`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:391
msgid "`/web-app/service1` and `/web-app/service2`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:392
msgid "`/web-app1/service` and `/web-app2/service`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:394
msgid "`quarkus.oidc.authentication.cookie-path` is set to `/` by default but can be narrowed to the more specific root path such as `/web-app`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:397
msgid "You can also set a `quarkus.oidc.authentication.cookie-path-header` property if the cookie path needs to be set dynamically.  For example, setting `quarkus.oidc.authentication.cookie-path-header=X-Forwarded-Prefix` means that the value of HTTP `X-Forwarded-Prefix` header will be used to set a cookie path."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:399
msgid "If `quarkus.oidc.authentication.cookie-path-header` is set but no configured HTTP header is available in the current request then the `quarkus.oidc.authentication.cookie-path` will be checked."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:401
msgid "If your application is deployed across multiple domains, make sure to set a `quarkus.oidc.authentication.cookie-domain` property for the session cookie be visible to all protected Quarkus services, for example, if you have 2 services deployed at:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:403
msgid "https://whatever.wherever.company.net/"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:404
msgid "https://another.address.company.net/"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:406
msgid "then the `quarkus.oidc.authentication.cookie-domain` property must be set to `company.net`."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:407
#, no-wrap
msgid "Logout"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:410
msgid "By default the logout is based on the expiration time of the ID Token issued by the OpenID Connect Provider. When the ID Token expires, the current user session at the Quarkus endpoint is invalidated and the user is redirected to the OpenID Connect Provider again to authenticate. If the session at the OpenID Connect Provider is still active, users are automatically re-authenticated without having to provide their credentials again."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:412
msgid "The current user session may be automatically extended by enabling a `quarkus.oidc.token.refresh-expired` property. If it is set to `true` then when the current ID Token expires a Refresh Token Grant will be used to refresh ID Token as well as Access and Refresh Tokens."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:414
#, no-wrap
msgid "User-Initiated Logout"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:418
msgid "Users can request a logout by sending a request to the Quarkus endpoint logout path set with a `quarkus.oidc.logout.path` property.  For example, if the endpoint address is `https://application.com/webapp` and the `quarkus.oidc.logout.path` is set to \"/logout\" then the logout request has to be sent to `https://application.com/webapp/logout`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:420
msgid "This logout request will start an https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-Initiated Logout] and the user will be redirected to the OpenID Connect Provider to logout where a user may be asked to confirm the logout is indeed intended."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:422
msgid "The user will be returned to the endpoint post logout page once the logout has been completed if the `quarkus.oidc.logout.post-logout-path` property is set. For example, if the endpoint address is `https://application.com/webapp` and the `quarkus.oidc.logout.post-logout-path` is set to \"/signin\" then the user will be returned to `https://application.com/webapp/signin` (note this URI must be registered as a valid `post_logout_redirect_uri` in the OpenID Connect Provider)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:424
msgid "If the `quarkus.oidc.logout.post-logout-path` is set then a `q_post_logout` cookie will be created and a matching `state` query parameter will be added to the logout redirect URI and the OpenID Connect Provider will return this `state` once the logout has been completed. It is recommended for the Quarkus `web-app` applications to check that a `state` query parameter matches the value of the `q_post_logout` cookie which can be done for example in a JAX-RS filter."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:426
msgid "Note that a cookie name will vary when using link:security-openid-connect-multitenancy[OpenID Connect Multi-Tenancy]. For example, it will be named `q_post_logout_tenant_1` for a tenant with a `tenant_1` id, etc."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:428
msgid "Here is an example of how to configure an RP initiated logout flow:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:435
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus\n"
"quarkus.oidc.client-id=frontend\n"
"quarkus.oidc.credentials.secret=secret\n"
"quarkus.oidc.application-type=web-app\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:438
#, no-wrap
msgid ""
"quarkus.oidc.logout.path=/logout\n"
"quarkus.oidc.logout.post-logout-path=/welcome.html\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:442
#, no-wrap
msgid ""
"# Only the authenticated users can initiate a logout:\n"
"quarkus.http.auth.permission.authenticated.paths=/logout\n"
"quarkus.http.auth.permission.authenticated.policy=authenticated\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:446
#, no-wrap
msgid ""
"# Logged out users should be returned to the /welcome.html site which will offer an option to re-login:\n"
"quarkus.http.auth.permission.authenticated.paths=/welcome.html\n"
"quarkus.http.auth.permission.authenticated.policy=permit\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:450
msgid "You may also need to set `quarkus.oidc.authentication.cookie-path` to a path value common to all of the application resources which is `/` in this example.  See <<oidc-cookies, Dealing with Cookies>> for more information."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:452
msgid "Note that some OpenId Connect providers do not support https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-Initiated Logout] specification (possibly because it is still technically a draft) and do not return an OpenId Connect well-known `end_session_endpoint` metadata property. However it should not be a problem since these providers' specific logout mechanisms may only differ in how the logout URL query parameters are named."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:454
msgid "According to the https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-Initiated Logout] specification, the `quarkus.oidc.logout.post-logout-path` property is represented as a `post_logout_redirect_uri` query parameter which will not be recognized by the providers which do not support this specification."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:456
msgid "You can use `quarkus.oidc.logout.post-logout-url-param` to work around this issue. You can also request more logout query parameters added with `quarkus.oidc.logout.extra-params`. For example, here is how you can support a logout with `Auth0`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:463
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=https://dev-xxx.us.auth0.com\n"
"quarkus.oidc.client-id=redacted\n"
"quarkus.oidc.credentials.secret=redacted\n"
"quarkus.oidc.application-type=web-app\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:466
#, no-wrap
msgid ""
"quarkus.oidc.tenant-logout.logout.path=/logout\n"
"quarkus.oidc.tenant-logout.logout.post-logout-path=/welcome.html\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:471
#, no-wrap
msgid ""
"# Auth0 does not return the `end_session_endpoint` metadata property, configire it instead\n"
"quarkus.oidc.end-session-path=v2/logout\n"
"# Auth0 will not recognize the 'post_logout_redirect_uri' query parameter so make sure it is named as 'returnTo'\n"
"quarkus.oidc.logout.post-logout-uri-param=returnTo\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:475
#, no-wrap
msgid ""
"# Set more properties if needed.\n"
"# For example, if 'client_id' is provided then a valid logout URI should be set as Auth0 Application property, without it - as Auth0 Tenant property.\n"
"quarkus.oidc.logout.extra-params.client_id=${quarkus.oidc.client-id}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:478
#, no-wrap
msgid "Session Management"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:481
msgid "If you have a link:security-openid-connect#single-page-applications[Single Page Application for Service Applications] where your OpenId Connect Provider script such as `keycloak.js` is managing an authoriization code flow then that script will also control the SPA authentication session lifespan."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:483
msgid "If you work with a Quarkus OIDC `web-app` application then it is Quarkus OIDC Code Authentication mechanism which is managing the user session lifespan."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:485
msgid "The session age is calculated by adding the lifespan value of the current IDToken and the values of the `quarkus.oidc.authentication.session-age-extension` and `quarkus.oidc.token.lifespan-grace` properties. Of the last two properties only `quarkus.oidc.authentication.session-age-extension` should be used to significantly extend the session lifespan if required since `quarkus.oidc.token.lifespan-grace` is only meant for taking some small clock skews into consideration."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:487
msgid "When the currently authenticated user returns to the protected Quarkus endpoint and the ID token associated with the session cookie has expired then, by default, the user will be auto-redirected to the OIDC Authorization endpoint to re-authenticate. Most likely the OIDC provider will challenge the user again though not necessarily if the session between the user and this OIDC provider is still active which may happen if it is configured to last longer than the ID token."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:489
msgid "If the `quarkus.oidc.token.refresh-expired` then the expired ID token (as well as the access token) will be refreshed using the refresh token returned with the authorization code grant response. This refresh token may also be recycled (refreshed) itself as part of this process. As a result the new session cookie will be created and the session will be extended."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:491
msgid "Note, `quarkus.oidc.authentication.session-age-extension` can be important when dealing with expired ID tokens, when the user is not very active. In such cases, if the ID token expires, then the session cookie may not be returned back to the Quarkus endpoint during the next user request and Quarkus will assume it is the first authentication request. Therefore using `quarkus.oidc.authentication.session-age-extension` is important if you need to have even the expired ID tokens refreshed."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:493
msgid "You can also complement refreshing the expired ID tokens by proactively refreshing the valid ID tokens which are about to be expired within the `quarkus.oidc.token.refresh-token-time-skew` value. If, during the current user request, it is calculated that the current ID token will expire within this `quarkus.oidc.token.refresh-token-time-skew` then it will be refreshed and the new session cookie will be created. This property should be set to a value which is less than the ID token lifespan; the closer it is to this lifespan value the more often the ID token will be refreshed."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:495
msgid "You can have this process further optimized by having a simple JavaScript function periodically emulating the user activity by pinging your Quarkus endpoint thus minimizing the window during which the user may have to be re-authenticated."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:497
msgid "Note this user session can not be extended forever - the returning user with the expired ID token will have to re-authenticate at the OIDC provider endpoint once the refresh token has expired."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:498
#, no-wrap
msgid "TokenStateManager"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:501
msgid "OIDC `CodeAuthenticationMechanism` is using the default `io.quarkus.oidc.TokenStateManager` interface implementation to keep the ID, access and refresh tokens returned in the authorization code or refresh grant responses in a session cookie. It makes Quarkus OIDC endpoints completely stateless."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:503
msgid "Note that some endpoints do not require the access token. An access token is only required if the endpoint needs to retrieve `UserInfo` or access the downstream service with this access token or use the roles associated with the access token (the roles in the ID token are checked by default). In such cases you can set either `quarkus.oidc.token-state-manager.strategy=id-refresh-token` (keep ID and refresh tokens only) or `quarkus.oidc.token-state-manager.strategy=id-token` (keep ID token only)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:506
msgid "If the ID, access and refresh tokens are JWT tokens then combining all of them (if the strategy is the default `keep-all-tokens`) or only ID and refresh tokens (if the strategy is `id-refresh-token`) may produce a session cookie value larger than 4KB and the browsers may not be able to keep this cookie.  In such cases, you can use `quarkus.oidc.token-state-manager.split-tokens=true` to have a unique session token per each of these tokens."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:508
msgid "Register your own `io.quarkus.oidc.TokenStateManager' implementation as an `@ApplicationScoped` CDI bean if you need to customize the way the tokens are associated with the session cookie. For example, you may want to keep the tokens in a database and have only a database pointer stored in a session cookie. Note though that it may present some challenges in making the tokens available across multiple microservices nodes."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:510
msgid "Here is a simple example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:514
#, no-wrap
msgid "package io.quarkus.oidc.test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:517
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:525
#, no-wrap
msgid ""
"import io.quarkus.arc.AlternativePriority;\n"
"import io.quarkus.oidc.AuthorizationCodeTokens;\n"
"import io.quarkus.oidc.OidcTenantConfig;\n"
"import io.quarkus.oidc.TokenStateManager;\n"
"import io.quarkus.oidc.runtime.DefaultTokenStateManager;\n"
"import io.smallrye.mutiny.Uni;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:529
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"@AlternativePriority(1)\n"
"public class CustomTokenStateManager implements TokenStateManager {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:532
#, no-wrap
msgid ""
"    @Inject\n"
"    DefaultTokenStateManager tokenStateManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:539
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<String> createTokenState(RoutingContext routingContext, OidcTenantConfig oidcConfig,\n"
"            AuthorizationCodeTokens sessionContent, TokenStateManager.CreateTokenStateRequestContext requestContext) {\n"
"        return tokenStateManager.createTokenState(routingContext, oidcConfig, sessionContent, requestContext)\n"
"                .map(t -> (t + \"|custom\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:549
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<AuthorizationCodeTokens> getTokens(RoutingContext routingContext, OidcTenantConfig oidcConfig,\n"
"            String tokenState, TokenStateManager.GetTokensRequestContext requestContext) {\n"
"        if (!tokenState.endsWith(\"|custom\")) {\n"
"            throw new IllegalStateException();\n"
"        }\n"
"        String defaultState = tokenState.substring(0, tokenState.length() - 7);\n"
"        return tokenStateManager.getTokens(routingContext, oidcConfig, defaultState, requestContext);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:560
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<Void> deleteTokens(RoutingContext routingContext, OidcTenantConfig oidcConfig, String tokenState,\n"
"            TokenStateManager.DeleteTokensRequestContext requestContext) {\n"
"        if (!tokenState.endsWith(\"|custom\")) {\n"
"            throw new IllegalStateException();\n"
"        }\n"
"        String defaultState = tokenState.substring(0, tokenState.length() - 7);\n"
"        return tokenStateManager.deleteTokens(routingContext, oidcConfig, defaultState, requestContext);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:562
#, no-wrap
msgid "Listening to important authentication events"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:565
msgid "One can register `@ApplicationScoped` bean which will observe important OIDC authentication events. The listener will be updated when a user has logged in for the first time or re-authenticated, as well as when the session has been refreshed. More events may be reported in the future. For example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:570
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.enterprise.event.Observes;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:575
#, no-wrap
msgid ""
"import io.quarkus.oidc.IdTokenCredential;\n"
"import io.quarkus.oidc.SecurityEvent;\n"
"import io.quarkus.security.identity.AuthenticationRequestContext;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:578
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class SecurityEventListener {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:585
#, no-wrap
msgid ""
"    public void event(@Observes SecurityEvent event) {\n"
"        String tenantId = event.getSecurityIdentity().getAttribute(\"tenant-id\");\n"
"        RoutingContext vertxContext = event.getSecurityIdentity().getCredential(IdTokenCredential.class).getRoutingContext();\n"
"        vertxContext.put(\"listener-message\", String.format(\"event:%s,tenantId:%s\", event.getEventType().name(), tenantId));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:587
#, no-wrap
msgid "Single Page Applications"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:590
msgid "Please check if implementing SPAs the way it is suggested in the link:security-openid-connect#single-page-applications[Single Page Applications for Service Applications] section can meet your requirements."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:592
msgid "If you prefer to use SPA and JavaScript API such as `Fetch` or `XMLHttpRequest`(XHR) with Quarkus web applications, please be aware that OpenID Connect Providers may not support CORS for Authorization endpoints where the users are authenticated after a redirect from Quarkus. This will lead to authentication failures if the Quarkus application and the OpenID Connect Provider are hosted on the different HTTP domains/ports."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:594
msgid "In such cases, set the `quarkus.oidc.authentication.java-script-auto-redirect` property to `false` which will instruct Quarkus to return a `499` status code and `WWW-Authenticate` header with the `OIDC` value. The browser script also needs to be updated to set `X-Requested-With` header with the `JavaScript` value and reload the last requested page in case of `499`, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:599
#, no-wrap
msgid ""
"Future<void> callQuarkusService() async {\n"
"    Map<String, String> headers = Map.fromEntries([MapEntry(\"X-Requested-With\", \"JavaScript\")]);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:608
#, no-wrap
msgid ""
"    await http\n"
"        .get(\"https://localhost:443/serviceCall\")\n"
"        .then((response) {\n"
"            if (response.statusCode == 499) {\n"
"                window.location.assign(\"https://localhost.com:443/serviceCall\");\n"
"            }\n"
"         });\n"
"  }\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:610
#, no-wrap
msgid "Cross Origin Resource Sharing"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:613
msgid "If you plan to consume this application from a Single Page Application running on a different domain, you will need to configure CORS (Cross-Origin Resource Sharing). Please read the link:http-reference#cors-filter[HTTP CORS documentation] for more details."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:614
#, no-wrap
msgid "Integration with GitHub and other OAuth2 providers"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:617
msgid "Some well known providers such as `GitHub` or `LinkedIn` are not `OpenId Connect` but `OAuth2` providers which support the `authorization code flow`, for example, link:https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps[GitHub OAuth2] and link:https://docs.microsoft.com/en-us/linkedin/shared/authentication/authorization-code-flow[LinkedIn OAuth2]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:619
msgid "The main difference between `OpenId Connect` and `OAuth2` providers is that `OpenId Connect` providers, by building on top of `OAuth2`, return an `ID Token` representing a user authentication, in addition to the standard authorization code flow `access` and `refresh` tokens returned by `OAuth2` providers."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:621
msgid "`OAuth2` providers such as `GitHub` do not return `IdToken`, the fact of the user authentication is implicit and is indirectly represented by the `access` token which represents an authenticated user authorizing the current Quarkus `web-app` application to access some data on behalf of the authenticated user."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:624
msgid "For example, when working with `GitHub`, the Quarkus endpoint can acquire an `access` token which will allow it to request a `GitHub` profile of the current user.  In fact this is exactly how a standard `OpenId Connect` `UserInfo` acqusition also works - by authenticating into your `OpenId Connect` provider you also give a permission to Quarkus application to acquire your <<user-info,UserInfo>> on your behalf - and it also shows what is meant by `OpenId Connect` being built on top of `OAuth2`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:626
msgid "In order to support the integration with such `OAuth2` servers, `quarkus-oidc` needs to be configured to allow the authorization code flow responses without `IdToken`: `quarkus.oidc.authentication.id-token-required=false`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:628
msgid "It is required because `quarkus-oidc` expects that not only `access` and `refresh` tokens but also `IdToken` will be returned once the authorization code flow completes."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:630
msgid "Note, even though you will configure the extension to support the authorization code flows without `IdToken`, an internal `IdToken` will be generated to support the way `quarkus-oidc` operates where an `IdToken` is used to support the authentication session and to avoid redirecting the user to the provider such as `GitHub` on every request. In this case the session lifespan is set to 5 minutes which can be extended further as described in the link:#session_management[session management] section."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:633
msgid "The next step is to ensure that the returned access token can be useful to the current Quarkus endpoint.  If the `OAuth2` provider supports the introspection endpoint then you may be able to use this access token as a source of roles with `quarkus.oidc.roles.source=accesstoken`. If no introspection endpoint is available then at the very least it should be possible to request <<user-info,UserInfo>> from this provider with `quarkus.oidc.authentication.user-info-required` - this is the case with `GitHib`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:635
msgid "Configuring the endpoint to request <<user-info,UserInfo>> is the only way `quarkus-oidc` can be integrated with the providers such as `GitHib`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:637
msgid "Note that requiring <<user-info,UserInfo>> involves making a remote call on every request - therefore you may want tp consider caching `UserInfo` data, see <<token-introspection-userinfo-cache,Token Introspection and UserInfo Cache> for more details."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:639
msgid "Also, OAuth2 servers may not support a well-known configuration endpoint in which case the discovery has to be disabled and the authorization, token, and introspection and/or userinfo endpoint paths have to be configured manually."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:641
msgid "Here is how you can integrate `quarkus-oidc` with `GitHub` after you have link:https://docs.github.com/en/developers/apps/building-oauth-apps/creating-an-oauth-app[created a GitHub OAuth application]. Configure your Quarkus endpoint like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:649
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=https://github.com/login/oauth\n"
"quarkus.oidc.discovery-enabled=false\n"
"quarkus.oidc.authorization-path=authorize\n"
"quarkus.oidc.token-path=access_token\n"
"quarkus.oidc.user-info-path=https://api.github.com/user\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:652
#, no-wrap
msgid ""
"# See https://docs.github.com/en/developers/apps/building-oauth-apps/scopes-for-oauth-apps\n"
"quarkus.oidc.authentication.scopes=user:email\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:655
#, no-wrap
msgid ""
"# Make sure a user info is required\n"
"quarkus.oidc.authentication.user-info-required=true\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:659
#, no-wrap
msgid ""
"# Consider enabling UserInfo Cache \n"
"# quarkus.oidc.token-cache.max-size=1000\n"
"# quarkus.oidc.token-cache.time-to-live=5M\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:662
#, no-wrap
msgid ""
"# Allow the code flow responses without ID tokens\n"
"quarkus.oidc.authentication.id-token-required=false\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:664
#, no-wrap
msgid "quarkus.oidc.application-type=web-app\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:667
#, no-wrap
msgid ""
"quarkus.oidc.client-id=github_app_clientid\n"
"quarkus.oidc.credentials.secret=github_app_clientsecret\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:670
msgid "This is all what is needed for an endpoint like this one to return the currently authenticated user's profile with `GET http://localhost:8080/github/userinfo` and access it as the individual `UserInfo` properties:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:677
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:748
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:680
#, no-wrap
msgid ""
"import io.quarkus.oidc.UserInfo;\n"
"import io.quarkus.security.Authenticated;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:684
#, no-wrap
msgid ""
"@Path(\"/github\")\n"
"@Authenticated\n"
"public class TokenResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:687
#, no-wrap
msgid ""
"    @Inject\n"
"    UserInfo userInfo;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:695
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/userinfo\")\n"
"    @Produces(\"application/json\")\n"
"    public String getUserInfo() {\n"
"        return userInfo.getUserInfoString();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:698
msgid "If you support more than one social provider with the help of link:security-openid-connect-multitenancy[OpenId Connect Multi-Tenancy], for example, `Google` which is an OpenId Connect Provider returning `IdToken` and `GitHub` which is an `OAuth2` provider returning no `IdToken` and only allowing to access `UserInfo` then you can have your endpoint working with only the injected `SecurityIdentity` for both `Google` and `GitHub` flows. A simple augmentation of `SecurityIdentity` will be required where a principal created with the internally generated `IdToken` will be replaced with the `UserInfo` based principal when the GiHub flow is active:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:702
#, no-wrap
msgid "package io.quarkus.it.keycloak;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:704
#, no-wrap
msgid "import java.security.Principal;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:706
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:714
#, no-wrap
msgid ""
"import io.quarkus.oidc.UserInfo;\n"
"import io.quarkus.security.identity.AuthenticationRequestContext;\n"
"import io.quarkus.security.identity.SecurityIdentity;\n"
"import io.quarkus.security.identity.SecurityIdentityAugmentor;\n"
"import io.quarkus.security.runtime.QuarkusSecurityIdentity;\n"
"import io.smallrye.mutiny.Uni;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:717
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CustomSecurityIdentityAugmentor implements SecurityIdentityAugmentor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:725
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<SecurityIdentity> augment(SecurityIdentity identity, AuthenticationRequestContext context) {\n"
"        RoutingContext routingContext = identity.getAttribute(RoutingContext.class.getName());\n"
"        if (routingContext != null && routingContext.normalizedPath().endsWith(\"/github\")) {\n"
"\t        QuarkusSecurityIdentity.Builder builder = QuarkusSecurityIdentity.builder(identity);\n"
"\t        UserInfo userInfo = identity.getAttribute(\"userinfo\");\n"
"\t        builder.setPrincipal(new Principal() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:730
#, no-wrap
msgid ""
"\t            @Override\n"
"\t            public String getName() {\n"
"\t                return userInfo.getString(\"preferred_username\");\n"
"\t            }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:736
#, no-wrap
msgid ""
"\t        });\n"
"\t        identity = builder.build();\n"
"        }\n"
"        return Uni.createFrom().item(identity);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:738
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:741
#, no-wrap
msgid "Now, the following code will work when the user is signing in into your application with both `Google` or `GitHub`:   \n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:751
#, no-wrap
msgid ""
"import io.quarkus.security.Authenticated;\n"
"import io.quarkus.security.identity.SecurityIdentity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:755
#, no-wrap
msgid ""
"@Path(\"/service\")\n"
"@Authenticated\n"
"public class TokenResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:758
#, no-wrap
msgid ""
"    @Inject\n"
"    SecurityIdentity identity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:765
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/google\")\n"
"    @Produces(\"application/json\")\n"
"    public String getUserName() {\n"
"        return identity.getPrincipal().getName();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:773
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/github\")\n"
"    @Produces(\"application/json\")\n"
"    public String getUserName() {\n"
"        return identity.getPrincipal().getUserName();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:776
msgid "Possibly a simpler alternative is to inject both `@IdToken JsonWebToken` and `UserInfo` and use `JsonWebToken` when dealing with the providers returning `IdToken` and `UserInfo` - with the providers which do not return `IdToken`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:778
msgid "The last important point is to make sure the callback path you enter in the GitHub OAuth application configuration matches the endpoint path where you'd like the user be redirected to after a successful GitHub authentication and application authorization, in this case it has to be set to `http:localhost:8080/github/userinfo`."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:779
#, no-wrap
msgid "Cloud Services"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:781
#, no-wrap
msgid "Google Cloud"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:784
msgid "You can have Quarkus OIDC `web-app` applications access **Google Cloud services** such as **BigQuery** on behalf of the currently authenticated users who have enabled OpenID Connect (Authorization Code Flow) permissions to such services in their Google Developer Consoles."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:787
msgid "It is super easy to do with https://github.com/quarkiverse[Quarkiverse] https://github.com/quarkiverse/quarkiverse-google-cloud-services[Google Cloud Services], only add the https://github.com/quarkiverse/quarkiverse-google-cloud-services/releases/latest[latest tag] service dependency, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:795
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.quarkiverse.googlecloudservices</groupId>\n"
"  <artifactId>quarkus-google-cloud-bigquery</artifactId>\n"
"  <version>${quarkiverse.googlecloudservices.version}</version>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:798
msgid "and configure Google OIDC properties:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:806
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=https://accounts.google.com\n"
"quarkus.oidc.application-type=web-app\n"
"quarkus.oidc.client-id={GOOGLE_CLIENT_ID}\n"
"quarkus.oidc.credentials.secret={GOOGLE_CLIENT_SECRET}\n"
"quarkus.oidc.token.issuer=https://accounts.google.com\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:808
#, no-wrap
msgid "Provider Endpoint configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:811
msgid "OIDC `web-app` application needs to know OpenId Connect provider's authorization, token, `JsonWebKey` (JWK) set and possibly `UserInfo`, introspection and end session (RP-initiated logout) endpoint addresses."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:813
msgid "By default they are discovered by adding a `/.well-known/openid-configuration` path to the configured `quarkus.oidc.auth-server-url`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:815
msgid "Alternatively, if the discovery endpoint is not available or you would like to save on the discovery endpoint roundtrip, you can disable the discovery and configure them with relative path values, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:832
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus\n"
"quarkus.oidc.discovery-enabled=false\n"
"# Authorization endpoint: http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/auth\n"
"quarkus.oidc.authorization-path=/protocol/openid-connect/auth\n"
"# Token endpoint: http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/token\n"
"quarkus.oidc.token-path=/protocol/openid-connect/token\n"
"# JWK set endpoint: http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/certs\n"
"quarkus.oidc.jwks-path=/protocol/openid-connect/certs\n"
"# UserInfo endpoint: http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/userinfo\n"
"quarkus.oidc.user-info-path=/protocol/openid-connect/userinfo\n"
"# Token Introspection endpoint: http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/token/introspect\n"
"quarkus.oidc.introspection-path=/protocol/openid-connect/token/introspect\n"
"# End session endpoint: http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/logout\n"
"quarkus.oidc.end-session-path=/protocol/openid-connect/logout\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:834
#, no-wrap
msgid "Token Propagation"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:836
msgid "Please see link:security-openid-connect-client#token-propagation[Token Propagation] section about the Authorization Code Flow access token propagation to the downstream services."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:838
#, no-wrap
msgid "Oidc Provider Client Authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:841
msgid "`quarkus.oidc.runtime.OidcProviderClient` is used when a remote request to an OpenId Connect Provider has to be done. It has to authenticate to the OpenId Connect Provider when the authorization code has to be exchanged for the ID, access and refresh tokens, when the ID and access tokens have to be refreshed or introspected."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:843
msgid "All the https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC Client Authentication] options are supported, for example:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:845
msgid "`client_secret_basic`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:851
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.secret=mysecret\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:854
msgid "or"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:860
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.client-secret.value=mysecret\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:863
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:895
msgid "or with the secret retrieved from a link:credentials-provider[CredentialsProvider]:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:868
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:900
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:873
#, no-wrap
msgid ""
"# This is a key which will be used to retrieve a secret from the map of credentials returned from CredentialsProvider\n"
"quarkus.oidc.credentials.client-secret.provider.key=mysecret-key\n"
"# Set it only if more than one CredentialsProvider can be registered\n"
"quarkus.oidc.credentials.client-secret.provider.name=oidc-credentials-provider\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:876
msgid "`client_secret_post`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:883
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.client-secret.value=mysecret\n"
"quarkus.oidc.credentials.client-secret.method=post\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:886
msgid "`client_secret_jwt`, signature algorithm is HS256:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:892
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:905
#, no-wrap
msgid ""
"# This is a key which will be used to retrieve a secret from the map of credentials returned from CredentialsProvider\n"
"quarkus.oidc.credentials.jwt.secret-provider.key=mysecret-key\n"
"# Set it only if more than one CredentialsProvider can be registered\n"
"quarkus.oidc.credentials.jwt.secret-provider.name=oidc-credentials-provider\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:908
msgid "`private_key_jwt` with the PEM key file, signature algorithm is RS256:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:914
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:944
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.jwt.key-file=privateKey.pem\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:917
msgid "`private_key_jwt` with the key store file, signature algorithm is RS256:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:925
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.jwt.key-store-file=keystore.jks\n"
"quarkus.oidc.credentials.jwt.key-store-password=mypassword\n"
"quarkus.oidc.credentials.jwt.key-password=mykeypassword\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:928
#, no-wrap
msgid ""
"# Private key alias inside the keystore\n"
"quarkus.oidc.credentials.jwt.key-id=mykeyAlias\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:931
msgid "Using `client_secret_jwt` or `private_key_jwt` authentication methods ensures that no client secret goes over the wire."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:933
#, no-wrap
msgid "Additional JWT Authentication options"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:936
msgid "If either `client_secret_jwt` or `private_key_jwt` authentication methods are used then the JWT signature algorithm, key identifier and audience can be customized, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:940
#, no-wrap
msgid "# private_key_jwt client authentication\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:949
#, no-wrap
msgid ""
"# This is a token key identifier 'kid' header - set it if your OpenId Connect provider requires it.\n"
"# Note if the key is represented in a JSON Web Key (JWK) format with a `kid` property then\n"
"# using 'quarkus.oidc.credentials.jwt.token-key-id' is not necessary.\n"
"quarkus.oidc.credentials.jwt.token-key-id=mykey\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:952
#, no-wrap
msgid ""
"# Use RS512 signature algorithm instead of the default RS256\n"
"quarkus.oidc.credentials.jwt.signature-algorithm=RS512\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:955
#, no-wrap
msgid ""
"# The token endpoint URL is the default audience value, use the base address URL instead:\n"
"quarkus.oidc.credentials.jwt.audience=${quarkus.oidc-client.auth-server-url}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:958
#, no-wrap
msgid "Testing"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:961
msgid "Start by adding the following dependencies to your test project:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:980
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>net.sourceforge.htmlunit</groupId>\n"
"    <artifactId>htmlunit</artifactId>\n"
"    <exclusions>\n"
"        <exclusion>\n"
"            <groupId>org.eclipse.jetty</groupId>\n"
"            <artifactId>*</artifactId>\n"
"       </exclusion>\n"
"    </exclusions>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:983
#, no-wrap
msgid "Wiremock"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:986
msgid "Add the following dependency:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:994
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-oidc-server</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:997
msgid "Prepare the REST test endpoints, set `application.properties`, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1005
#, no-wrap
msgid ""
"# keycloak.url is set by OidcWiremockTestResource\n"
"quarkus.oidc.auth-server-url=${keycloak.url}/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-web-app\n"
"quarkus.oidc.credentials.secret=secret\n"
"quarkus.oidc.application-type=web-app\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1008
msgid "and finally write the test code, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1012
#, no-wrap
msgid "import static org.junit.jupiter.api.Assertions.assertEquals;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1014
#, no-wrap
msgid "import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1019
#, no-wrap
msgid ""
"import com.gargoylesoftware.htmlunit.SilentCssErrorHandler;\n"
"import com.gargoylesoftware.htmlunit.WebClient;\n"
"import com.gargoylesoftware.htmlunit.html.HtmlForm;\n"
"import com.gargoylesoftware.htmlunit.html.HtmlPage;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1023
#, no-wrap
msgid ""
"import io.quarkus.test.common.QuarkusTestResource;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.oidc.server.OidcWiremockTestResource;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1027
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@QuarkusTestResource(OidcWiremockTestResource.class)\n"
"public class CodeFlowAuthorizationTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1033
#, no-wrap
msgid ""
"    @Test\n"
"    public void testCodeFlow() throws Exception {\n"
"        try (final WebClient webClient = createWebClient()) {\n"
"            // the test REST endpoint listens on '/code-flow'\n"
"            HtmlPage page = webClient.getPage(\"http://localhost:8081/code-flow\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1038
#, no-wrap
msgid ""
"            HtmlForm form = page.getFormByName(\"form\");\n"
"            // user 'alice' has the 'user' role\n"
"            form.getInputByName(\"username\").type(\"alice\");\n"
"            form.getInputByName(\"password\").type(\"alice\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1040
#, no-wrap
msgid "            page = form.getInputByValue(\"login\").click();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1044
#, no-wrap
msgid ""
"            assertEquals(\"alice\", page.getBody().asText());\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1051
#, no-wrap
msgid ""
"    private WebClient createWebClient() {\n"
"        WebClient webClient = new WebClient();\n"
"        webClient.setCssErrorHandler(new SilentCssErrorHandler());\n"
"        return webClient;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1054
msgid "`OidcWiremockTestResource` recognizes `alice` and `admin` users. The user `alice` has the `user` role only by default - it can be customized with a `quarkus.test.oidc.token.user-roles` system property. The user `admin` has the `user` and `admin` roles by default - it can be customized with a `quarkus.test.oidc.token.admin-roles` system property."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1056
msgid "Additionally, `OidcWiremockTestResource` set token issuer and audience to `https://service.example.com` which can be customized with `quarkus.test.oidc.token.issuer` and `quarkus.test.oidc.token.audience` system properties."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1058
msgid "`OidcWiremockTestResource` can be used to emulate all OpenId Connect providers."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1060
#, no-wrap
msgid "Dev Services for Keycloak"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1064
msgid "Using link:security-openid-connect-dev-services[Dev Services for Keycloak] is recommended for the integration testing against Keycloak.  `Dev Services for Keycloak` will launch and initialize a test container: it will create a `quarkus` realm, a `quarkus-app` client (`secret` secret) and add `alice` (`admin` and `user` roles) and `bob` (`user` role) users, where all of these properties can be customized."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1066
msgid "First prepare `application.properties`. You can start with a completely empty `application.properties` as `Dev Services for Keycloak` will register `quarkus.oidc.auth-server-url` pointing to the running test container as well as `quarkus.oidc.client-id=quarkus-app` and `quarkus.oidc.credentials.secret=secret`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1068
msgid "But if you already have all the required `quarkus-oidc` properties configured then you only need to associate `quarkus.oidc.auth-server-url` with the `prod` profile for `Dev Services for Keycloak`to start a container, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1072
#, no-wrap
msgid "%prod.quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1075
msgid "If a custom realm file has to be imported into Keycloak before running the tests then you can configure `Dev Services for Keycloak` as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1080
#, no-wrap
msgid ""
"%prod.quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus\n"
"quarkus.keycloak.devservices.realm-path=quarkus-realm.json\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1084
msgid "Finally write a test code the same way as it is described in the <<integration-testing-wiremock, Wiremock>> section above.  The only difference is that `@QuarkusTestResource` is no longer needed:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1090
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class CodeFlowAuthorizationTest {\n"
"}\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1093
#, no-wrap
msgid "KeycloakTestResourceLifecycleManager"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1097
msgid "If you need to do the integration testing against Keycloak then you are encouraged to do it with <<integration-testing-keycloak-devservices,Dev Services For Keycloak>>.  Use `KeycloakTestResourceLifecycleManager` for your tests only if there is a good reason not to use `Dev Services for Keycloak`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1099
msgid "Start with adding the following dependency:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1107
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-keycloak-server</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1110
msgid "which provides `io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager` - an implementation of `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` which starts a Keycloak container."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1112
msgid "And configure `maven.surefire.plugin` as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1128
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>maven-surefire-plugin</artifactId>\n"
"    <configuration>\n"
"        <systemPropertyVariables>\n"
"            <!-- or, alternatively, configure 'keycloak.version' -->\n"
"            <keycloak.docker.image>${keycloak.docker.image}</keycloak.docker.image>\n"
"            <!--\n"
"              Disable HTTPS if required:\n"
"              <keycloak.use.https>false</keycloak.use.https>\n"
"            -->\n"
"        </systemPropertyVariables>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1131
msgid "(and similarly `maven.failsafe.plugin` when testing in native image)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1134
msgid "And now set the configuration and write the test code the same way as it is described in the <<integration-testing-wiremock, Wiremock>> section above.  The only difference is the name of `QuarkusTestResource`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1138
#, no-wrap
msgid "import io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1143
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@QuarkusTestResource(KeycloakTestResourceLifecycleManager.class)\n"
"public class CodeFlowAuthorizationTest {\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1146
msgid "`KeycloakTestResourceLifecycleManager` registers `alice` and `admin` users. The user `alice` has the `user` role only by default - it can be customized with a `keycloak.token.user-roles` system property. The user `admin` has the `user` and `admin` roles by default - it can be customized with a `keycloak.token.admin-roles` system property."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1149
msgid "By default, `KeycloakTestResourceLifecycleManager` uses HTTPS to initialize a Keycloak instance which can be disabled with `keycloak.use.https=false`.  Default realm name is `quarkus` and client id - `quarkus-web-app` - set `keycloak.realm` and `keycloak.web-app.client` system properties to customize the values if needed."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1151
#, no-wrap
msgid "TestSecurity annotation"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1154
msgid "Please see link:security-openid-connect#integration-testing-security-annotation[Use TestingSecurity with injected JsonWebToken] section for more information about using `@TestSecurity` and `@OidcSecurity` annotations for testing the `web-app` application endpoint code which depends on the injected ID and access `JsonWebToken` as well as `UserInfo` and `OidcConfigurationMetadata`."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1155
#, no-wrap
msgid "How to check the errors in the logs"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1158
msgid "Please enable `io.quarkus.oidc.runtime.OidcProvider` `TRACE` level logging to see more details about the token verification errors:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1163
#, no-wrap
msgid ""
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcProvider\".level=TRACE\n"
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcProvider\".min-level=TRACE\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1166
msgid "Please enable `io.quarkus.oidc.runtime.OidcRecorder` `TRACE` level logging to see more details about the OidcProvider client initialization errors:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1171
#, no-wrap
msgid ""
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcRecorder\".level=TRACE\n"
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcRecorder\".min-level=TRACE\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1173
#, no-wrap
msgid "Running behind a reverse proxy"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1176
msgid "OIDC authentication mechanism can be affected if your Quarkus application is running behind a reverse proxy/gateway/firewall when HTTP `Host` header may be reset to the internal IP address, HTTPS connection may be terminated, etc. For example, an authorization code flow `redirect_uri` parameter may be set to the internal host instead of the expected external one."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1178
msgid "In such cases configuring Quarkus to recognize the original headers forwarded by the proxy will be required, see link:http-reference#reverse-proxy[Running behind a reverse proxy] Vert.x documentation section for more information."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1180
msgid "For example, if your Quarkus endpoint runs in a cluster behind Kubernetes Ingress then a redirect from the OpenId Connect Provider back to this endpoint may not work since the calculated `redirect_uri` parameter may point to the internal endpoint address. This problem can be resolved with the following configuration:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1187
#, no-wrap
msgid ""
"quarkus.http.proxy.proxy-address-forwarding=true\n"
"quarkus.http.proxy.allow-forwarded=false\n"
"quarkus.http.proxy.enable-forwarded-host=true\n"
"quarkus.http.proxy.forwarded-host-header=X-ORIGINAL-HOST\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1190
msgid "where `X-ORIGINAL-HOST` is set by Kubernetes Ingress to represent the external endpoint address."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1192
msgid "`quarkus.oidc.authentication.force-redirect-https-scheme` property may also be used when the Quarkus application is running behind a SSL terminating reverse proxy."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1193
#, no-wrap
msgid "External and Internal Access to OpenId Connect Provider"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1197
msgid "Note that the OpenId Connect Provider externally accessible authorization, logout and other endpoints may have different HTTP(S) URLs compared to the URLs auto-discovered or configured relative to `quarkus.oidc.auth-server-url` internal URL.  In such cases an issuer verification failure may be reported by the endpoint and redirects to the externally accessible Connect Provider endpoints may fail."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1200
msgid "In such cases, if you work with Keycloak then please start it with a `KEYCLOAK_FRONTEND_URL` system property set to the externally accessible base URL.  If you work with other Openid Connect providers then please check your provider's documentation."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1201
#, no-wrap
msgid "Customize authentication requests"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1204
msgid "By default, only the `response_type` (set to `code`), `scope` (set to 'openid'), `client_id`, `redirect_uri` and `state` properties are passed as HTTP query parameters to the OpenId Connect provider's authorization endpoint when the user is redirected to it to authenticate."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1206
msgid "You can add more properties to it with `quarkus.oidc.authentication.extra-params`. For example, some OpenId Connect providers may choose to return the authorization code as part of the redirect URI's fragment which would break the authentication process - it can be fixed as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1210
#, no-wrap
msgid "quarkus.oidc.authentication.extra-params.response_mode=query\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1212
#, no-wrap
msgid "Configuration Reference"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1216
#, no-wrap
msgid "References"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1219
msgid "https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1220
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1221
msgid "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1222
msgid "link:security-openid-connect-client[Quarkus - Using OpenID Connect and OAuth2 Client and Filters to manage access tokens]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1223
msgid "link:security-openid-connect-dev-services[Dev Services for Keycloak]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1224
msgid "link:security#oidc-jwt-oauth2-comparison[Summary of Quarkus OIDC, JWT and OAuth2 features]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-web-authentication.adoc:1224
msgid "link:security[Quarkus Security]"
msgstr ""
