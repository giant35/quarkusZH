# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-11-07 01:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:6
#, no-wrap
msgid "Dev Services and UI for OpenId Connect (OIDC)"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:12
msgid "This guide covers the Dev Services and UI for OpenId Connect (OIDC) Keycloak provider and explains how to support Dev Services and UI for other OpenId Connect providers.  It also describes Dev UI for all OpenId Connect providers which have already been started before Quarkus is launched in a dev mode."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:13
#, no-wrap
msgid "Introduction"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:17
msgid "Quarkus introduces an experimental `Dev Services For Keycloak` feature which is enabled by default when the `quarkus-oidc` extension is started in dev mode with `mvn quarkus:dev` and when the integration tests are running in test mode, but only when no `quarkus.oidc.auth-server-url` property is configured.  It starts a Keycloak container for both the dev and/or test modes and initializes them by registering the existing Keycloak realm or creating a new realm with the client and users for you to start developing your Quarkus application secured by Keycloak immediately. It will restart the container when the `application.properties` or the realm file changes have been detected."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:19
msgid "Additionally, link:dev-ui[Dev UI] available at http://localhost:8080/q/dev[/q/dev] complements this feature with a Dev UI page which helps to acquire the tokens from Keycloak and test your Quarkus application."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:21
msgid "If `quarkus.oidc.auth-server-url` is already set then a generic OpenId Connect Dev Console which can be used with all OpenId Connect providers will be activated, please see <<dev-ui-all-oidc-providers,Dev UI for all OpenId Connect Providers>> for more information."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:22
#, no-wrap
msgid "Dev Services for Keycloak"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:25
msgid "Start your application without configuring `quarkus.oidc` properties in `application.properties`. You will see in the console something similar to:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:29
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:42
#, no-wrap
msgid "$ mvn quarkus:dev\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:33
#, no-wrap
msgid ""
"KeyCloak Dev Services Starting:\n"
"2021-11-02 17:14:24,864 INFO  [org.tes.con.wai.str.HttpWaitStrategy] (build-10) /unruffled_agnesi: Waiting for 60 seconds for URL: http://localhost:32781/auth (where port 32781 maps to container port 8080)\n"
"2021-11-02 17:14:44,170 INFO  [io.qua.oid.dep.dev.key.KeycloakDevServicesProcessor] (build-10) Dev Services for Keycloak started.\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:36
msgid "The `quay.io/keycloak/keycloak:15.0.2` image which contains a `Keycloak` distribution powered by `WildFly` is currently used to start a container by default. See the <<keycloak-initialization, Keycloak Initialization>> section for more details about the image selection."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:38
msgid "Note that by default, `Dev Services for Keycloak` will not start a new container if it finds a container with a `quarkus-dev-service-keycloak` label and connect to it if this label's value matches the value of the `quarkus.keycloak.devservices.service-name` property (default value is `quarkus`). In such cases you will see a slighty different output:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:46
#, no-wrap
msgid ""
"2021-08-27 18:42:43,530 INFO  [io.qua.dev.com.ContainerLocator] (build-15) Dev Services container found: 48fee151a31ddfe32c39965be8f61108587b25ed2f66cdc18bb926d9e2e570c5 (quay.io/keycloak/keycloak:14.0.0). Connecting to: 0.0.0.0:32797.\n"
"2021-08-27 18:42:43,600 INFO  [io.qua.oid.dep.dev.key.KeycloakDevServicesProcessor] (build-15) Dev Services for Keycloak started.\n"
"...\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:49
msgid "Note that you can disable sharing the containers with `quarkus.keycloak.devservices.shared=false`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:51
msgid "Now open the main link:http://localhost:8080/q/dev[Dev UI page] and you will see the `OpenId Connect Card` linking to a `Keycloak` page:"
msgstr ""

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:52
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:67
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:71
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:75
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:117
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:137
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:147
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:178
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:195
#, no-wrap
msgid "Dev"
msgstr ""

#. type: Target for macro image
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:52
#, no-wrap
msgid "dev-ui-oidc-keycloak-card.png"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:55
msgid "Click on the `Provider: Keycloak` link and you will see a Keycloak page which will be presented slightly differently depending on how `Dev Services for Keycloak` feature has been configured."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:56
#, no-wrap
msgid "Developing Service Applications"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:59
msgid "By default the Keycloak page can be used to support the development of a link:security-openid-connect[Quarkus OIDC service application]."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:61
#, no-wrap
msgid "Authorization Code Grant"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:64
msgid "If you set `quarkus.oidc.devui.grant.type=code` in `application.properties` (this is a default value) then an `authorization_code` grant will be used to acquire both access and ID tokens. Using this grant is recommended to emulate a typical flow where a `Single Page Application` acquires the tokens and uses them to access Quarkus services."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:66
msgid "First you will see an option to `Log into Single Page Application`:"
msgstr ""

#. type: Target for macro image
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:67
#, no-wrap
msgid "dev-ui-keycloak-sign-in-to-spa.png"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:70
msgid "Next, after you select this option, you will be redirected to Keycloak to authenticate, example, as `alice:alice` and then returned to the page representing the SPA:"
msgstr ""

#. type: Target for macro image
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:71
#, no-wrap
msgid "dev-ui-keycloak-test-service-from-spa.png"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:74
msgid "You can view the acquired access and ID tokens, for example:"
msgstr ""

#. type: Target for macro image
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:75
#, no-wrap
msgid "dev-ui-keycloak-decoded-tokens.png"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:78
msgid "This view shows the encoded JWT token on the left hand side and highlights the headers (red colour), payload/claims (green colour) and signature (blue colour). It also shows the decoded JWT token on the right hand side where you can see the header and claim names and their values."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:80
msgid "Next test the service with either the current access or ID token. SPA usually sends the access tokens to the application endpoints but there could be cases where the ID tokens are forwarded to the application frontends for them to be aware about the user who is currently logged into SPA."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:82
msgid "Finally you can select a `Log Out` image::dev-ui-keycloak-logout.png option if you'd like to log out and authenticate to Keycloak as a different user."
msgstr ""

#. type: Title =====
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:83
#, no-wrap
msgid "Test with Swagger UI or GrapghQL UI"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:86
msgid "You can avoid manually entering the service paths and test your service with `Swagger UI` or `GraphQL UI` if `quarkus-smallrye-openapi` and/or `quarkus-smallrye-graphql` are used in your project. For example, if you run `mvn quarkus-dev` with both `quarkus-smallrye-openapi` and `quarkus-smallrye-graphql` dependencies then you will see the following options after logging in into Keycloak:"
msgstr ""

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:87
#, no-wrap
msgid "Test"
msgstr ""

#. type: Target for macro image
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:87
#, no-wrap
msgid "dev-ui-keycloak-test-service-swaggerui-graphql.png"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:91
msgid "For example, clicking on `Swagger UI` will open `Swagger UI` in a new browser tab where you can test the service using the token acquired by Dev UI for Keycloak.  and `Swagger UI` will not try to re-authenticate again."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:93
msgid "Integration with `GraphQL UI` works in a similar way, the access token acquired by Dev UI for Keycloak will be used."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:97
msgid "You may need to register a redirect URI for the authorization code flow initiated by Dev UI for Keycloak to work because Keycloak may enforce that the authenticated users are redirected only to the configured redirect URI. It is recommended to do in production to avoid the users being redirected to the wrong endpoints which might happen if the correct `redirect_uri` parameter in the authentication request URI has been manipulated."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:99
msgid "If Keycloak does enforce it then you will see an authentication error informing you that the `redirect_uri` value is wrong."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:101
msgid "In this case select the `Keycloak Admin` option in the right top corner, login as `admin:admin`, select the test realm and the client which Dev UI for Keycloak is configured with and add `http://localhost:8080/q/dev/io.quarkus.quarkus-oidc/provider` to `Valid Redirect URIs`. If you used `-Dquarkus.http.port` when starting Quarkus then change `8080` to the value of `quarkus.http.port`."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:103
msgid "If the container is shared between multiple applications running on different ports then you will need to register `redirect_uri` values for each of these applications."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:105
msgid "You can set the `redirect_uri` value to `*` only for the test purposes, especially when the containers are shared between multiple applications."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:107
msgid "`*` `redirect_uri` value is set by `Dev Services for Keycloak` when it creates a default realm, if no custom realm is imported."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:109
#, no-wrap
msgid "Implicit Grant"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:112
msgid "If you set `quarkus.oidc.devui.grant.type=implicit` in `application.properties` then an `implicit` grant will be used to acquire both access and ID tokens. Use this grant for emulating a `Single Page Application` only if the authorization code grant does not work (for example, a client is configured in Keycloak to support an implicit grant, etc)."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:113
#, no-wrap
msgid "Password Grant"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:116
msgid "If you set `quarkus.oidc.devui.grant.type=password` in `application.properties` then you will see a screen like this one:"
msgstr ""

#. type: Target for macro image
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:117
#, no-wrap
msgid "dev-ui-keycloak-password-grant.png"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:120
msgid "Enter a registered user name, a relative service endpoint path, click on `Test Service` and you will see a status code such as `200`, `403`, `401` or `404` printed."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:122
msgid "You will also see in the Dev UI console something similar to:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:129
#, no-wrap
msgid ""
"2021-07-19 17:58:11,407 INFO  [io.qua.oid.dep.dev.key.KeycloakDevConsolePostHandler] (security-openid-connect-quickstart-dev.jar) (DEV Console action) Using password grant to get a token from 'http://localhost:32818/auth/realms/quarkus/protocol/openid-connect/token' for user 'alice' in realm 'quarkus' with client id 'quarkus-app'\n"
"2021-07-19 17:58:11,533 INFO  [io.qua.oid.dep.dev.key.KeycloakDevConsolePostHandler] (security-openid-connect-quickstart-dev.jar) (DEV Console action) Test token: eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJ6Z2tDazJQZ1JaYnVlVG5kcTFKSW1sVnNoZ2hhbWhtbnBNcXU0QUt5MnJBIn0.ey...\n"
"2021-07-19 17:58:11,536 INFO  [io.qua.oid.dep.dev.key.KeycloakDevConsolePostHandler] (security-openid-connect-quickstart-dev.jar) (DEV Console action) Sending token to 'http://localhost:8080/api/admin'\n"
"2021-07-19 17:58:11,674 INFO  [io.qua.oid.dep.dev.key.KeycloakDevConsolePostHandler] (security-openid-connect-quickstart-dev.jar) (DEV Console action) Result: 200\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:132
msgid "A token is acquired from Keycloak using a `password` grant and is sent to the service endpoint."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:133
#, no-wrap
msgid "Client Credentials Grant"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:136
msgid "If you set `quarkus.oidc.devui.grant.type=client` then a `client_credentials` grant will be used to acquire a token, with the page showing no `User` field in this case:"
msgstr ""

#. type: Target for macro image
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:137
#, no-wrap
msgid "dev-ui-keycloak-client-credentials-grant.png"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:140
msgid "You can test the service the same way as with the `Password` grant."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:141
#, no-wrap
msgid "Developing OpenId Connect Web App Applications"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:144
msgid "If you develop a link:security-openid-connect-web-authentication[Quarkus OIDC web-app application] then you should set `quarkus.oidc.application-type=web-app` in `application.properties` before starting the application."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:146
msgid "You will see a screen like this one:"
msgstr ""

#. type: Target for macro image
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:147
#, no-wrap
msgid "dev-ui-keycloak-sign-in-to-service.png"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:150
msgid "Set a relative service endpoint path, click on `Sign In To Service` and you will be redirected to Keycloak to enter a username and password in a new browser tab and get a response from the Quarkus application."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:151
#, no-wrap
msgid "Running the tests"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:154
msgid "You can run the tests against a Keycloak container started in a test mode in a link:continuous-testing[Continuous Testing] mode."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:157
msgid "It is also recommended to run the integration tests against Keycloak using `Dev Services for Keycloak`.  Please see link:security-openid-connect#integration-testing-keycloak-devservices[Testing OpenId Connect Service Applications with Dev Services] and link:security-openid-connect-web-authentication#integration-testing-keycloak-devservices[Testing OpenId Connect WebApp Applications with Dev Services] for more information."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:159
#, no-wrap
msgid "Keycloak Initialization"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:163
msgid "The `quay.io/keycloak/keycloak:15.0.2` image which contains a `Keycloak` distribution powered by `WildFly` is currently used to start a container by default.  `quarkus.keycloak.devservices.image-name` can be used to change the Keycloak image name. For example, set it to `quay.io/keycloak/keycloak-x:15.0.2` to use a `Keycloak-X` distribution powered by `Quarkus`. `Dev Services for Keycloak` will use a Keycloak-X based image by default soon."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:165
msgid "`Dev Services for Keycloak` will initialize a launched Keycloak server next."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:167
msgid "By default, the `quarkus`, `quarkus-app` client with a `secret` password, `alice` and `bob` users (with the passwords matching the names), and `user` and `admin` roles are created, with `alice` given both `admin` and `user` roles and `bob` - the `user` role."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:169
msgid "Usernames, secrets and their roles can be customized with `quarkus.keycloak.devservices.users` (the map which contains usernames and secrets) and `quarkus.keycloak.devservices.roles` (the map which contains user names and comma separated role values)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:171
msgid "`quarkus.oidc.client-id` and `quarkus.oidc.credentials.secret` can be used to customize the client id and secret."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:173
msgid "However it is likely your Keycloak configuration may be more complex and require setting more properties."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:175
msgid "This is why `quarkus.keycloak.devservices.realm-path` is always checked first before trying to initialize Keycloak with the default or configured realm, client, user and roles properties. If the realm file exists on the file system or classpath then only this realm will be used to initialize Keycloak."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:177
msgid "Also the Keycloak page offers an option to `Sign In To Keycloak To Configure Realms` using a `Keycloak Admin` option in the right top corner:"
msgstr ""

#. type: Target for macro image
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:178
#, no-wrap
msgid "dev-ui-keycloak-admin.png"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:181
msgid "Sign in to Keycloak as `admin:admin` in order to further customize the realm properties, create or import a new realm, export the realm."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:183
msgid "Note that at the moment, if you use a `Keycloak-X` image then auto-importing a custom realm file does not work - for now use a `Keycloak Admin` Dev UI option to import a custom realm if required. In this case you may also want to set `quarkus.keycloak.devservices.create-realm=false` for `Dev Services for Keycloak` to avoid creating a default realm."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:185
msgid "Note that even if you initialize Keycloak from a realm file, it is still needed to set `quarkus.keycloak.devservices.users` property if a `password` grant is used to acquire the tokens to test the OIDC `service` applications."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:186
#, no-wrap
msgid "Disable Dev Services for Keycloak"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:189
msgid "`Dev Services For Keycloak` will not be activated if either `quarkus.oidc.auth-server-url` is already initialized or the default OIDC tenant is disabled with `quarkus.oidc.tenant.enabled=false`, irrespectively of whether you work with Keycloak or not."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:191
msgid "If you prefer not to have a `Dev Services for Keycloak` container started or do not work with Keycloak then you can also disable this feature with `quarkus.keycloak.devservices.enabled=false` - it will only be necessary if you expect to start `quarkus:dev` without `quarkus.oidc.auth-server-url`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:194
msgid "The main Dev UI page will include an empty `OpenId Connect Card` when `Dev Services for Keycloak` is disabled and the `quarkus.oidc.auth-server-url` property has not been initialized:"
msgstr ""

#. type: Target for macro image
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:195
#, no-wrap
msgid "dev-ui-oidc-card.png"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:198
msgid "If `quarkus.oidc.auth-server-url` is already set then a generic OpenId Connect Dev Console which can be used with all OpenId Connect providers may be activated, please see <<dev-ui-all-oidc-providers,Dev UI for all OpenId Connect Providers>> for more information."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:200
#, no-wrap
msgid "Dev UI for all OpenId Connect Providers"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:203
msgid "If `quarkus.oidc.auth-server-url` points to an already started OpenId Connect provider (which can be Keycloak or other provider), `quarkus.oidc.auth-server-url` is set to `service` (which is a default value) and at least `quarkus.oidc.client-id` is set then `Dev UI for all OpenId Connect Providers` will be activated."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:205
msgid "Setting `quarkus.oidc.credentials.secret` will mostly likely be required for Keycloak and other providers for the authorization code flow initiated from Dev UI to complete, unless the client identified with `quarkus.oidc.client-id` is configured as a public client in your OpenId Connect provider's administration console."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:207
msgid "Run `mvn`quarkus:dev` and you will see the following message:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:213
#, no-wrap
msgid ""
"$ mvn quarkus:dev\n"
"...\n"
"2021-09-07 15:53:42,697 INFO  [io.qua.oid.dep.dev.OidcDevConsoleProcessor] (build-41) OIDC Dev Console: discovering the provider metadata at http://localhost:8180/auth/realms/quarkus/.well-known/openid-configuration\n"
"...\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:216
msgid "If the provider metadata discovery has been successful then, after you open the main link:http://localhost:8080/q/dev[Dev UI page], you will see the `OpenId Connect Card` page linking to `Dev Console`:"
msgstr ""

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:217
#, no-wrap
msgid "Generic"
msgstr ""

#. type: Target for macro image
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:217
#, no-wrap
msgid "dev-ui-oidc-devconsole-card.png"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:220
msgid "Follow the link and you'll be able log in to your provider, get the tokens and test the application. The experience will be the same as described in the <<keycloak-authorization-code-grant,Authorization Code Grant for Keycloak>> section, where `Dev Services for Keycloak` container has been started, especially if you work with Keycloak (please also pay attention to a `redirect_uri` note in that section)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:222
msgid "If you work with other providers then a Dev UI experience described in the <<keycloak-authorization-code-grant,Authorization Code Grant for Keycloak>> section might differ slightly. For example, an access token may not be in a JWT format so it won't be possible to show its internal content, though all providers should return an ID Token as JWT."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:226
msgid "The current access token is used by default to test the service with `Swagger UI` or `GrapghQL UI`. If the provider (other than Keycloak) returns a binary access token then it will be used with `Swagger UI` or `GrapghQL UI` only if this provider has a token introspection endpoint otherwise an `IdToken` which is always in a JWT format will be passed to `Swagger UI` or `GrapghQL UI`. In such cases you can verify with the manual Dev UI test that `401` will always be returned for the current binary access token. Also note that using `IdToken` as a fallback with either of these UIs is only possible with the authorization code flow."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:229
msgid "Some providers such as `Auth0` do not support a standard RP initiated logout so a logout option will also be hidden."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:231
msgid "At the moment `Dev UI for all OpenId Connect Providers` only supports an authorization code grant. More grants may be supported in the future, similarly to how it is done with `Dev Services for Keycloak`."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:232
#, no-wrap
msgid "Dev Services and UI Support for other OpenId Connect Providers"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:235
msgid "Your custom extension would need to extend `quarkus-oidc` and add the dependencies required to support your provider to the extension's `deployment` module only."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:237
msgid "The build step dealing with the `Dev Services` should additionally register two runtime properties into the \"io.quarkus.quarkus-oidc\" namespace: `oidcProviderName` (for example, `Google`) and `oidcProviderUrlBase` (for example: `mycompany.devservices-google`) for the `OpenId Connect Card` to link to the Dev UI page representing your provider, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:241
#, no-wrap
msgid "package io.quarkus.oidc.okta.runtime;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:243
#, no-wrap
msgid "import java.util.function.Supplier;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:245
#, no-wrap
msgid "import io.quarkus.runtime.annotations.Recorder;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:249
#, no-wrap
msgid ""
"// This simple recorder is the only code which will be located in the extension's `runtime` module\n"
"@Recorder\n"
"public class OktaDevServicesRecorder {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:252
#, no-wrap
msgid ""
"    public Supplier<String> getProviderName() {\n"
"        return new Supplier<String>() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:259
#, no-wrap
msgid ""
"            @Override\n"
"            public String get() {\n"
"                return \"OKTA\";\n"
"            }\n"
"        };\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:262
#, no-wrap
msgid ""
"    public Supplier<String> getProviderUrlBase() {\n"
"        return new Supplier<String>() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:270
#, no-wrap
msgid ""
"            @Override\n"
"            public String get() {\n"
"                return \"io.quarkus\" + \".\" + \"quarkus-oidc-okta\";\n"
"            }\n"
"        };\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:273
#, no-wrap
msgid "package io.quarkus.oidc.okta.deployment.devservices;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:275
#, no-wrap
msgid "import static io.quarkus.deployment.annotations.ExecutionTime.RUNTIME_INIT;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:277
#, no-wrap
msgid "import java.util.Optional;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:286
#, no-wrap
msgid ""
"import io.quarkus.deployment.IsDevelopment;\n"
"import io.quarkus.deployment.annotations.BuildProducer;\n"
"import io.quarkus.deployment.annotations.BuildStep;\n"
"import io.quarkus.deployment.annotations.Consume;\n"
"import io.quarkus.deployment.annotations.Record;\n"
"import io.quarkus.deployment.builditem.RuntimeConfigSetupCompleteBuildItem;\n"
"import io.quarkus.devconsole.spi.DevConsoleRouteBuildItem;\n"
"import io.quarkus.devconsole.spi.DevConsoleRuntimeTemplateInfoBuildItem;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:288
#, no-wrap
msgid "public class OktaDevConsoleProcessor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:302
#, no-wrap
msgid ""
"    @BuildStep(onlyIf = IsDevelopment.class)\n"
"    @Record(value = RUNTIME_INIT)\n"
"    public void setOidcProviderProperties(BuildProducer<DevConsoleRuntimeTemplateInfoBuildItem> provider,\n"
"            OktaDevServicesRecorder recorder,\n"
"            Optional<DevServicesConfigBuildItem> configProps) {\n"
"        if (configProps.isPresent()) {\n"
"            provider.produce(new DevConsoleRuntimeTemplateInfoBuildItem(\"io.quarkus\", \"quarkus-oidc\", \"oidcProviderName\",\n"
"                    recorder.getProviderName()));\n"
"            provider.produce(new DevConsoleRuntimeTemplateInfoBuildItem(\"io.quarkus\", \"quarkus-oidc\", \"oidcProviderUrlBase\",\n"
"                    recorder.getProviderUrlBase()));\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:306
msgid "Additionally, the extension should produce a `io.quarkus.oidc.deployment.devservices.OidcProviderBuildItem` to disable the default `Dev Services for Keycloak`, instead of the users having to type `quarkus.keycloak.devservices.enabled=false`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:308
msgid "Please follow the link:dev-ui[Dev UI] tutorial as well as check the `extensions/oidc/deployment` sources for more ideas."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:309
#, no-wrap
msgid "Non Application Root Path Considerations"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:312
msgid "This document refers to the `http://localhost:8080/q/dev` Dev UI URL in several places where `q` is a default non application root path. If you customize `quarkus.http.root-path` and/or `quarkus.http.non-application-root-path` properties then replace `q` accordingly, please see https://quarkus.io/blog/path-resolution-in-quarkus/[Path Resolution in Quarkus] for more information."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:313
#, no-wrap
msgid "References"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:316
msgid "link:dev-ui[Dev UI]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:317
msgid "https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:318
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:319
msgid "link:security-openid-connect[Quarkus - Using OpenID Connect to Protect Service Applications using Bearer Token Authorization]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:320
msgid "link:security-openid-connect-web-authentication[Quarkus - Using OpenID Connect to Protect Web Applications using Authorization Code Flow]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-dev-services.adoc:320
msgid "link:security[Quarkus Security]"
msgstr ""
