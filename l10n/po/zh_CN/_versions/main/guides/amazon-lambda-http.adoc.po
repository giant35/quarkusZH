# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-07-10 05:19+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:6
#, no-wrap
msgid "Quarkus - Amazon Lambda with RESTEasy, Undertow, or Vert.x Web"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:14
msgid "With Quarkus you can deploy your favorite Java HTTP frameworks as Amazon Lambda's using either the https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api.html[AWS Gateway HTTP API] or https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-rest-api.html[AWS Gateway REST API].  This means that you can deploy your microservices written with RESTEasy (JAX-RS), Undertow (servlet), Vert.x Web, link:funqy-http[Funqy HTTP] or any other Quarkus HTTP framework as an AWS Lambda."
msgstr "Quarkusでは、 link:https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api.html[AWS Gateway HTTP API]または link:https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-rest-api.html[AWS Gateway REST] APIのいずれかを使用して、お気に入りのJava HTTPフレームワークをAmazon Lambdaとしてデプロイできます。つまり、RESTEasy（JAX-RS）、Undertow（サーブレット）、Vert.x Web、 link:funqy-http[Funqy HTTP]、その他のQuarkusのHTTPフレームワークで書かれたマイクロサービスを、AWS Lambdaとしてデプロイすることができます。"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:17
msgid "You can deploy your Lambda as a pure Java jar, or you can compile your project to a native image and deploy that for a smaller memory footprint and startup time.  Our integration also generates SAM deployment files that can be consumed by https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/what-is-sam.html[Amazon's SAM framework]."
msgstr "Lambda を純粋な Java jar としてデプロイすることもできますし、プロジェクトをネイティブイメージにコンパイルしてデプロイすることで、より少ないメモリーフットプリントと起動時間を実現することもできます。また、統合により、 https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/what-is-sam.html[AmazonのSAM framework] で使用できるSAMデプロイメントファイルも生成されます。"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:21
msgid "Quarkus has a different extension for each Gateway API.  The HTTP Gateway API is implemented within the `quarkus-amazon-lambda-http` extension.  The REST Gateway API is implemented within the `quarkus-amazon-lambda-rest` extension.  If you are confused on which Gateway product to use, Amazon has a https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-vs-rest.html[great guide] to help you navigate this decision."
msgstr "Quarkusでは、ゲートウェイAPIごとに異なるエクステンションを用意しています。HTTP Gateway APIは、 `quarkus-amazon-lambda-http` のエクステンションで実装されています。REST Gateway APIは、 `quarkus-amazon-lambda-rest` のエクステンションで実装されています。どのGateway製品を使用すべきか迷っている場合は、Amazonが決断を助ける為に link:https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-vs-rest.html[素晴らしいガイド]を提供しています。"

#. type: Title ==
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:25
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:28
msgid "To complete this guide, you need:"
msgstr "このガイドを完成させるには、以下が必要です:"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:30
msgid "less than 30 minutes"
msgstr "三十分以内"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:31
msgid "JDK 11 (AWS requires JDK 1.8 or 11)"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:32
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:33
msgid "https://aws.amazon.com[An Amazon AWS account]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:34
msgid "https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI]"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:35
#, no-wrap
msgid "Getting Started"
msgstr "はじめに"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:39
msgid "This guide walks you through generating an example Java project via a maven archetype.  Later on it walks through the structure of the project so you can adapt any existing projects you have to use Amazon Lambda."
msgstr "このガイドでは、mavenのアーキタイプを介してJavaプロジェクトのサンプルを生成する方法を説明します。その後、既存のプロジェクトを Amazon Lambda で利用できるようにするために、プロジェクトの構造を説明します。"

#. type: Title ==
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:40
#, no-wrap
msgid "Installing AWS bits"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:44
msgid "Installing all the AWS bits is probably the most difficult thing about this guide.  Make sure that you follow all the steps for installing AWS SAM CLI."
msgstr "AWSのすべてのツールをインストールすることは、おそらくこのガイドでは最も難しいことです。AWS CLIをインストールするためのすべての手順に従っていることを確認してください。"

#. type: Title ==
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:45
#, no-wrap
msgid "Creating the Maven Deployment Project"
msgstr "デプロイ用のMavenプロジェクトを作成する"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:48
msgid "Create the Quarkus AWS Lambda maven project using our Maven Archetype."
msgstr "Maven Archetypeを使用してQuarkus AWS Lambda Mavenプロジェクトを作成します。"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:50
msgid "If you want to use the AWS Gateway HTTP API, generate your project with this script:"
msgstr "AWS Gateway HTTP APIを使用する場合は、このスクリプトでプロジェクトを生成します。"

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:56
#, no-wrap
msgid ""
"mvn archetype:generate \\\n"
"       -DarchetypeGroupId=io.quarkus \\\n"
"       -DarchetypeArtifactId=quarkus-amazon-lambda-http-archetype \\\n"
"       -DarchetypeVersion={quarkus-version}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:59
msgid "If you want to use the AWS Gateway REST API, generate your project with this script:"
msgstr "AWS Gateway REST APIを使用する場合は、このスクリプトでプロジェクトを生成します。"

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:65
#, no-wrap
msgid ""
"mvn archetype:generate \\\n"
"       -DarchetypeGroupId=io.quarkus \\\n"
"       -DarchetypeArtifactId=quarkus-amazon-lambda-rest-archetype \\\n"
"       -DarchetypeVersion={quarkus-version}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:68
#, no-wrap
msgid "Build and Deploy"
msgstr "ビルドとデプロイ"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:71
msgid "Build the project using maven."
msgstr "mavenを使ってプロジェクトを構築します。"

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:75
#, no-wrap
msgid "./mvnw clean install\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:80
msgid "This will compile the code and run the unit tests included within the generated project.  Unit testing is the same as any other Java project and does not require running on Amazon.  Quarkus dev-mode is also available with this extension."
msgstr "これでコードがコンパイルされ、生成されたプロジェクト内に含まれるユニットテストが実行されます。ユニットテストは他のJavaプロジェクトと同じで、Amazonで実行する必要はありません。Quarkus dev-modeもこのエクステンションで利用できます。"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:83
msgid "If you want to build for native too, make sure you have GraalVM installed correctly and just add a `native` property to the build"
msgstr "ネイティブ用にもビルドしたい場合は、GraalVMが正しくインストールされていることを確認し、 `native` プロパティーをビルドに追加してください。"

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:87
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:157
#, no-wrap
msgid "./mvnw clean install -Dnative\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:92
msgid "If you are building on a non-Linux system, you will need to also pass in a property instructing quarkus to use a docker build as Amazon Lambda requires linux binaries.  You can do this by passing this property to your Maven build: `-Dnative-image.docker-build=true`, or for Gradle: `--docker-build=true`.  This requires you to have docker installed locally, however."
msgstr "非 Linux システムでビルドしている場合は、Amazon Lambda が linux バイナリーを必要とするため、quarkus に docker ビルドを使用するように指示するプロパティーを渡す必要があります。これは、このプロパティーを Maven ビルドに渡すことで行うことができます: `-Dnative-image.docker-build=true` , または Gradle の場合: `--docker-build=true` .ただし、この場合はローカルに docker がインストールされている必要があります。"

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:96
#, no-wrap
msgid "./mvnw clean install -Dnative -Dnative-image.docker-build=true\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:98
#, no-wrap
msgid "Extra Build Generated Files"
msgstr "ビルド時に追加生成されるファイル"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:102
msgid "After you run the build, there are a few extra files generated by the quarkus lambda extension you are using.  These files are in the the build directory: `target/` for maven, `build/` for gradle."
msgstr "ビルドを実行すると、 quarkus lambda エクステンションで生成されるいくつかの追加ファイルがあります。これらのファイルはビルドディレクトリーにあります: mavenなら `target/` 、gradleなら `build/` です。"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:104
msgid "`function.zip` - lambda deployment file"
msgstr "`function.zip` - Lambda デプロイファイル"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:105
msgid "`sam.jvm.yaml` - sam cli deployment script"
msgstr "`sam.jvm.yaml` - SAM CLI デプロイメントスクリプト"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:106
msgid "`sam.native.yaml` - sam cli deployment script for native"
msgstr "`sam.native.yaml` - ネイティブ用の SAM CLI デプロイメントスクリプト"

#. type: Title ==
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:107
#, no-wrap
msgid "Simulate Amazon Lambda Deployment"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:111
msgid "The AWS SAM CLI allows you to run your lambda's locally on your laptop in a simulated Lambda environment.  This requires docker to be installed (see their install docs).  After you have built your maven project, execute this command"
msgstr "AWS SAM CLIを使うと、ラップトップ上でLambdaをシミュレートした環境でローカルに実行することができます。このためにはdockerをインストールする必要があります(インストールドキュメントを参照してください)。mavenプロジェクトをビルドした後、以下のコマンドを実行してください"

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:115
#, no-wrap
msgid "sam local start-api --template target/sam.jvm.yaml\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:119
msgid "This will start a docker container that mimics Amazon's Lambda's deployment environment.  Once the environment is started you can invoke the example lambda in your browser by going to"
msgstr "これでAmazonのLambdaのデプロイ環境を模したdockerコンテナーが起動します。環境が起動したら、ブラウザで以下を開くとサンプルの Lambda を実行できます。"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:121
msgid "http://127.0.0.1:3000/hello"
msgstr "http://127.0.0.1:3000/hello"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:124
msgid "In the console you'll see startup messages from the lambda.  This particular deployment starts a JVM and loads your lambda as pure Java."
msgstr "コンソールには、ラムダからの起動メッセージが表示されます。この特定のデプロイメントでは、JVM を起動し、純粋な Java として Lambda をロードします。"

#. type: Title ==
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:126
#, no-wrap
msgid "Deploy to AWS"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:131
#, no-wrap
msgid "sam deploy -t target/sam.jvm.yaml -g\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:135
msgid "Answer all the questions and your lambda will be deployed and the necessary hooks to the API Gateway will be set up. If everything deploys successfully, the root URL of your microservice will be output to the console.  Something like this:"
msgstr "すべての質問に答えると、 Lambda がデプロイされ、API Gatewayへの必要なフックが設定されます。すべてが正常にデプロイされると、マイクロサービスのルート URL がコンソールに出力されます。このような感じです。"

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:140
#, no-wrap
msgid ""
"Key                 LambdaHttpApi\n"
"Description         URL for application\n"
"Value               https://234asdf234as.execute-api.us-east-1.amazonaws.com/\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:143
msgid "The `Value` attribute is the root URL for your lambda. Copy it to your browser and add `hello` at the end."
msgstr "`Value` 属性は Lambda のルート URL です。これをブラウザにコピーして、最後に `hello` を追加します。"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:149
msgid "Responses for binary types will be automatically encoded with base64.  This is different than the behavior using `quarkus:dev` which will return the raw bytes.  Amazon's API has additional restrictions requiring the base64 encoding.  In general, client code will automatically handle this encoding but in certain custom situations, you should be aware you may need to manually manage that encoding."
msgstr "バイナリー型のレスポンスは自動的にbase64でエンコードされます。これは、生のバイトを返す `quarkus:dev` を使用した動作とは異なります。Amazon の API には、base64 エンコーディングを必要とする追加の制限があります。一般的に、クライアントコードは自動的にこのエンコーディングを処理しますが、特定のカスタムな状況では、手動でエンコーディングを管理する必要があるかもしれないことを認識しておく必要があります。"

#. type: Title ==
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:150
#, no-wrap
msgid "Deploying a native executable"
msgstr "ネイティブ実行ファイルのデプロイ"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:153
msgid "To deploy a native executable, you must build it with Graal."
msgstr "ネイティブ実行ファイルをデプロイするには、Graalを使ってビルドする必要があります。"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:160
msgid "You can then test the executable locally with sam local"
msgstr "その後、ローカルで sam local を使って実行ファイルをテストすることができます。"

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:164
#, no-wrap
msgid "sam local start-api --template target/sam.native.yaml\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:167
msgid "To deploy to AWS Lambda:"
msgstr "AWS Lambda へのデプロイ"

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:170
#, no-wrap
msgid "sam deploy -t target/sam.native.yaml -g\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:172
#, no-wrap
msgid "Examine the POM"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:177
msgid "There is nothing special about the POM other than the inclusion of the `quarkus-amazon-lambda-http` extension (if you are deploying an AWS Gateway HTTP API) or the `quarkus-amazon-lambda-rest` extension (if you are deploy an AWS Gateway REST API).  These extensions automatically generate everything you might need for your lambda deployment."
msgstr "POM には `quarkus-amazon-lambda-http` エクステンション(AWS Gateway HTTP APIでデプロイしている場合) か `quarkus-amazon-lambda-rest` エクステンション( AWS Gateway REST APIでデプロイしている場合)が依存関係として含まれている以外に特別なことは何もありません。これらのエクステンションは Lambda のデプロイに必要なものをすべて自動的に生成します。"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:181
msgid "Also, at least in the generated maven archetype `pom.xml`, the `quarkus-resteasy`, `quarkus-vertx-web`, and `quarkus-undertow` dependencies are all optional.  Pick which http framework(s) you want to use (JAX-RS, Vertx Web, and/or Servlet) and remove the other dependencies to shrink your deployment."
msgstr "また、少なくとも生成された maven のアーキタイプ `pom.xml` , `quarkus-resteasy` , `quarkus-vertx-web` , `quarkus-undertow` の依存関係はすべてオプションです。使用したい http フレームワーク (JAX-RS、Vertx Web、および/または Servlet) を選択し、他の依存関係を削除してデプロイを縮小します。"

#. type: Title ===
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:182
#, no-wrap
msgid "Examine sam.yaml"
msgstr "sam.yaml を調べる"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:186
msgid "The `sam.yaml` syntax is beyond the scope of this document.  There's a couple of things that must be highlighted just in case you are going to craft your own custom `sam.yaml` deployment files."
msgstr "`sam.yaml` の構文はこのドキュメントの範囲を超えています。しかし、カスタムの `sam.yaml` デプロイメントファイルを作成しようとしている場合、幾つかの強調しなければならないことがあります。"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:189
msgid "The first thing to note is that for pure Java lambda deployments require a specific handler class.  Do not change the Lambda handler name."
msgstr "最初に注意することは、純粋なJavaラムダデプロイメントには特定のハンドラークラスが必要であるということです。 Lambdaハンドラー名は変更しないでください。"

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:195
#, no-wrap
msgid ""
"     Properties:\n"
"        Handler: io.quarkus.amazon.lambda.runtime.QuarkusStreamHandler::handleRequest\n"
"        Runtime: java11\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:198
msgid "This handler is a bridge between the lambda runtime and the Quarkus HTTP framework you are using (JAX-RS, Servlet, etc.)"
msgstr "このハンドラは、ラムダランタイムと、使用しているQuarkus HTTPフレームワーク（JAX-RS、Servletなど）との間のブリッジとなります。"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:201
msgid "If you want to go native, there's an environment variable that must be set for native GraalVM deployments.  If you look at `sam.native.yaml` you'll see this:"
msgstr "ネイティブを利用する場合は、ネイティブのGraalVMデプロイメント用に設定する必要のある環境変数があります。 `sam.native.yaml` を見ると、次のことがわかります。"

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:207
#, no-wrap
msgid ""
"        Environment:\n"
"          Variables:\n"
"            DISABLE_SIGNAL_HANDLERS: true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:210
msgid "This environment variable resolves some incompatibilities between Quarkus and the Amazon Lambda Custom Runtime environment."
msgstr "この環境変数は、QuarkusとAmazon Lambdaカスタムランタイム環境との間のいくつかの非互換性を解決します。"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:215
msgid "Finally, there is one specific thing for AWS Gateway REST API deployments.  That API assumes that HTTP response bodies are text unless you explicitly tell it which media types are binary through configuration.  To make things easier, the Quarkus extension forces a binary (base 64) encoding of all HTTP response messages and the `sam.yaml` file must configure the API Gateway to assume all media types are binary:"
msgstr "最後に、AWS Gateway RESTAPIへのデプロイに固有のことが一つあります。そのAPIは、設定でどのメディアタイプがバイナリーであるかを明示的に指定しない限り、HTTPレスポンスボディはテキストであることを想定しています。より簡単にするために、QuarkusエクステンションはすべてのHTTP応答メッセージのバイナリー(ベース64)エンコーディングを強制します。 `sam.yaml` ファイルでは、すべてのメディアタイプがバイナリーであると仮定するようにAPI Gatewayを設定する必要があります。"

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:223
#, no-wrap
msgid ""
"  Globals:\n"
"    Api:\n"
"      EndpointConfiguration: REGIONAL\n"
"      BinaryMediaTypes:\n"
"        - \"*/*\"\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:225
#, no-wrap
msgid "Injectable AWS Context Variables"
msgstr "注入可能なAWSコンテキスト変数"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:229
msgid "If you are using Resteasy and JAX-RS, you can inject various AWS Context variables into your JAX-RS resource classes using the JAX-RS `@Context` annotation."
msgstr "ResteasyとJAX-RSを使用している場合、JAX-RS `@Context` アノテーションを使用して、様々なAWS Context変数をJAX-RSリソースクラスに注入することができます。"

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:232
msgid "For the AWS HTTP API you can inject the AWS variables `com.amazonaws.services.lambda.runtime.Context` and `com.amazonaws.services.lambda.runtime.events.APIGatewayV2HTTPEvent`.  Here is an example:"
msgstr "AWS HTTP APIでは、AWS変数 `com.amazonaws.services.lambda.runtime.Context` および `com.amazonaws.services.lambda.runtime.events.APIGatewayV2HTTPEvent` を注入することができます。以下はその例です。"

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:237
#, no-wrap
msgid ""
"import javax.ws.rs.core.Context;\n"
"import com.amazonaws.services.lambda.runtime.events.APIGatewayV2HTTPEvent;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:243
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:268
#, no-wrap
msgid ""
"@Path(\"/myresource\")\n"
"public class MyResource {\n"
"    @GET\n"
"    public String ctx(@Context com.amazonaws.services.lambda.runtime.Context ctx) { }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:246
#, no-wrap
msgid ""
"    @GET\n"
"    public String event(@Context APIGatewayV2HTTPEvent event) { }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:249
#, no-wrap
msgid ""
"    @GET\n"
"    public String requestContext(@Context APIGatewayV2HTTPEvent.RequestContext req) { }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:252
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:276
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:256
msgid "For the AWS REST API you can inject the AWS variables `com.amazonaws.services.lambda.runtime.Context` and `io.quarkus.amazon.lambda.http.model.AwsProxyRequestContext`.  Here is an example:"
msgstr "AWS REST APIでは、AWS変数 `com.amazonaws.services.lambda.runtime.Context` と `io.quarkus.amazon.lambda.http.model.AwsProxyRequestContext` を注入することができます。以下はその例です。"

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:262
#, no-wrap
msgid ""
"import javax.ws.rs.core.Context;\n"
"import io.quarkus.amazon.lambda.http.model.AwsProxyRequestContext;\n"
"import io.quarkus.amazon.lambda.http.model.AwsProxyRequest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:271
#, no-wrap
msgid ""
"    @GET\n"
"    public String reqContext(@Context AwsProxyRequestContext req) { }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:274
#, no-wrap
msgid ""
"    @GET\n"
"    public String req(@Context AwsProxyRequest req) { }\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:278
#, no-wrap
msgid "Tracing with AWS XRay and GraalVM"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:283
msgid "If you are building native images, and want to use https://aws.amazon.com/xray[AWS X-Ray Tracing] with your lambda you will need to include `quarkus-amazon-lambda-xray` as a dependency in your pom.  The AWS X-Ray library is not fully compatible with GraalVM so we had to do some integration work to make this work."
msgstr "ネイティブイメージをビルドしていて、Lambda で link:https://aws.amazon.com/xray[AWS X-Ray Tracing] を使いたい場合は、 `quarkus-amazon-lambda-xray` を依存関係として pom に含める必要があります。AWS X-Ray ライブラリは GraalVM との完全な互換性がないため、これを動作させるためにいくつかの統合作業をしなければなりませんでした。"

#. type: Title ==
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:284
#, no-wrap
msgid "Security Integration"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:289
msgid "When you invoke an HTTP request on the API Gateway, the Gateway turns that HTTP request into a JSON event document that is forwarded to a Quarkus Lambda.  The Quarkus Lambda parses this json and converts in into an internal representation of an HTTP request that can be consumed by any HTTP framework Quarkus supports (JAX-RS, servlet, Vert.x Web)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:296
msgid "API Gateway supports many different ways to securely invoke on your HTTP endpoints that are backed by Lambda and Quarkus.  If you enable it, Quarkus will automatically parse relevant parts of the https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-lambda.html[event json document] and look for security based metadata and register a `java.security.Principal` internally that can be looked up in JAX-RS by injecting a `javax.ws.rs.core.SecurityContext`, via `HttpServletRequest.getUserPrincipal()` in servlet, and `RouteContext.user()` in Vert.x Web.  If you want more security information, the `Principal` object can be typecast to a class that will give you more information."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:298
msgid "To enable this security feature, add this to your `application.properties` file:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:300
#, no-wrap
msgid "quarkus.lambda-http.enable-security=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:304
msgid "Here's how its mapped:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:305
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:334
#, no-wrap
msgid "HTTP `quarkus-amazon-lambda-http`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:308
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:318
#, no-wrap
msgid "Auth Type"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:308
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:318
#, no-wrap
msgid "Principal Class"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:309
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:319
#, no-wrap
msgid "Json path of Principal Name"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:309
#, no-wrap
msgid "Cognito JWT"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:309
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:319
#, no-wrap
msgid "`io.quarkus.amazon.lambda.http.CognitoPrincipal`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:310
#, no-wrap
msgid "`requestContext.authorizer.jwt.claims.cognito:username`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:310
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:320
#, no-wrap
msgid "IAM"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:310
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:320
#, no-wrap
msgid "`io.quarkus.amazon.lambda.http.IAMPrincipal`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:311
#, no-wrap
msgid "`requestContext.authorizer.iam.userId`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:311
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:321
#, no-wrap
msgid "Custom Lambda"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:311
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:321
#, no-wrap
msgid "`io.quarkus.amazon.lambda.http.CustomPrincipal`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:313
#, no-wrap
msgid "`requestContext.authorizer.lambda.principalId`"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:315
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:375
#, no-wrap
msgid "REST `quarkus-amazon-lambda-rest`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:319
#, no-wrap
msgid "Cognito"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:320
#, no-wrap
msgid "`requestContext.authorizer.claims.cognito:username`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:321
#, no-wrap
msgid "`requestContext.identity.user`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:323
#, no-wrap
msgid "`requestContext.authorizer.principalId`"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:325
#, no-wrap
msgid "Custom Security Integration"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:333
msgid "The default support for AWS security only maps the principal name to Quarkus security APIs and does nothing to map claims or roles or permissions.  You have can full control how security metadata in the lambda HTTP event is mapped to Quarkus security APIs using implementations of the `io.quarkus.amazon.lambda.http.LambdaIdentityProvider` interface.  By implementing this interface, you can do things like define role mappings for your principal or publish additional attributes provided by IAM or Cognito or your Custom Lambda security integration."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:338
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:379
#, no-wrap
msgid "package io.quarkus.amazon.lambda.http;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:348
#, no-wrap
msgid ""
"/**\n"
" * Helper interface that removes some boilerplate for creating\n"
" * an IdentityProvider that processes APIGatewayV2HTTPEvent\n"
" */\n"
"public interface LambdaIdentityProvider extends IdentityProvider<LambdaAuthenticationRequest> {\n"
"    @Override\n"
"    default public Class<LambdaAuthenticationRequest> getRequestType() {\n"
"        return LambdaAuthenticationRequest.class;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:358
#, no-wrap
msgid ""
"    @Override\n"
"    default Uni<SecurityIdentity> authenticate(LambdaAuthenticationRequest request, AuthenticationRequestContext context) {\n"
"        APIGatewayV2HTTPEvent event = request.getEvent();\n"
"        SecurityIdentity identity = authenticate(event);\n"
"        if (identity == null) {\n"
"            return Uni.createFrom().optional(Optional.empty());\n"
"        }\n"
"        return Uni.createFrom().item(identity);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:370
#, no-wrap
msgid ""
"    /**\n"
"     * You must override this method unless you directly override\n"
"     * IdentityProvider.authenticate\n"
"     *\n"
"     * @param event\n"
"     * @return\n"
"     */\n"
"    default SecurityIdentity authenticate(APIGatewayV2HTTPEvent event) {\n"
"        throw new IllegalStateException(\"You must override this method or IdentityProvider.authenticate\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:374
msgid "For HTTP, the important method to override is `LambdaIdentityProvider.authenticate(APIGatewayV2HTTPEvent event)`.  From this you will allocate a SecurityIdentity based on how you want to map security data from `APIGatewayV2HTTPEvent`"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:381
#, no-wrap
msgid "import java.util.Optional;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:383
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:424
#, no-wrap
msgid "import com.amazonaws.services.lambda.runtime.events.APIGatewayV2HTTPEvent;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:389
#, no-wrap
msgid ""
"import io.quarkus.amazon.lambda.http.model.AwsProxyRequest;\n"
"import io.quarkus.security.identity.AuthenticationRequestContext;\n"
"import io.quarkus.security.identity.IdentityProvider;\n"
"import io.quarkus.security.identity.SecurityIdentity;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:396
#, no-wrap
msgid ""
"/**\n"
" * Helper interface that removes some boilerplate for creating\n"
" * an IdentityProvider that processes APIGatewayV2HTTPEvent\n"
" */\n"
"public interface LambdaIdentityProvider extends IdentityProvider<LambdaAuthenticationRequest> {\n"
"...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:408
#, no-wrap
msgid ""
"    /**\n"
"     * You must override this method unless you directly override\n"
"     * IdentityProvider.authenticate\n"
"     *\n"
"     * @param event\n"
"     * @return\n"
"     */\n"
"    default SecurityIdentity authenticate(AwsProxyRequest event) {\n"
"        throw new IllegalStateException(\"You must override this method or IdentityProvider.authenticate\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:412
msgid "For REST, the important method to override is `LambdaIdentityProvider.authenticate(AwsProxyRequest event)`.  From this you will allocate a SecurityIdentity based on how you want to map security data from `AwsProxyRequest`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:414
msgid "Your implemented provider must be a CDI bean.  Here's an example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:418
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:449
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:420
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:451
#, no-wrap
msgid "import java.security.Principal;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:422
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:453
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr "import javax.enterprise.context.ApplicationScoped;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:429
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:460
#, no-wrap
msgid ""
"import io.quarkus.amazon.lambda.http.LambdaIdentityProvider;\n"
"import io.quarkus.security.identity.SecurityIdentity;\n"
"import io.quarkus.security.runtime.QuarkusPrincipal;\n"
"import io.quarkus.security.runtime.QuarkusSecurityIdentity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:442
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CustomSecurityProvider implements LambdaIdentityProvider {\n"
"    @Override\n"
"    public SecurityIdentity authenticate(APIGatewayV2HTTPEvent event) {\n"
"        if (event.getHeaders() == null || !event.getHeaders().containsKey(\"x-user\"))\n"
"            return null;\n"
"        Principal principal = new QuarkusPrincipal(event.getHeaders().get(\"x-user\"));\n"
"        QuarkusSecurityIdentity.Builder builder = QuarkusSecurityIdentity.builder();\n"
"        builder.setPrincipal(principal);\n"
"        return builder.build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:445
msgid "Here's the same example, but with the AWS Gateway REST API:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:455
#, no-wrap
msgid "import io.quarkus.amazon.lambda.http.model.AwsProxyRequest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:473
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CustomSecurityProvider implements LambdaIdentityProvider {\n"
"    @Override\n"
"    public SecurityIdentity authenticate(AwsProxyRequest event) {\n"
"        if (event.getMultiValueHeaders() == null || !event.getMultiValueHeaders().containsKey(\"x-user\"))\n"
"            return null;\n"
"        Principal principal = new QuarkusPrincipal(event.getMultiValueHeaders().getFirst(\"x-user\"));\n"
"        QuarkusSecurityIdentity.Builder builder = QuarkusSecurityIdentity.builder();\n"
"        builder.setPrincipal(principal);\n"
"        return builder.build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:477
msgid "Quarkus should automatically discover this implementation and use it instead of the default implementation discussed earlier."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:478
#, no-wrap
msgid "Simple SAM Local Principal"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/amazon-lambda-http.adoc:482
msgid "If you are testing your application with `sam local` you can hardcode a principal name to use when your application runs by setting the `QUARKUS_AWS_LAMBDA_FORCE_USER_NAME` environment variable"
msgstr ""
