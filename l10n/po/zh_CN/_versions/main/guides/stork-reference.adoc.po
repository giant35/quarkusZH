# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-01-07 01:10+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/stork-reference.adoc:6
#, no-wrap
msgid "Stork Reference Guide"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork-reference.adoc:12
msgid "This guide is the companion from the xref:stork.adoc[Stork Getting Started Guide].  It explains the configuration and usage of SmallRye Stork integration in Quarkus."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/stork-reference.adoc:13
#, no-wrap
msgid "Supported clients"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork-reference.adoc:16
msgid "The current integration of Stork supports:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork-reference.adoc:18
msgid "the Reactive REST Client"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork-reference.adoc:19
msgid "the gRPC clients"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork-reference.adoc:21
msgid "Warning: The gRPC client integration does not support statistic-based load balancers."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/stork-reference.adoc:22
#, no-wrap
msgid "Available service discovery and selection"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork-reference.adoc:25
msgid "Check the https://smallrye.io/smallrye-stork[SmallRye Stork website] to find more about the provided service discovery and selection."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/stork-reference.adoc:26
#, no-wrap
msgid "Using Stork in Kubernetes"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork-reference.adoc:30
msgid "Stork provides a service discovery support for Kubernetes, which goes beyond what Kubernetes provides by default.  It looks for all the pods backing up a Kubernetes service, but instead of applying a round-robin (as Kubernetes would do), it gives you the option to select the pod using a Stork load-balancer."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork-reference.adoc:32
msgid "To use this feature, add the following dependency to your project:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork-reference.adoc:39
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.smallrye.stork</groupId>\n"
"    <artifactId>smallrye-stork-service-discovery-kubernetes</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork-reference.adoc:42
msgid "For each service expected to be exposed as a Kubernetes Service, configure the lookup:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork-reference.adoc:47
#, no-wrap
msgid ""
"stork.my-service.service-discovery=kubernetes\n"
"stork.my-service.service-discovery.k8s-namespace=my-namespace\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork-reference.adoc:51
msgid "Stork looks for the Kubernetes Service with the given name (`my-service` in the previous example) in the specified namespace.  Instead of using the Kubernetes Service IP directly and let Kubernetes handle the selection and balancing, Stork inspects the service and retrieves the list of pods providing the service. Then, it can select the instance."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/stork-reference.adoc:52
#, no-wrap
msgid "Implementing a custom service discovery"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork-reference.adoc:56
msgid "Stork is extensible, and you can implement your own service discovery mechanism.  Stork uses the SPI mechanism for loading implementations matching the Service Discovery Provider interface."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/stork-reference.adoc:57
#: upstream/_versions/main/guides/stork-reference.adoc:181
#, no-wrap
msgid "Dependency"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork-reference.adoc:59
msgid "To implement your Service Discovery Provider, make sure your project depends on:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork-reference.adoc:66
#: upstream/_versions/main/guides/stork-reference.adoc:190
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupI>io.smallrye.stork</groupI>\n"
"    <artifactId>smallrye-stork-api</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/stork-reference.adoc:68
#, no-wrap
msgid "Implementing a service discovery provider"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork-reference.adoc:71
msgid "Stork uses the SPI mechanism for loading implementations matching the Service Discovery Provider interface during its initialization."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork-reference.adoc:75
msgid "The custom provider is a factory that creates an `io.smallrye.stork.ServiceDiscovery` instance for each configured service using this service discovery provider.  A type, for example, `acme` identifies each provider.  This type is used in the configuration to reference the provider:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork-reference.adoc:79
#, no-wrap
msgid "stork.my-service.service-discovery=acme\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork-reference.adoc:82
msgid "The first step consists of implementing the `io.smallrye.stork.spi.ServiceDiscoveryProvider` interface:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork-reference.adoc:86
#: upstream/_versions/main/guides/stork-reference.adoc:117
#: upstream/_versions/main/guides/stork-reference.adoc:210
#: upstream/_versions/main/guides/stork-reference.adoc:242
#, no-wrap
msgid "package examples;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork-reference.adoc:91
#, no-wrap
msgid ""
"import io.smallrye.stork.ServiceDiscovery;\n"
"import io.smallrye.stork.config.ServiceConfig;\n"
"import io.smallrye.stork.config.ServiceDiscoveryConfig;\n"
"import io.smallrye.stork.spi.ServiceDiscoveryProvider;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork-reference.adoc:97
#, no-wrap
msgid ""
"public class AcmeServiceDiscoveryProvider implements ServiceDiscoveryProvider {\n"
"    @Override\n"
"    public String type() {\n"
"        return \"acme\";\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork-reference.adoc:105
#, no-wrap
msgid ""
"    @Override\n"
"    public ServiceDiscovery createServiceDiscovery(ServiceDiscoveryConfig config,\n"
"            String serviceName,\n"
"            ServiceConfig serviceConfig) {\n"
"        return new AcmeServiceDiscovery(config.parameters());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork-reference.adoc:111
msgid "This implementation is straightforward.  The type method returns the service discovery provider identifier.  The `createServiceDiscovery` method is the factory method.  It receives the instance configuration (a map constructed from all `stork.my-service.service-discovery.attr=value` properties)"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork-reference.adoc:113
msgid "Then, obviously, we need to implement the ServiceDiscovery interface:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork-reference.adoc:123
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import io.smallrye.stork.DefaultServiceInstance;\n"
"import io.smallrye.stork.ServiceDiscovery;\n"
"import io.smallrye.stork.ServiceInstance;\n"
"import io.smallrye.stork.spi.ServiceInstanceIds;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork-reference.adoc:127
#, no-wrap
msgid ""
"import java.util.Collections;\n"
"import java.util.List;\n"
"import java.util.Map;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork-reference.adoc:129
#, no-wrap
msgid "public class AcmeServiceDiscovery implements ServiceDiscovery {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork-reference.adoc:132
#, no-wrap
msgid ""
"    private final String host;\n"
"    private final int port;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork-reference.adoc:137
#, no-wrap
msgid ""
"    public AcmeServiceDiscovery(Map<String, String> configuration) {\n"
"        this.host = configuration.get(\"host\");\n"
"        this.port = Integer.parseInt(configuration.get(\"port\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork-reference.adoc:148
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<List<ServiceInstance>> getServiceInstances() {\n"
"        // Proceed to the lookup...\n"
"        // Here, we just return a DefaultServiceInstance with the configured host and port\n"
"        // The last parameter specifies whether the communication with the instance should happen over a secure connection\n"
"        DefaultServiceInstance instance =\n"
"                new DefaultServiceInstance(ServiceInstanceIds.next(), host, port, false);\n"
"        return Uni.createFrom().item(() -> Collections.singletonList(instance));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork-reference.adoc:154
msgid "Again, this implementation is simplistic.  Typically, instead of creating a service instance with values from the configuration, you would connect to a service discovery backend, look for the service and build the list of service instances accordingly.  That's why the method returns a `Uni`.  Most of the time, the lookup is a remote operation."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork-reference.adoc:156
msgid "The final step is to declare our `ServiceDiscoveryProvider` in the `META-INF/services/io.smallrye.stork.spi.ServiceDiscoveryProvider` file:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork-reference.adoc:160
#, no-wrap
msgid "examples.AcmeServiceDiscoveryProvider\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/stork-reference.adoc:162
#, no-wrap
msgid "Using your service discovery"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork-reference.adoc:166
#: upstream/_versions/main/guides/stork-reference.adoc:280
msgid "In the project using it, don't forget to add the dependency on the module providing your implementation.  Then, in the configuration, just add:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork-reference.adoc:172
#, no-wrap
msgid ""
"stork.my-service.service-discovery=acme\n"
"stork.my-service.service-discovery.host=localhost\n"
"stork.my-service.service-discovery.port=1234\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork-reference.adoc:175
msgid "Then, Stork will use your implementation to locate the `my-service` service."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/stork-reference.adoc:176
#, no-wrap
msgid "Implementing a custom service selection / load-balancer"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork-reference.adoc:180
msgid "Stork is extensible, and you can implement your own service selection (load-balancer) mechanism.  Stork uses the SPI mechanism for loading implementations matching the Load Balancer Provider interface."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork-reference.adoc:183
msgid "To implement your Load Balancer Provider, make sure your project depends on:"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/stork-reference.adoc:192
#, no-wrap
msgid "Implementing a load balancer provider"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork-reference.adoc:195
msgid "Stork uses the SPI mechanism for loading implementations matching the Load Balancer Provider interface during its initialization."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork-reference.adoc:199
msgid "The custom provider is a factory that creates an `io.smallrye.stork.LoadBalancer` instance for each configured service using this load balancer provider.  A type identifies each provider.  You will use that type in the configuration to reference the load-balancer provider you want for each service:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork-reference.adoc:203
#, no-wrap
msgid "stork.my-service.load-balancer=acme\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork-reference.adoc:206
msgid "The first step consists of implementing the `io.smallrye.stork.spi.LoadBalancerProvider` interface:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork-reference.adoc:217
#, no-wrap
msgid ""
"import io.smallrye.stork.LoadBalancer;\n"
"import io.smallrye.stork.ServiceDiscovery;\n"
"import io.smallrye.stork.config.LoadBalancerConfig;\n"
"import io.smallrye.stork.config.ServiceDiscoveryConfig;\n"
"import io.smallrye.stork.spi.LoadBalancerProvider;\n"
"import io.smallrye.stork.spi.ServiceDiscoveryProvider;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork-reference.adoc:224
#, no-wrap
msgid ""
"public class AcmeLoadBalancerProvider implements LoadBalance\n"
"rProvider {\n"
"    @Override\n"
"    public String type() {\n"
"        return \"acme\";\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork-reference.adoc:230
#, no-wrap
msgid ""
"    @Override\n"
"    public LoadBalancer createLoadBalancer(LoadBalancerConfig config, ServiceDiscovery serviceDiscovery) {\n"
"        return new AcmeLoadBalancer(config);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork-reference.adoc:236
msgid "This implementation is straightforward.  The type method returns the load balancer provider identifier.  The `createLoadBalancer` method is the factory method.  It receives the instance configuration (a map constructed from all `stork.my-service.load-balancer.attr=value` properties)"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork-reference.adoc:238
msgid "Then, obviously, we need to implement the `LoadBalancer` interface:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork-reference.adoc:246
#, no-wrap
msgid ""
"import io.smallrye.stork.LoadBalancer;\n"
"import io.smallrye.stork.ServiceInstance;\n"
"import io.smallrye.stork.config.LoadBalancerConfig;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork-reference.adoc:250
#, no-wrap
msgid ""
"import java.util.ArrayList;\n"
"import java.util.Collection;\n"
"import java.util.Random;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork-reference.adoc:252
#, no-wrap
msgid "public class AcmeLoadBalancer implements LoadBalancer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork-reference.adoc:254
#, no-wrap
msgid "    private final Random random;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork-reference.adoc:258
#, no-wrap
msgid ""
"    public AcmeLoadBalancer(LoadBalancerConfig config) {\n"
"        random = new Random();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork-reference.adoc:265
#, no-wrap
msgid ""
"    @Override\n"
"    public ServiceInstance selectServiceInstance(Collection<ServiceInstance> serviceInstances) {\n"
"        int index = random.nextInt(serviceInstances.size());\n"
"        return new ArrayList<>(serviceInstances).get(index);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork-reference.adoc:268
msgid "Again, this implementation is simplistic and just picks a random instance from the received list."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork-reference.adoc:270
msgid "The final step is to declare our `LoadBalancerProvider` in the `META-INF/services/io.smallrye.stork.spi.LoadBalancerProvider` file:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork-reference.adoc:274
#, no-wrap
msgid "examples.AcmeLoadBalancerProvider\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/stork-reference.adoc:276
#, no-wrap
msgid "Using your load balancer"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/stork-reference.adoc:285
#, no-wrap
msgid ""
"stork.my-service.service-discovery=...\n"
"stork.my-service.load-balancer=acme\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/stork-reference.adoc:288
msgid "Then, Stork will use your implementation to select the `my-service` service instance."
msgstr ""
