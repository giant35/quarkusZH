# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-07-10 05:18+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:6
#, no-wrap
msgid "Quarkus - Scheduler Reference Guide"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:20
msgid "Modern applications often need to run specific tasks periodically.  There are two scheduler extensions in Quarkus.  The `quarkus-scheduler` extension brings the API and a lightweight in-memory scheduler implementation.  The `quarkus-quartz` extension implements the API from the `quarkus-scheduler` extension and contains a scheduler implementation based on the Quartz library.  You will only need `quarkus-quartz` for more advanced scheduling use cases, such as persistent tasks, clustering and programmatic scheduling of jobs."
msgstr "最近のアプリケーションでは、定期的に特定のタスクを実行する必要があります。Quarkusには2つのスケジューラーエクステンションがあります。 `quarkus-scheduler` エクステンションには、APIと軽量なインメモリースケジューラーの実装が含まれています。 `quarkus-quartz` エクステンションは、 `quarkus-scheduler` エクステンションのAPIを実装し、Quartzライブラリをベースにしたスケジューラーの実装が含まれています。 `quarkus-quartz` が必要になるのは、永続的タスク、クラスターリング、ジョブのプログラマティックスケジューリングなど、より高度なスケジューリングのユースケースのみです。"

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:22
msgid "If you add the `quarkus-quartz` dependency to your project the lightweight scheduler implementation from the `quarkus-scheduler` extension is automatically disabled."
msgstr "プロジェクトに `quarkus-quartz` 依存関係を追加すると、 `quarkus-scheduler` エクステンションからの軽量スケジューラーの実装は自動的に無効になります。"

#. type: Title ==
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:23
#, no-wrap
msgid "Scheduled Methods"
msgstr "スケジュールされたメソッド"

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:28
msgid "If you annotate a method with `@io.quarkus.scheduler.Scheduled` it is automatically scheduled for invocation.  In fact, such a method must be a non-private non-static method of a CDI bean.  As a consequence of being a method of a CDI bean a scheduled method can be annotated with interceptor bindings, such as `@javax.transaction.Transactional` and `@org.eclipse.microprofile.metrics.annotation.Counted`."
msgstr "メソッドに `@io.quarkus.scheduler.Scheduled` をアノテーションすると、自動的に呼び出されるようにスケジュールされます。実際には、そのようなメソッドはCDI Beanの非プライベート非静的メソッドでなければなりません。CDI Beanのメソッドであることの結果として、スケジュールされたメソッドは、 `@javax.transaction.Transactional` や `@org.eclipse.microprofile.metrics.annotation.Counted` のようなインターセプターバインディングでアノテーションすることができます。"

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:30
msgid "If there is no CDI scope defined on the declaring class then `@Singleton` is used."
msgstr "宣言クラスにCDIスコープが定義されていない場合は、 `@Singleton` が使用されます。"

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:32
msgid "Furthermore, the annotated method must return `void` and either declare no parameters or one parameter of type `io.quarkus.scheduler.ScheduledExecution`."
msgstr "さらに、アノテーションされたメソッドは `void` を返し、パラメーターを宣言しないか、 `io.quarkus.scheduler.ScheduledExecution` 型のパラメーターを 1 つだけ宣言する必要があります。"

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:34
msgid "The annotation is repeatable so a single method could be scheduled multiple times."
msgstr "アノテーションは繰り返し可能なので、1つのメソッドを複数回スケジュールすることができます。"

#. type: Title ===
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:35
#, no-wrap
msgid "Triggers"
msgstr "トリガー"

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:40
msgid "A trigger is defined either by the `@Scheduled#cron()` or by the `@Scheduled#every()` attributes.  If both are specified, the cron expression takes precedence.  If none is specified, the build fails with an `IllegalStateException`."
msgstr "トリガーは、 `@Scheduled#cron()` 属性または `@Scheduled#every()` 属性によって定義されます。両方が指定されている場合、cron 式が優先されます。何も指定されていない場合、ビルドは `IllegalStateException` で失敗します。"

#. type: Title ====
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:41
#, no-wrap
msgid "CRON"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:45
msgid "A CRON trigger is defined by a cron-like expression.  For example `\"0 15 10 * * ?\"` fires at 10:15am every day."
msgstr "CRONトリガーは、cronライクな式で定義されています。例えば `\"0 15 10 * * ?\"` は毎日午前10時15分に起動します。"

#. type: Block title
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:46
#, no-wrap
msgid "CRON Trigger Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:51
#, no-wrap
msgid ""
"@Scheduled(cron = \"0 15 10 * * ?\")\n"
"void fireAt10AmEveryDay() { }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:56
msgid "The syntax used in CRON expressions is controlled by the `quarkus.scheduler.cron-type` property.  The values can be `cron4j`, `quartz`, `unix` and `spring`.  `quartz` is used by default."
msgstr "CRON 式で使用される構文は `quarkus.scheduler.cron-type` プロパティーによって制御されます。 値は `cron4j` , `quartz` , `unix` および `spring` のいづれかです。`quartz` がデフォルトで使用されます。"

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:58
msgid "If a CRON expression starts with `{` and ends with `}` then the scheduler attempts to find a corresponding config property and use the configured value instead."
msgstr ""

#. type: Block title
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:59
#, no-wrap
msgid "CRON Config Property Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:64
#, no-wrap
msgid ""
"@Scheduled(cron = \"{myMethod.cron.expr}\")\n"
"void myMethod() { }\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:66
#, no-wrap
msgid "Intervals"
msgstr "インターバル"

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:72
msgid "An interval trigger defines a period between invocations.  The period expression is based on the ISO-8601 duration format `PnDTnHnMn.nS` and the value of `@Scheduled#every()` is parsed with `java.time.Duration#parse(CharSequence)`.  However, if an expression starts with a digit then the `PT` prefix is added automatically.  So for example, `15m` can be used instead of `PT15M` and is parsed as \"15 minutes\"."
msgstr "インターバルトリガーは、呼び出しの間の期間を定義します。期間式は ISO-8601 の期間フォーマット `PnDTnHnMn.nS` に基づいており、 `@Scheduled#every()` の値は `java.time.Duration#parse(CharSequence)` で解析されます。ただし、式が数字で始まる場合は、 `PT` の接頭辞が自動的に追加されます。例えば、 `PT15M` の代わりに `15m` を使用することができ、「15 分」と解析されます。"

#. type: Block title
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:73
#, no-wrap
msgid "Interval Trigger Example"
msgstr "インターバルトリガーの例"

#. type: delimited block -
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:78
#, no-wrap
msgid ""
"@Scheduled(every = \"15m\")\n"
"void every15Mins() { }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:81
msgid "If a value starts with `{` and ends with `}` then the scheduler attempts to find a corresponding config property and use the configured value instead."
msgstr ""

#. type: Block title
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:82
#, no-wrap
msgid "Interval Config Property Example"
msgstr "インターバル設定プロパティーの例"

#. type: delimited block -
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:87
#, no-wrap
msgid ""
"@Scheduled(every = \"{myMethod.every.expr}\")\n"
"void myMethod() { }\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:89
#, no-wrap
msgid "Identity"
msgstr "アイデンティティ"

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:94
msgid "By default, a unique id is generated for each scheduled method.  This id is used in log messages and during debugging.  Sometimes a possibility to specify an explicit id may come in handy."
msgstr "デフォルトでは、スケジュールされた各メソッドに対して一意の ID が生成されます。このIDはログメッセージやデバッグ中に使用されます。時には、明示的な id を指定することが便利な場合もあります。"

#. type: Block title
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:95
#, no-wrap
msgid "Identity Example"
msgstr "アイデンティティの例"

#. type: delimited block -
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:100
#, no-wrap
msgid ""
"@Scheduled(identity = \"myScheduledMethod\")\n"
"void myMethod() { }\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:102
#, no-wrap
msgid "Delayed Execution"
msgstr "遅延実行"

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:105
msgid "`@Scheduled` provides two ways to delay the time a trigger should start firing at."
msgstr "`@Scheduled` では、トリガーが発報を開始時刻を遅らせるための2つの方法を提供しています。"

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:107
msgid "`@Scheduled#delay()` and `@Scheduled#delayUnit()` form the initial delay together."
msgstr "`@Scheduled#delay()` と `@Scheduled#delayUnit()` は初期遅延を一緒に形成します。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:112
#, no-wrap
msgid ""
"@Scheduled(every = \"2s\", delay = 2, delayUnit = TimeUnit.HOUR) <1>\n"
"void everyTwoSeconds() { }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:114
msgid "The trigger fires for the first time two hours after the application start."
msgstr "アプリケーション開始から2時間後に初めてトリガーが発射されます。"

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:116
msgid "The final value is always rounded to full second."
msgstr "最終的な値は常に1秒単位で丸められます。"

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:121
msgid "`@Scheduled#delayed()` is a text alternative to the properties above.  The period expression is based on the ISO-8601 duration format `PnDTnHnMn.nS` and the value is parsed with `java.time.Duration#parse(CharSequence)`.  However, if an expression starts with a digit, the `PT` prefix is added automatically.  So for example, `15s` can be used instead of `PT15S` and is parsed as \"15 seconds\"."
msgstr "`@Scheduled#delayed()` は、上記のプロパティーのテキスト形式での代替です。ピリオド式は ISO-8601 duration format `PnDTnHnMn.nS` に基づいており、値は `java.time.Duration#parse(CharSequence)` で解析されます。ただし、式が数字で始まる場合は、 `PT` の接頭辞が自動的に追加されます。そのため、例えば `PT15S` の代わりに `15s` を使用することができ、「15 秒」と解析されます。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:126
#, no-wrap
msgid ""
"@Scheduled(every = \"2s\", delayed = \"2h\")\n"
"void everyTwoSeconds() { }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:129
msgid "If `@Scheduled#delay()` is set to a value greater then zero the value of `@Scheduled#delayed()` is ignored."
msgstr "`@Scheduled#delay()` がゼロよりも大きい値に設定されている場合、 `@Scheduled#delayed()` の値は無視されます。"

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:132
msgid "The main advantage over `@Scheduled#delay()` is that the value is configurable.  If the value starts with `{` and ends with `}` then the scheduler attempts to find a corresponding config property and use the configured value instead:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:137
#, no-wrap
msgid ""
"@Scheduled(every = \"2s\", delayed = \"{myMethod.delay.expr}\") <1>\n"
"void everyTwoSeconds() { }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:139
msgid "The config property `myMethod.delay.expr` is used to set the delay."
msgstr "遅延の設定には、configプロパティー `myMethod.delay.expr` を使用します。"

#. type: Title ===
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:141
#, no-wrap
msgid "Concurrent Execution"
msgstr "同時実行"

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:145
msgid "By default, a scheduled method can be executed concurrently.  Nevertheless, it is possible to specify the strategy to handle concurrent executions via `@Scheduled#concurrentExecution()`."
msgstr "デフォルトでは、スケジュールされたメソッドは同時に実行することができます。それにもかかわらず、 `@Scheduled#concurrentExecution()` を通じて同時実行を処理するための戦略を指定することが可能です。"

#. type: delimited block -
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:149
#, no-wrap
msgid "import static io.quarkus.scheduler.Scheduled.ConcurrentExecution.SKIP;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:154
#, no-wrap
msgid ""
"@Scheduled(every = \"1s\", concurrentExecution = SKIP) <1>\n"
"void nonConcurrent() {\n"
"  // we can be sure that this method is never executed concurrently\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:156
msgid "Concurrent executions are skipped."
msgstr "同時実行はスキップされます。"

#. type: Title ==
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:157
#, no-wrap
msgid "Scheduler"
msgstr "スケジューラー"

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:160
msgid "Quarkus provides a built-in bean of type `io.quarkus.scheduler.Scheduler` that can be injected and used to pause/resume the scheduler."
msgstr "Quarkusは、 `io.quarkus.scheduler.Scheduler` 型のビルトインBeanを提供しており、これを注入してスケジューラーを一時停止/再開するために使用することができます。"

#. type: Block title
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:161
#, no-wrap
msgid "Scheduler Injection Example"
msgstr "スケジューラーインジェクションの例"

#. type: delimited block -
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:165
#, no-wrap
msgid "import io.quarkus.scheduler.Scheduler;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:167
#, no-wrap
msgid "class MyService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:170
#, no-wrap
msgid ""
"   @Inject\n"
"   Scheduler scheduler;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:179
#, no-wrap
msgid ""
"   void ping() {\n"
"      scheduler.pause(); <1>\n"
"      if (scheduler.isRunning()) {\n"
"         throw new IllegalStateException(\"This should never happen!\");\n"
"      }\n"
"      scheduler.resume(); <2>\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:181
msgid "Pause all triggers."
msgstr "すべてのトリガーを一時停止します。"

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:182
msgid "Resume the scheduler."
msgstr "スケジューラーを再開します。"

#. type: Title ==
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:183
#, no-wrap
msgid "Programmatic Scheduling"
msgstr "プログラムスケジューリング"

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:186
msgid "If you need to schedule a job programmatically you'll need to add the link:quartz[Quartz extension] and use the Quartz API directly."
msgstr "プログラムでジョブをスケジュールする必要がある場合は、 link:quartz[Quartzエクステンション] を追加してQuartz APIを直接使用する必要があります。"

#. type: Block title
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:187
#, no-wrap
msgid "Programmatic Scheduling with Quartz API"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:191
#, no-wrap
msgid "import org.quartz.Scheduler;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:193
#, no-wrap
msgid "class MyJobs {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:208
#, no-wrap
msgid ""
"    void onStart(@Observes StartupEvent event, Scheduler quartz) throws SchedulerException {\n"
"        JobDetail job = JobBuilder.newJob(SomeJob.class)\n"
"                .withIdentity(\"myJob\", \"myGroup\")\n"
"                .build();\n"
"        Trigger trigger = TriggerBuilder.newTrigger()\n"
"                .withIdentity(\"myTrigger\", \"myGroup\")\n"
"                .startNow()\n"
"                .withSchedule(SimpleScheduleBuilder.simpleSchedule()\n"
"                        .withIntervalInSeconds(1)\n"
"                        .repeatForever())\n"
"                .build();\n"
"        quartz.scheduleJob(job, trigger);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:211
msgid "By default, the scheduler is not started unless a `@Scheduled` business method is found. You may need to force the start of the scheduler for \"pure\" programmatic scheduling. See also <<quartz.adoc#quartz-configuration-reference,Quartz Configuration Reference>>."
msgstr "デフォルトでは、 `@Scheduled` ビジネスメソッドが見つからない限り、スケジューラーは起動されません。「純粋な」プログラマティックスケジューリングのために、スケジューラーを強制的に起動する必要があるかもしれません。 link:quartz.html#quartz-configuration-reference[Quartz Configuration Reference] も参照してください。"

#. type: Title ==
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:212
#, no-wrap
msgid "Scheduled Methods and Testing"
msgstr "スケジュールされたメソッドとテスト"

#. type: Plain text
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:218
msgid "It is often desirable to disable the scheduler when running the tests.  The scheduler can be disabled through the runtime config property `quarkus.scheduler.enabled`.  If set to `false` the scheduler is not started even though the application contains scheduled methods.  You can even disable the scheduler for particular <<getting-started-testing#testing_different_profiles,Test Profiles>>."
msgstr "テストを実行する際には、スケジューラーを無効にすることが望ましいことがよくあります。スケジューラーは、ランタイム設定プロパティー `quarkus.scheduler.enabled` を通じて無効にすることができます。 `false` に設定すると、アプリケーションにスケジュールされたメソッドが含まれていても、 スケジューラーは起動しません。特定の link:getting-started-testing.html#testing_different_profiles[テストプロファイル] に対してスケジューラーを無効にすることもできます。"

#. type: Title ==
#: upstream/_versions/1.11/guides/scheduler-reference.adoc:219
#, no-wrap
msgid "Configuration Reference"
msgstr "設定リファレンス"
