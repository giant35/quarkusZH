# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-09-01 01:05+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:6
#, no-wrap
msgid "Quarkus - Testing Your Application"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:23
msgid "Learn how to test your Quarkus Application.  This guide covers:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:25
msgid "Testing in JVM mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:26
msgid "Testing in native mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:27
msgid "Injection of resources into tests"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:28
#, no-wrap
msgid "Prerequisites"
msgstr "准备"

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:31
msgid "To complete this guide, you need:"
msgstr "要完成本指南，您需要："

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:33
msgid "less than 15 minutes"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:34
msgid "an IDE"
msgstr "IDE"

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:35
msgid "JDK 1.8+ installed with `JAVA_HOME` configured appropriately"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:36
msgid "Apache Maven {maven-version}"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:37
msgid "The completed greeter application from the link:getting-started[Getting Started Guide]"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:38
#, no-wrap
msgid "Architecture"
msgstr "架构"

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:42
msgid "In this guide, we expand on the initial test that was created as part of the Getting Started Guide.  We cover injection into tests and also how to test native executables."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:43
#, no-wrap
msgid "Solution"
msgstr "完整源码"

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:47
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:49
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:51
msgid "The solution is located in the `getting-started-testing` directory."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:53
msgid "This guide assumes you already have the completed application from the `getting-started` directory."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:54
#, no-wrap
msgid "Recap of HTTP based Testing in JVM mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:58
msgid "If you have started from the Getting Started example you should already have a completed test, including the correct `pom.xml` setup."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:60
msgid "In the `pom.xml` file you should see 2 test dependencies:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:73
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.rest-assured</groupId>\n"
"    <artifactId>rest-assured</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:78
msgid "`quarkus-junit5` is required for testing, as it provides the `@QuarkusTest` annotation that controls the testing framework.  `rest-assured` is not required but is a convenient way to test HTTP endpoints, we also provide integration that automatically sets the correct URL so no configuration is required."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:81
msgid "Because we are using JUnit 5, the version of the https://maven.apache.org/surefire/maven-surefire-plugin/[Surefire Maven Plugin] must be set, as the default version does not support Junit 5:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:94
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>maven-surefire-plugin</artifactId>\n"
"    <version>${surefire-plugin.version}</version>\n"
"    <configuration>\n"
"       <systemPropertyVariables>\n"
"          <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n"
"          <maven.home>${maven.home}</maven.home>\n"
"       </systemPropertyVariables>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:98
msgid "We also set the `java.util.logging.manager` system property to make sure tests will use the correct logmanager and `maven.home` to ensure that custom configuration from `${maven.home}/conf/settings.xml` is applied (if any)."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:100
msgid "The project should also contain a simple test:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:104
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:189
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:264
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:316
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:356
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:432
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:476
#, no-wrap
msgid "package org.acme.getting.started.testing;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:107
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:109
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:322
#, no-wrap
msgid "import java.util.UUID;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:112
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:325
#, no-wrap
msgid ""
"import static io.restassured.RestAssured.given;\n"
"import static org.hamcrest.CoreMatchers.is;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:115
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:826
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class GreetingResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:124
#, no-wrap
msgid ""
"    @Test\n"
"    public void testHelloEndpoint() {\n"
"        given()\n"
"          .when().get(\"/hello\")\n"
"          .then()\n"
"             .statusCode(200)\n"
"             .body(is(\"hello\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:135
#, no-wrap
msgid ""
"    @Test\n"
"    public void testGreetingEndpoint() {\n"
"        String uuid = UUID.randomUUID().toString();\n"
"        given()\n"
"          .pathParam(\"name\", uuid)\n"
"          .when().get(\"/hello/greeting/{name}\")\n"
"          .then()\n"
"            .statusCode(200)\n"
"            .body(is(\"hello \" + uuid));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:137
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:416
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:534
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:843
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:141
msgid "This test uses HTTP to directly test our REST endpoint. When the test is run the application will be started before the test is run."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:142
#, no-wrap
msgid "Controlling the test port"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:146
msgid "While Quarkus will listen on port `8080` by default, when running tests it defaults to `8081`. This allows you to run tests while having the application running in parallel."
msgstr ""

#. type: Block title
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:148
#, no-wrap
msgid "Changing the test port"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:151
msgid "You can configure the ports used by tests by configuring `quarkus.http.test-port` for HTTP and `quarkus.http.test-ssl-port` for HTTPS in your `application.properties`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:155
#, no-wrap
msgid ""
"quarkus.http.test-port=8083\n"
"quarkus.http.test-ssl-port=8446\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:157
msgid "`0` will result in the use of a random port (assigned by the operating system)."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:161
msgid "Quarkus also provides RestAssured integration that updates the default port used by RestAssured before the tests are run, so no additional configuration should be required."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:162
#, no-wrap
msgid "Injecting a URI"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:166
msgid "It is also possible to directly inject the URL into the test which can make is easy to use a different client. This is done via the `@TestHTTPResource` annotation."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:169
msgid "Let's write a simple test that shows this off to load some static resources. First create a simple HTML file in `src/main/resources/META-INF/resources/index.html` :"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:181
#, no-wrap
msgid ""
"<html>\n"
"    <head>\n"
"        <title>Testing Guide</title>\n"
"    </head>\n"
"    <body>\n"
"        Information about testing\n"
"    </body>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:184
msgid "We will create a simple test to ensure that this is being served correctly:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:195
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:270
#, no-wrap
msgid ""
"import java.io.ByteArrayOutputStream;\n"
"import java.io.IOException;\n"
"import java.io.InputStream;\n"
"import java.net.URL;\n"
"import java.nio.charset.StandardCharsets;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:198
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:273
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:361
#, no-wrap
msgid ""
"import org.junit.jupiter.api.Assertions;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:201
#, no-wrap
msgid ""
"import io.quarkus.test.common.http.TestHTTPResource;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:204
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:280
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class StaticContentTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:207
#, no-wrap
msgid ""
"    @TestHTTPResource(\"index.html\") // <1>\n"
"    URL url;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:215
#, no-wrap
msgid ""
"    @Test\n"
"    public void testIndexHtml() throws Exception {\n"
"        try (InputStream in = url.openStream()) {\n"
"            String contents = readStream(in);\n"
"            Assertions.assertTrue(contents.contains(\"<title>Testing Guide</title>\"));\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:226
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:303
#, no-wrap
msgid ""
"    private static String readStream(InputStream in) throws IOException {\n"
"        byte[] data = new byte[1024];\n"
"        int r;\n"
"        ByteArrayOutputStream out = new ByteArrayOutputStream();\n"
"        while ((r = in.read(data)) > 0) {\n"
"            out.write(data, 0, r);\n"
"        }\n"
"        return new String(out.toByteArray(), StandardCharsets.UTF_8);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:228
msgid "This annotation allows you to directly inject the URL of the Quarkus instance, the value of the annotation will be the path component of the URL"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:230
msgid "For now `@TestHTTPResource` allows you to inject `URI`, `URL` and `String` representations of the URL."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:231
#, no-wrap
msgid "Testing a specific endpoint"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:236
msgid "Both RESTassured and `@TestHTTPResource` allow you to specify the endpoint class you are testing rather than hard coding a path. This currently supports both JAX-RS endpoints, Servlets and Reactive Routes. This makes it a lot easier to see exactly which endpoints a given test is testing."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:238
msgid "For the purposes of these examples I am going to assume we have an endpoint that looks like the following:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:243
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"public class GreetingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:250
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        return \"hello\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:254
msgid "This currently does not support the `@ApplicationPath()` annotation to set the JAX-RS context path. Use the `quarkus.resteasy.path` config value instead if you want a custom context path."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:255
#, no-wrap
msgid "TestHTTPResource"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:260
msgid "You can the use the `io.quarkus.test.common.http.TestHTTPEndpoint` annotation to specify the endpoint path, and the path will be extracted from the provided endpoint. If you also specify a value for the `TestHTTPResource` endpoint it will be appended to the end of the endpoint path."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:277
#, no-wrap
msgid ""
"import io.quarkus.test.common.http.TestHTTPEndpoint;\n"
"import io.quarkus.test.common.http.TestHTTPResource;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:284
#, no-wrap
msgid ""
"    @TestHTTPEndpoint(GreetingResource.class)  // <1>\n"
"    @TestHTTPResource\n"
"    URL url;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:292
#, no-wrap
msgid ""
"    @Test\n"
"    public void testIndexHtml() throws Exception {\n"
"        try (InputStream in = url.openStream()) {\n"
"            String contents = readStream(in);\n"
"            Assertions.assertTrue(contents.equals(\"hello\"));\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:306
msgid "Because `GreetingResource` is annotated with `@Path(\"/hello\")` the injected URL will end with `/hello`."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:307
#, no-wrap
msgid "RESTassured"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:312
msgid "To control the RESTassured base path (i.e. the default path that serves as the root for every request) you can use the `io.quarkus.test.common.http.TestHTTPEndpoint` annotation. This can be applied at the class or method level. To test out greeting resource we would do:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:320
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.common.http.TestHTTPEndpoint;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:329
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@TestHTTPEndpoint(GreetingResource.class) //<1>\n"
"public class GreetingResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:339
#, no-wrap
msgid ""
"    @Test\n"
"    public void testHelloEndpoint() {\n"
"        given()\n"
"          .when().get()    //<2>\n"
"          .then()\n"
"             .statusCode(200)\n"
"             .body(is(\"hello\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:341
msgid "This tells RESTAssured to prefix all requests with `/hello`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:342
msgid "Note we don't need to specify a path here, as `/hello` is the default for this test"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:343
#, no-wrap
msgid "Injection into tests"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:347
msgid "So far we have only covered integration style tests that test the app via HTTP endpoints, but what if we want to do unit testing and test our beans directly?"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:351
msgid "Quarkus supports this by allowing you to inject CDI beans into your tests via the `@Inject` annotation (in fact, tests in Quarkus are full CDI beans, so you can use all CDI functionality). Let's create a simple test that tests the greeting service directly without using HTTP:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:358
#, no-wrap
msgid "import javax.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:363
#, no-wrap
msgid "import io.quarkus.test.junit.QuarkusTest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:366
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class GreetingServiceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:369
#, no-wrap
msgid ""
"    @Inject // <1>\n"
"    GreetingService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:375
#, no-wrap
msgid ""
"    @Test\n"
"    public void testGreetingService() {\n"
"        Assertions.assertEquals(\"hello Quarkus\", service.greeting(\"Quarkus\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:377
msgid "The `GreetingService` bean will be injected into the test"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:378
#, no-wrap
msgid "Applying Interceptors to Tests"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:383
msgid "As mentioned above Quarkus tests are actually full CDI beans, and as such you can apply CDI interceptors as you would normally. As an example, if you want a test method to run within the context of a transaction you can simply apply the `@Transactional` annotation to the method and the transaction interceptor will handle it."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:386
msgid "In addition to this you can also create your own test stereotypes. For example we could create a `@TransactionalQuarkusTest` as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:396
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@Stereotype\n"
"@Transactional\n"
"@Retention(RetentionPolicy.RUNTIME)\n"
"@Target(ElementType.TYPE)\n"
"public @interface TransactionalQuarkusTest {\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:400
msgid "If we then apply this annotation to a test class it will act as if we had applied both the `@QuarkusTest` and `@Transactional` annotations, e.g.:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:406
#, no-wrap
msgid ""
"@TransactionalQuarkusTest\n"
"public class TestStereotypeTestCase {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:409
#, no-wrap
msgid ""
"    @Inject\n"
"    UserTransaction userTransaction;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:414
#, no-wrap
msgid ""
"    @Test\n"
"    public void testUserTransaction() throws Exception {\n"
"        Assertions.assertEquals(Status.STATUS_ACTIVE, userTransaction.getStatus());\n"
"    }\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:418
#, no-wrap
msgid "Enrichment via QuarkusTest*Callback"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:421
msgid "Alternatively or additionally to an interceptor, you can enrich *all* your `@QuarkusTest` classes by implementing the following callback interfaces:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:423
msgid "`io.quarkus.test.junit.callback.QuarkusTestBeforeAllCallback`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:424
msgid "`io.quarkus.test.junit.callback.QuarkusTestBeforeEachCallback`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:425
msgid "`io.quarkus.test.junit.callback.QuarkusTestAfterEachCallback`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:427
msgid "Such a callback implementation has to be registered as a \"service provider\" as defined by `java.util.ServiceLoader`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:429
msgid "E.g. the following sample callback:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:435
#, no-wrap
msgid ""
"import io.quarkus.test.junit.callback.QuarkusTestBeforeEachCallback;\n"
"import io.quarkus.test.junit.callback.QuarkusTestMethodContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:437
#, no-wrap
msgid "public class MyQuarkusTestBeforeEachCallback implements QuarkusTestBeforeEachCallback {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:443
#, no-wrap
msgid ""
"    @Override\n"
"    public void beforeEach(QuarkusTestMethodContext context) {\n"
"        System.out.println(\"Executing \" + context.getTestMethod());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:445
msgid "has to be registered via `src/main/resources/META-INF/services/io.quarkus.test.junit.callback.QuarkusTestBeforeEachCallback` as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:448
#, no-wrap
msgid "org.acme.getting.started.testing.MyQuarkusTestBeforeEachCallback\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:451
msgid "It is possible to read annotations from the test class or method to control what the callback shall be doing."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:454
#, no-wrap
msgid ""
"While it is possible to use JUnit Jupiter callback interfaces like `BeforeEachCallback`, you might run into classloading issues because Quarkus has\n"
"         to run tests in a custom classloader which JUnit is not aware of.\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:456
#, no-wrap
msgid "Testing Different Profiles"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:461
msgid "So far in all our examples we only start Quarkus once for all tests. Before the first test is run Quarkus will boot, then all tests will run, then Quarkus will shutdown at the end. This makes for a very fast testing experience however it is a bit limited as you can't test different configurations."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:465
msgid "To get around this Quarkus supports the idea of a test profile. If a test has a different profile to the previously run test then Quarkus will be shut down and started with the new profile before running the tests. This is obviously a bit slower, as it adds a shutdown/startup cycle to the test time, but gives a great deal of flexibility."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:468
msgid "In order to reduce the amount of times Quarkus needs to restart it is recommended that you place all tests that need a specific profile into their own package, and then run tests alphabetically."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:469
#, no-wrap
msgid "Writing a Profile"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:472
msgid "To implement a test profile we need to implement `io.quarkus.test.junit.QuarkusTestProfile`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:480
#, no-wrap
msgid ""
"import java.util.Collections;\n"
"import java.util.Map;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:482
#, no-wrap
msgid "import io.quarkus.test.junit.QuarkusTestProfile;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:484
#, no-wrap
msgid "public class MockGreetingProfile implements QuarkusTestProfile {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:489
#, no-wrap
msgid ""
"    @Override\n"
"    public Map<String, String> getConfigOverrides() { <1>\n"
"        return Collections.singletonMap(\"quarkus.resteasy.path\",\"/api\");\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:494
#, no-wrap
msgid ""
"    @Override\n"
"    public Set<Class<?>> getEnabledAlternatives() { <2>\n"
"        return Collections.singleton(MockGreetingService.class);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:501
#, no-wrap
msgid ""
"    @Override\n"
"    public String getConfigProfile() { <3>\n"
"        return \"test\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:503
msgid "This method allows us to override configuration properties. Here we are changing the JAX-RS root path."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:504
msgid "This method allows us to enable CDI `@Alternative` beans. This makes it easy to mock out certain beans functionality."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:505
msgid "This can be used to change the config profile. As this default is `test` this does nothing, but is included for completeness."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:507
msgid "Now we have defined our profile we need to include it on our test class. We do this with `@TestProfile(MockGreetingProfile.class)`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:510
msgid "All the test profile config is stored in a single class, which makes it easy to tell if the previous test ran with the same configuration."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:512
#, no-wrap
msgid "Mock Support"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:516
msgid "Quarkus supports the use of mock objects using two different approaches. You can either use CDI alternatives to mock out a bean for all test classes, or use `QuarkusMock` to mock out beans on a per test basis."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:517
#, no-wrap
msgid "CDI `@Alternative` mechanism."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:523
msgid "To use this simply override the bean you wish to mock with a class in the `src/test/java` directory, and put the `@Alternative` and `@Priority(1)` annotations on the bean.  Alternatively, a convenient `io.quarkus.test.Mock` stereotype annotation could be used.  This built-in stereotype declares `@Alternative`, `@Priority(1)` and `@Dependent`.  For example if I have the following service:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:528
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class ExternalService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:532
#, no-wrap
msgid ""
"    public String service() {\n"
"        return \"external\";\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:537
msgid "I could mock it with the following class in `src/test/java`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:543
#, no-wrap
msgid ""
"@Mock\n"
"@ApplicationScoped // <1>\n"
"public class MockExternalService extends ExternalService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:549
#, no-wrap
msgid ""
"    @Override\n"
"    public String service() {\n"
"        return \"mock\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:551
msgid "Overrides the `@Dependent` scope declared on the `@Mock` stereotype."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:554
msgid "It is important that the alternative be present in the `src/test/java` directory rather than `src/main/java`, as otherwise it will take effect all the time, not just when testing."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:557
msgid "Note that at present this approach does not work with native image testing, as this would required the test alternatives to be baked into the native image."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:558
#, no-wrap
msgid "Mocking using QuarkusMock"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:563
msgid "The `io.quarkus.test.junit.QuarkusMock` class can be used to temporarily mock out any normal scoped bean. If you use this method in a `@BeforeAll` method the mock will take effect for all tests on the current class, while if you use this in a test method the mock will only take effect for the duration of the current test."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:566
msgid "This method can be used for any normal scoped CDI bean (e.g. `@ApplicationScoped`, `@RequestScoped` etc, basically every scope except `@Singleton` and `@Dependent`)."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:568
msgid "An example usage could look like:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:573
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:641
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class MockTestCase {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:576
#, no-wrap
msgid ""
"    @Inject\n"
"    MockableBean1 mockableBean1;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:579
#, no-wrap
msgid ""
"    @Inject\n"
"    MockableBean2 mockableBean2;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:586
#, no-wrap
msgid ""
"    @BeforeAll\n"
"    public static void setup() {\n"
"        MockableBean1 mock = Mockito.mock(MockableBean1.class);\n"
"        Mockito.when(mock.greet(\"Stuart\")).thenReturn(\"A mock for Stuart\");\n"
"        QuarkusMock.installMockForType(mock, MockableBean1.class);  // <1>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:592
#, no-wrap
msgid ""
"    @Test\n"
"    public void testBeforeAll() {\n"
"        Assertions.assertEquals(\"A mock for Stuart\", mockableBean1.greet(\"Stuart\"));\n"
"        Assertions.assertEquals(\"Hello Stuart\", mockableBean2.greet(\"Stuart\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:599
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPerTestMock() {\n"
"        QuarkusMock.installMockForInstance(new BonjourGreeter(), mockableBean2); // <2>\n"
"        Assertions.assertEquals(\"A mock for Stuart\", mockableBean1.greet(\"Stuart\"));\n"
"        Assertions.assertEquals(\"Bonjour Stuart\", mockableBean2.greet(\"Stuart\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:602
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:668
#, no-wrap
msgid ""
"    @ApplicationScoped\n"
"    public static class MockableBean1 {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:607
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:615
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:673
#, no-wrap
msgid ""
"        public String greet(String name) {\n"
"            return \"Hello \" + name;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:610
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:676
#, no-wrap
msgid ""
"    @ApplicationScoped\n"
"    public static class MockableBean2 {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:623
#, no-wrap
msgid ""
"    public static class BonjourGreeter extends MockableBean2 {\n"
"        @Override\n"
"        public String greet(String name) {\n"
"            return \"Bonjour \" + name;\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:625
msgid "As the injected instance is not available here we use `installMockForType`, this mock is used for both test methods"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:626
msgid "We use `installMockForInstance` to replace the injected bean, this takes effect for the duration of the test method."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:629
msgid "Note that there is no dependency on Mockito, you can use any mocking library you like, or even manually override the objects to provide the behaviour you require."
msgstr ""

#. type: Title ====
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:630
#, no-wrap
msgid "Further simplification with `@InjectMock`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:634
msgid "Building on the features provided by `QuarkusMock`, Quarkus also allows users to effortlessly take advantage of link:https://site.mockito.org/[Mockito] for mocking the beans supported by `QuarkusMock`.  This functionality is available via the `@io.quarkus.test.junit.mockito.InjectMock` annotation which is available in the `quarkus-junit5-mockito` dependency."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:636
msgid "Using `@InjectMock`, the previous example could be written as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:644
#, no-wrap
msgid ""
"    @InjectMock\n"
"    MockableBean1 mockableBean1; // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:647
#, no-wrap
msgid ""
"    @InjectMock\n"
"    MockableBean2 mockableBean2;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:652
#, no-wrap
msgid ""
"    @BeforeEach\n"
"    public void setup() {\n"
"        Mockito.when(mockableBean1.greet(\"Stuart\")).thenReturn(\"A mock for Stuart\"); // <2>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:658
#, no-wrap
msgid ""
"    @Test\n"
"    public void firstTest() {\n"
"        Assertions.assertEquals(\"A mock for Stuart\", mockableBean1.greet(\"Stuart\"));\n"
"        Assertions.assertEquals(null, mockableBean2.greet(\"Stuart\")); // <3>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:665
#, no-wrap
msgid ""
"    @Test\n"
"    public void secondTest() {\n"
"        Mockito.when(mockableBean2.greet(\"Stuart\")).thenReturn(\"Bonjour Stuart\"); // <4>\n"
"        Assertions.assertEquals(\"A mock for Stuart\", mockableBean1.greet(\"Stuart\"));\n"
"        Assertions.assertEquals(\"Bonjour Stuart\", mockableBean2.greet(\"Stuart\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:682
#, no-wrap
msgid ""
"        public String greet(String name) {\n"
"            return \"Hello \" + name;\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:684
msgid "`@InjectMock` results in a mock being and is available in test methods of the test class (other test classes are *not* affected by this)"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:685
msgid "The `mockableBean1` is configured here for every test method of the class"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:686
msgid "Since the `mockableBean2` mock has not been configured, it will return the default Mockito response."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:687
msgid "In this test the `mockableBean2` is configured, so it returns the configured response."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:691
msgid "Although the test above is good for showing the capabilities of `@InjectMock`, it is not a good representation of a real test. In a real test we would most likely configure a mock, but then test a bean that uses the mocked bean.  Here is an example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:696
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class MockGreetingServiceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:699
#, no-wrap
msgid ""
"    @InjectMock\n"
"    GreetingService greetingService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:709
#, no-wrap
msgid ""
"    @Test\n"
"    public void testGreeting() {\n"
"        when(greetingService.greet()).thenReturn(\"hi\");\n"
"        given()\n"
"                .when().get(\"/greeting\")\n"
"                .then()\n"
"                .statusCode(200)\n"
"                .body(is(\"hi\")); // <1>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:712
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:776
#, no-wrap
msgid ""
"    @Path(\"greeting\")\n"
"    public static class GreetingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:714
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:778
#, no-wrap
msgid "        final GreetingService greetingService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:718
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:782
#, no-wrap
msgid ""
"        public GreetingResource(GreetingService greetingService) {\n"
"            this.greetingService = greetingService;\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:725
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:789
#, no-wrap
msgid ""
"        @GET\n"
"        @Produces(\"text/plain\")\n"
"        public String greet() {\n"
"            return greetingService.greet();\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:733
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:797
#, no-wrap
msgid ""
"    @ApplicationScoped\n"
"    public static class GreetingService {\n"
"        public String greet(){\n"
"            return \"hello\";\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:735
msgid "Since we configured `greetingService` as a mock, the `GreetingResource` which uses the `GreetingService` bean, we get the mocked response instead of the response of the regular `GreetingService` bean"
msgstr ""

#. type: Title ====
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:736
#, no-wrap
msgid "Using Spies instead of Mocks with `@InjectSpy`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:740
msgid "Building on the features provided by `InjectMock`, Quarkus also allows users to effortlessly take advantage of link:https://site.mockito.org/[Mockito] for spying on the beans supported by `QuarkusMock`.  This functionality is available via the `@io.quarkus.test.junit.mockito.InjectSpy` annotation which is available in the `quarkus-junit5-mockito` dependency."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:744
msgid "Sometimes when testing you only need to verify that a certain logical path was taken, or you only need to stub out a single method's response while still executing the rest of the methods on the Spied clone. Please see link:https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html#spy-T-[Mockito documentation] for more details on Spy partial mocks.  In either of those situations a Spy of the object is preferable.  Using `@InjectSpy`, the previous example could be written as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:749
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class SpyGreetingServiceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:752
#, no-wrap
msgid ""
"    @InjectSpy\n"
"    GreetingService greetingService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:760
#, no-wrap
msgid ""
"    @Test\n"
"    public void testDefaultGreeting() {\n"
"        given()\n"
"                .when().get(\"/greeting\")\n"
"                .then()\n"
"                .statusCode(200)\n"
"                .body(is(\"hello\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:763
#, no-wrap
msgid ""
"        Mockito.verify(greetingService, Mockito.times(1)).greet(); <1>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:773
#, no-wrap
msgid ""
"    @Test\n"
"    public void testOverrideGreeting() {\n"
"        when(greetingService.greet()).thenReturn(\"hi\"); <2>\n"
"        given()\n"
"                .when().get(\"/greeting\")\n"
"                .then()\n"
"                .statusCode(200)\n"
"                .body(is(\"hi\")); <3>\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:799
msgid "Instead of overriding the value, we just want to ensure that the greet method on our `GreetingService` was called by this test."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:800
msgid "Here we are telling the Spy to return \"hi\" instead of \"hello\". When the `GreetingResource` requests the greeting from `GreetingService` we get the mocked response instead of the response of the regular `GreetingService` bean"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:801
msgid "We are verifying that we get the mocked response from the Spy."
msgstr ""

#. type: Title ====
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:802
#, no-wrap
msgid "Using `@InjectMock` with `@RestClient`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:805
msgid "The `@RegisterRestClient` registers the implementation of the rest-client at runtime, and because the bean needs to be a regular scope, you have to annotate your interface with `@ApplicationScoped`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:812
#, no-wrap
msgid ""
"@Path(\"/\")\n"
"@ApplicationScoped\n"
"@RegisterRestClient\n"
"public interface GreetingService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:818
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/hello\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    String hello();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:821
msgid "For the test class here is an example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:830
#, no-wrap
msgid ""
"    @InjectMock\n"
"    @RestClient // <1>\n"
"    GreetingService greetingService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:834
#, no-wrap
msgid ""
"    @Test\n"
"    public void testHelloEndpoint() {\n"
"        Mockito.when(greetingService.hello()).thenReturn(\"hello from mockito\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:841
#, no-wrap
msgid ""
"        given()\n"
"          .when().get(\"/hello\")\n"
"          .then()\n"
"             .statusCode(200)\n"
"             .body(is(\"hello from mockito\"));\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:845
msgid "Indicate that this injection point is meant to use an instance of `RestClient`."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:846
#, no-wrap
msgid "Mocking with Panache"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:849
msgid "If you are using the `quarkus-hibernate-orm-panache` or `quarkus-mongodb-panache` extensions, check out the link:hibernate-orm-panache#mocking[Hibernate ORM with Panache Mocking] and link:mongodb-panache#mocking[MongoDB with Panache Mocking] documentation for the easiest way to mock your data access."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:850
#, no-wrap
msgid "Testing Security"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:853
msgid "If you are using Quarkus Security, check out the link:security.adoc#testing-security[Testing Security] section for information on how to easily test security features of the application."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:855
#, no-wrap
msgid "Starting services before the Quarkus application starts"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:858
msgid "A very common need is to start some services on which your Quarkus application depends, before the Quarkus application starts for testing. To address this need, Quarkus provides `@io.quarkus.test.common.QuarkusTestResource` and `io.quarkus.test.common.QuarkusTestResourceLifecycleManager`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:861
msgid "By simply annotating any test in the test suite with `@QuarkusTestResource`, Quarkus will run the corresponding `QuarkusTestResourceLifecycleManager` before any tests are run.  A test suite is also free to utilize multiple `@QuarkusTestResource` annotations, in which case all the corresponding `QuarkusTestResourceLifecycleManager` objects will be run before the tests."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:866
msgid "Quarkus provides a few implementations of `QuarkusTestResourceLifecycleManager` out of the box (see `io.quarkus.test.h2.H2DatabaseTestResource` which starts an H2 database, or `io.quarkus.test.kubernetes.client.KubernetesMockServerTestResource` which starts a mock Kubernetes API server), but it is common to create custom implementations to address specific application needs.  Common cases include starting docker containers using https://www.testcontainers.org/[Testcontainers] (an example of which can be found https://github.com/quarkusio/quarkus-quickstarts/blob/master/kafka-quickstart/src/test/java/org/acme/kafka/KafkaResource.java[here]), or starting a mock HTTP server using http://wiremock.org/[Wiremock] (an example of which can be found https://github.com/geoand/quarkus-test-demo/blob/master/src/test/java/org/acme/getting/started/country/WiremockCountries.java[here])."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:867
#, no-wrap
msgid "Native Executable Testing"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:871
msgid "It is also possible to test native executables using `@NativeImageTest`. This supports all the features mentioned in this guide except injecting into tests (and the native executable runs in a separate non-JVM process this is not really possible)."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:874
msgid "This is covered in the link:building-native-image[Native Executable Guide]."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:876
#, no-wrap
msgid "Running `@QuarkusTest` from an IDE"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:879
msgid "Most IDEs offer the possibility to run a selected class as JUnit test directly. For this you should set a few properties in the settings of your chosen IDE:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:881
msgid "`java.util.logging.manager` (see link:logging[Logging Guide])"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:883
msgid "`maven.home` (only if there are any custom settings in `${maven.home}/conf/settings.mxl`, see link:maven-tooling[Maven Guide])"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:885
msgid "`maven.settings` (in case a custom version of `settings.xml` file should be used for the tests)"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:886
#, no-wrap
msgid "Eclipse separate JRE definition"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:889
msgid "Copy your current \"Installed JRE\" definition into a new one, where you will add the properties as a new VM arguments:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:891
msgid "`-Djava.util.logging.manager=org.jboss.logmanager.LogManager`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:893
msgid "`-Dmaven.home=<path-to-your-maven-installation>`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:895
msgid "Use this JRE definition as your Quarkus project targeted runtime and the workaround will be applied to any \"Run as JUnit\" configuration."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:896
#, no-wrap
msgid "VSCode \"run with\" configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:899
msgid "The `settings.json` placed in the root of your project directory or in the workspace will need the workaround in your test configuration:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:909
#, no-wrap
msgid ""
"\"java.test.config\": [\n"
"    {\n"
"        \"name\": \"quarkusConfiguration\",\n"
"        \"vmargs\": [ \"-Djava.util.logging.manager=org.jboss.logmanager.LogManager -Dmaven.home=<path-to-your-maven-installation> ...\" ],\n"
"        ...\n"
"    },\n"
"  ...\n"
"]\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:911
#, no-wrap
msgid "IntelliJ JUnit template"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/getting-started-testing.adoc:913
msgid "Nothing needed in IntelliJ because the IDE will pick the `systemPropertyVariables` from the surefire plugin configuration in `pom.xml`."
msgstr ""
