# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-09-01 01:05+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:6
#, no-wrap
msgid "Getting Started with gRPC"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:12
msgid "This page explains how to start using gRPC in your Quarkus application.  While this page describes how to configure it with Maven, it is also possible to use Gradle."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:15
msgid "Let's imagine you have a regular Quarkus project, generated from the https://code.quarkus.io[Quarkus project generator].  The default configuration is enough, but you can also select some extensions if you want."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:16
#, no-wrap
msgid "Configuring your project"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:19
msgid "Edit the `pom.xml` file to add the Quarkus gRPC extension dependency (just under `<dependencies>`):"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:26
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.quarkus</groupId>\n"
"  <artifactId>quarkus-grpc</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:30
msgid "Make sure you have `generate-code` goal of `quarkus-maven-plugin` enabled in your `pom.xml`.  If you wish to generate code from different `proto` files for tests, also add the `generate-code-tests` goal:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:50
#, no-wrap
msgid ""
"<build>\n"
"    <plugins>\n"
"        <plugin>\n"
"            <groupId>io.quarkus</groupId>\n"
"            <artifactId>quarkus-maven-plugin</artifactId>\n"
"            <executions>\n"
"                <execution>\n"
"                    <goals>\n"
"                        <goal>generate-code</goal>\n"
"                        <goal>generate-code-tests</goal>\n"
"                        <goal>build</goal>\n"
"                    </goals>\n"
"                </execution>\n"
"            </executions>\n"
"        </plugin>\n"
"    </plugins>\n"
"</build>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:55
msgid "With this configuration, you can put your service and message definitions in the `src/main/proto` directory.  `quarkus-maven-plugin` will generate Java files from your `proto` files.  Alternatively to using the `prepare` goal of the `quarkus-maven-plugin`, you can use `protobuf-maven-plugin` to generate these files, more in <<Generating Java files from proto with protobuf-maven-plugin>>"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:58
msgid "Let's start with a simple _Hello_ service.  Create the `src/main/proto/helloworld.proto` file with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:62
#, no-wrap
msgid "syntax = \"proto3\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:66
#, no-wrap
msgid ""
"option java_multiple_files = true;\n"
"option java_package = \"io.quarkus.example\";\n"
"option java_outer_classname = \"HelloWorldProto\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:68
#, no-wrap
msgid "package helloworld;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:74
#, no-wrap
msgid ""
"// The greeting service definition.\n"
"service Greeter {\n"
"    // Sends a greeting\n"
"    rpc SayHello (HelloRequest) returns (HelloReply) {}\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:79
#, no-wrap
msgid ""
"// The request message containing the user's name.\n"
"message HelloRequest {\n"
"    string name = 1;\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:84
#, no-wrap
msgid ""
"// The response message containing the greetings\n"
"message HelloReply {\n"
"    string message = 1;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:87
msgid "This `proto` file defines a simple service interface with a single method (`SayHello`), and the exchanged messages (`HelloRequest` containing the name and `HelloReply` containing the greeting message)."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:90
msgid "Before coding, we need to generate the classes used to implement and consume gRPC services.  In a terminal, run:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:94
#, no-wrap
msgid "$ mvn compile\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:97
msgid "Once generated, you can look at the `target/generated-sources/grpc` directory:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:111
#, no-wrap
msgid ""
"target/generated-sources/grpc\n"
"└── io\n"
"    └── quarkus\n"
"        └── example\n"
"            ├── GreeterGrpc.java\n"
"            ├── HelloReply.java\n"
"            ├── HelloReplyOrBuilder.java\n"
"            ├── HelloRequest.java\n"
"            ├── HelloRequestOrBuilder.java\n"
"            ├── HelloWorldProto.java\n"
"            └── MutinyGreeterGrpc.java\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:114
msgid "These are the classes we are going to use."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:116
msgid "Every time you update the `proto` files, you need to re-generate the classes (using `mvn compile`)."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:117
#, no-wrap
msgid "Implementing a gRPC service"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:120
msgid "Now that we have the generated classes let's implement our _hello_ service."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:122
msgid "With Quarkus, implementing a service requires to _extend_ the generated service base implementation and expose it as a `@Singleton` CDI bean."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:124
msgid "Don't use `@ApplicationScoped` as the gRPC service implementation cannot be proxied."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:125
#, no-wrap
msgid "Implementing a service"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:128
msgid "Create the `src/main/java/org/acme/HelloService.java` file with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:132
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:166
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:210
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:137
#, no-wrap
msgid ""
"import io.grpc.stub.StreamObserver;\n"
"import io.quarkus.example.GreeterGrpc;\n"
"import io.quarkus.example.HelloReply;\n"
"import io.quarkus.example.HelloRequest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:139
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:173
#, no-wrap
msgid "import javax.inject.Singleton;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:142
#, no-wrap
msgid ""
"@Singleton                                                                                    // <1>\n"
"public class HelloService extends GreeterGrpc.GreeterImplBase {                               // <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:151
#, no-wrap
msgid ""
"    @Override\n"
"    public void sayHello(HelloRequest request, StreamObserver<HelloReply> responseObserver) { // <3>\n"
"        String name = request.getName();\n"
"        String message = \"Hello \" + name;\n"
"        responseObserver.onNext(HelloReply.newBuilder().setMessage(message).build());         // <4>\n"
"        responseObserver.onCompleted();                                                       // <5>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:154
msgid "Expose your implementation as bean"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:155
msgid "Extends the `ImplBase` class. This is a generated class."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:156
msgid "Implement the methods defined in the service definition (here we have a single method)"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:157
msgid "Build and send the response"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:158
msgid "Close the response"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:162
msgid "Quarkus also provides an additional model with Mutiny, a Reactive Programming API integrated in Quarkus.  Learn more about Mutiny on the link:getting-started-reactive#mutiny[Getting Started with Reactive guide].  A Mutiny implementation of this service would be:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:171
#, no-wrap
msgid ""
"import io.quarkus.example.HelloReply;\n"
"import io.quarkus.example.HelloRequest;\n"
"import io.quarkus.example.MutinyGreeterGrpc;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:176
#, no-wrap
msgid ""
"@Singleton\n"
"public class ReactiveHelloService extends MutinyGreeterGrpc.GreeterImplBase {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:184
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<HelloReply> sayHello(HelloRequest request) {\n"
"        return Uni.createFrom().item(() ->\n"
"                HelloReply.newBuilder().setMessage(\"Hello \" + request.getName()).build()\n"
"        );\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:187
msgid "The main differences are the following:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:189
msgid "it extends the `ImplBase` from `MutinyGreeterGrpc` instead of `GreeterGrpc`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:190
msgid "the signature of the method is using Mutiny types"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:191
#, no-wrap
msgid "The gRPC server"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:195
msgid "The services are _served_ by a _server_.  Available services (_CDI beans_) are automatically registered and exposed."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:197
msgid "By default, the server is exposed on `localhost:9000`, and uses _plain-text_ (so no TLS)."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:199
msgid "Run the application using: `mvn quarkus:dev`."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:200
#, no-wrap
msgid "Consuming a gRPC service"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:204
msgid "In this section, we are going to consume the service we expose.  To simplify, we are going to consume the service from the same application, which in the real world, does not make sense."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:206
msgid "Open the existing `org.acme.ExampleResource` class, and edit the content to become:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:214
#, no-wrap
msgid ""
"import io.quarkus.example.GreeterGrpc;\n"
"import io.quarkus.example.HelloRequest;\n"
"import io.quarkus.grpc.runtime.annotations.GrpcService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:221
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.PathParam;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:224
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"public class ExampleResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:228
#, no-wrap
msgid ""
"    @Inject\n"
"    @GrpcService(\"hello\")                     // <1>\n"
"    GreeterGrpc.GreeterBlockingStub client;   // <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:234
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        return \"hello\";\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:241
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/{name}\")\n"
"    public String hello(@PathParam(\"name\") String name) {\n"
"        return client.sayHello(HelloRequest.newBuilder().setName(name).build()).getMessage();  // <3>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:244
msgid "Inject the service and configure its name.This name is used in the application configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:245
msgid "Use the _blocking_ stub (also a generated class)"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:246
msgid "Invoke the service"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:249
msgid "We need to configure the application to indicate where is the `hello` service.  In the `src/main/resources/application.properties` file, add the following property:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:253
#, no-wrap
msgid "quarkus.grpc.clients.hello.host=localhost\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:257
msgid "`hello` is the name of the service used in the `@GrpcService` annotation `host` configures the service host (here it's localhost)."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:259
msgid "Then, open http://localhost:8080/hello/quarkus in a browser, and you should get `Hello quarkus`!"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:260
#, no-wrap
msgid "Packaging the application"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:264
msgid "Like any other Quarkus applications, you can package it with: `mvn package`.  You can also package the application into a native executable with: `mvn package -Pnative`."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:265
#, no-wrap
msgid "Generating Java files from proto with protobuf-maven-plugin"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:269
msgid "Alternatively to using Quarkus code generation to generate stubs for `proto` files, you can also use `protobuf-maven-plugin`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:271
msgid "To do it, first define the 2 following properties in the `<properties>` section:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:276
#, no-wrap
msgid ""
"<grpc.version>{grpc-version}</grpc.version>\n"
"<protoc.version>{protoc-version}</protoc.version>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:279
msgid "They configure the gRPC version and the `protoc` version."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:281
msgid "Then, add to the `build` section the `os-maven-plugin` extension and the `protobuf-maven-plugin` configuration."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:292
#, no-wrap
msgid ""
"<build>\n"
"    <extensions>\n"
"        <extension>\n"
"            <groupId>kr.motd.maven</groupId>\n"
"            <artifactId>os-maven-plugin</artifactId>\n"
"            <version>${os-maven-plugin-version}</version>\n"
"        </extension>\n"
"    </extensions>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:329
#, no-wrap
msgid ""
"    <plugins>\n"
"        <plugin>\n"
"            <groupId>org.xolstice.maven.plugins</groupId>\n"
"            <artifactId>protobuf-maven-plugin</artifactId>      // <1>\n"
"            <version>${protobuf-maven-plugin-version}</version>\n"
"            <configuration>\n"
"                <protocArtifact>com.google.protobuf:protoc:${protoc.version}:exe:${os.detected.classifier}</protocArtifact> // <2>\n"
"                <pluginId>grpc-java</pluginId>\n"
"                <pluginArtifact>io.grpc:protoc-gen-grpc-java:${grpc.version}:exe:${os.detected.classifier}</pluginArtifact>\n"
"                <protocPlugins>\n"
"                    <protocPlugin>\n"
"                        <id>quarkus-grpc-protoc-plugin</id>\n"
"                        <groupId>io.quarkus</groupId>\n"
"                        <artifactId>quarkus-grpc-protoc-plugin</artifactId>\n"
"                        <version>{quarkus-version}</version>\n"
"                        <mainClass>io.quarkus.grpc.protoc.plugin.MutinyGrpcGenerator</mainClass>\n"
"                    </protocPlugin>\n"
"                </protocPlugins>\n"
"            </configuration>\n"
"            <executions>\n"
"                <execution>\n"
"                    <id>compile</id>\n"
"                    <goals>\n"
"                        <goal>compile</goal>\n"
"                        <goal>compile-custom</goal>\n"
"                    </goals>\n"
"                </execution>\n"
"                <execution>\n"
"                    <id>test-compile</id>\n"
"                    <goals>\n"
"                        <goal>test-compile</goal>\n"
"                        <goal>test-compile-custom</goal>\n"
"                    </goals>\n"
"                </execution>\n"
"            </executions>\n"
"        </plugin>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:333
#, no-wrap
msgid ""
"        <!-- ... -->\n"
"    </plugins>\n"
"</build>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:336
msgid "The `protobuf-maven-plugin` that generates stub classes from your gRPC service definition (`proto` files)."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:338
msgid "The class generation uses a tool named `protoc`, which is OS-specific.  That's why we use the `os-maven-plugin` to target the executable compatible with the operating system."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-getting-started.adoc:339
msgid "This configuration instructs the `protobuf-maven-plugin` to generate the default gRPC classes and classes using Mutiny to fit with the Quarkus development experience."
msgstr ""
