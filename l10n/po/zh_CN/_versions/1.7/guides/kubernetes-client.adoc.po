# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-07-11 01:24+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:6
#, no-wrap
msgid "Quarkus - Kubernetes Client"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:13
msgid "Quarkus includes the `kubernetes-client` extension which enables the use of the https://github.com/fabric8io/kubernetes-client[Fabric8 Kubernetes Client] in native mode while also making it easier to work with."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:18
msgid "Having a Kubernetes Client extension in Quarkus is very useful in order to unlock the power of Kubernetes Operators.  Kubernetes Operators are quickly emerging as a new class of Cloud Native applications.  These applications essentially watch the Kubernetes API and react to changes on various resources and can be used to manage the lifecycle of all kinds of complex systems like databases, messaging systems and much much more.  Being able to write such operators in Java with the very low footprint that native images provide is a great match."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:19
#, no-wrap
msgid "Configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:23
msgid "Once you have your Quarkus project configured you can add the `kubernetes-client` extension to your project by running the following command in your project base directory."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:27
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"kubernetes-client\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:30
msgid "This will add the following to your `pom.xml`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:37
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-kubernetes-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:39
#, no-wrap
msgid "Usage"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:43
msgid "Quarkus configures a Bean of type `KubernetesClient` which can be injected into application code using the well known CDI methods.  This client can be configured using various properties as can be seen in the following example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:48
#, no-wrap
msgid ""
"quarkus.kubernetes-client.trust-certs=false\n"
"quarkus.kubernetes-client.namespace=default\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:51
msgid "Note that the full list of properties is available in the https://github.com/quarkusio/quarkus/blob/master/extensions/kubernetes-client/runtime-internal/src/main/java/io/quarkus/kubernetes/client/runtime/KubernetesClientBuildConfig.java[KubernetesClientBuildConfig] class."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:52
#, no-wrap
msgid "Overriding"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:56
msgid "The extension also allows application code to override either of `io.fabric8.kubernetes.client.Config` or `io.fabric8.kubernetes.client.KubernetesClient` which are normally provided by the extension by simply declaring custom versions of those beans."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:58
msgid "An example of this can be seen in the following snippet:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:63
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class KubernetesClientProducer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:70
#, no-wrap
msgid ""
"    @Produces\n"
"    public KubernetesClient kubernetesClient() {\n"
"        // here you would create a custom client\n"
"        return new DefaultKubernetesClient();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:72
#, no-wrap
msgid "Testing"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:77
msgid "To make testing against a mock Kubernetes API extremely simple, Quarkus provides the `KubernetesMockServerTestResource` which automatically launches a mock of the Kubernetes API server and sets the proper environment variables needed so that the Kubernetes Client configures itself to use said mock.  Tests can inject the mock and set it up in any way necessary for the particular testing using the `@MockServer` annotation."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:79
msgid "Let's assume we have a REST endpoint defined like so:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:84
#, no-wrap
msgid ""
"@Path(\"/pod\")\n"
"public class Pods {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:86
#, no-wrap
msgid "    private final KubernetesClient kubernetesClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:90
#, no-wrap
msgid ""
"    public Pods(KubernetesClient kubernetesClient) {\n"
"        this.kubernetesClient = kubernetesClient;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:98
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.APPLICATION_JSON)\n"
"    @Path(\"/{namespace}\")\n"
"    public List<Pod> pods(@PathParam(\"namespace\") String namespace) {\n"
"        return kubernetesClient.pods().inNamespace(namespace).list().getItems();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:101
msgid "We could write a test for this endpoint very easily like so:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:107
#, no-wrap
msgid ""
"@QuarkusTestResource(KubernetesMockServerTestResource.class)\n"
"@QuarkusTest\n"
"public class KubernetesClientTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:110
#, no-wrap
msgid ""
"    @MockServer\n"
"    KubernetesMockServer mockServer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:115
#, no-wrap
msgid ""
"    @BeforeEach\n"
"    public void before() {\n"
"        final Pod pod1 = new PodBuilder().withNewMetadata().withName(\"pod1\").withNamespace(\"test\").and().build();\n"
"        final Pod pod2 = new PodBuilder().withNewMetadata().withName(\"pod2\").withNamespace(\"test\").and().build();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:122
#, no-wrap
msgid ""
"        mockServer.expect().get().withPath(\"/api/v1/namespaces/test/pods\")\n"
"                .andReturn(200,\n"
"                        new PodListBuilder().withNewMetadata().withResourceVersion(\"1\").endMetadata().withItems(pod1, pod2)\n"
"                                .build())\n"
"                .always();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:128
#, no-wrap
msgid ""
"    @Test\n"
"    public void testInteractionWithAPIServer() {\n"
"        RestAssured.when().get(\"/pod/test\").then()\n"
"                .body(\"size()\", is(2));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:130
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:133
msgid "Note that to take advantage of these features, the `quarkus-test-kubernetes-client` dependency needs to be added, for example like so:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:141
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-kubernetes-client</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:143
#, no-wrap
msgid "Note on implementing the Watcher interface"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:148
msgid "Due to the restrictions imposed by GraalVM, extra care needs to be taken when implementing a `io.fabric8.kubernetes.client.Watcher` if the application is intended to work in native mode.  Essentially every `Watcher` implementation needs to specify the Kubernetes model class that it handles via the ``Watcher``'s generic type at class definition time.  To better understand this, suppose we want to watch for changes to Kubernetes `Pod` resources. There are a couple ways to write such a `Watcher` that are guaranteed to work in native:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:156
#, no-wrap
msgid ""
"client.pods().watch(new Watcher<Pod>() {\n"
"    @Override\n"
"    public void eventReceived(Action action, Pod pod) {\n"
"        // do something\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:162
#, no-wrap
msgid ""
"    @Override\n"
"    public void onClose(KubernetesClientException e) {\n"
"        // do something\n"
"    }\n"
"});\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:165
msgid "or"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:173
#, no-wrap
msgid ""
"public class PodResourceWatcher implements Watcher<Pod> {\n"
"    @Override\n"
"    public void eventReceived(Action action, Pod pod) {\n"
"        // do something\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:179
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:220
#, no-wrap
msgid ""
"    @Override\n"
"    public void onClose(KubernetesClientException e) {\n"
"        // do something\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:181
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:194
#, no-wrap
msgid "...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:184
#, no-wrap
msgid "client.pods().watch(new PodResourceWatcher());\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:187
msgid "Note that defining the generic type via a class hierarchy similar to the following example will also work correctly:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:192
#, no-wrap
msgid ""
"public abstract class MyWatcher<S> implements Watcher<S> {\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:202
#, no-wrap
msgid ""
"client.pods().watch(new MyWatcher<Pod>() {\n"
"    @Override\n"
"    public void eventReceived(Action action, Pod pod) {\n"
"        // do something\n"
"    }\n"
"});\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:206
msgid "The following example will **not** work in native mode because the generic type of watcher cannot be determined by looking at the class and method definitions thus making Quarkus unable to properly determine the Kubernetes model class for which reflection registration is needed:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:214
#, no-wrap
msgid ""
"public class ResourceWatcher<T extends HasMetadata> implements Watcher<T> {\n"
"    @Override\n"
"    public void eventReceived(Action action, T resource) {\n"
"        // do something\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:222
#, no-wrap
msgid "client.pods().watch(new ResourceWatcher<Pod>());\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:225
#, no-wrap
msgid "Access to the Kubernetes API"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:229
msgid "In many cases in order to access the Kubernetes API server a `ServiceAccount`, `Role` and `RoleBinding` will be necessary.  An example that allows listing all pods could look something like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:232
#, no-wrap
msgid "---\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:238
#, no-wrap
msgid ""
"apiVersion: v1\n"
"kind: ServiceAccount\n"
"metadata:\n"
"  name: <applicationName>\n"
"  namespace: <namespace>\n"
"---\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:248
#, no-wrap
msgid ""
"apiVersion: rbac.authorization.k8s.io/v1\n"
"kind: Role\n"
"metadata:\n"
"  name: <applicationName>\n"
"  namespace: <namespace>\n"
"rules:\n"
"  - apiGroups: [\"\"]\n"
"    resources: [\"pods\"]\n"
"    verbs: [\"list\"]\n"
"---\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:262
#, no-wrap
msgid ""
"apiVersion: rbac.authorization.k8s.io/v1\n"
"kind: RoleBinding\n"
"metadata:\n"
"  name: <applicationName>\n"
"  namespace: <namespace>\n"
"roleRef:\n"
"  kind: Role\n"
"  name: <applicationName>\n"
"  apiGroup: rbac.authorization.k8s.io\n"
"subjects:\n"
"  - kind: ServiceAccount\n"
"    name: <applicationName>\n"
"    namespace: <namespace>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:266
msgid "Replace `<applicationName>` and `<namespace>` with your values.  Have a look at https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/[Configure Service Accounts for Pods] to get further information."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/kubernetes-client.adoc:267
#, no-wrap
msgid "Configuration Reference"
msgstr ""
