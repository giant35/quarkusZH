# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-07-10 05:19+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/1.7/guides/spring-cache.adoc:6
#, no-wrap
msgid "Quarkus - Quarkus Extension for Spring Cache API"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/spring-cache.adoc:12
msgid "While users are encouraged to use link:cache[Quarkus annotations for caching], Quarkus nevertheless provides a compatibility layer for Spring Cache annotations in the form of the `spring-cache` extension."
msgstr "ユーザーは link:cache[キャッシュ用のQuarkusアノテーション] を使用することが推奨されていますが、Quarkusはそれにもかかわらず、 `spring-cache` エクステンションの形でSpring Cacheアノテーションの互換性レイヤーを提供しています。"

#. type: Plain text
#: upstream/_versions/1.7/guides/spring-cache.adoc:14
msgid "This guide explains how a Quarkus application can leverage the well known Spring Cache annotations to enable application data caching for their Spring beans."
msgstr "このガイドでは、Quarkusアプリケーションがよく知られているSpring Cacheアノテーションを活用して、Spring Beanのアプリケーションデータのキャッシュを可能にする方法を説明します。"

#. type: Title ==
#: upstream/_versions/1.7/guides/spring-cache.adoc:17
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_versions/1.7/guides/spring-cache.adoc:20
msgid "To complete this guide, you need:"
msgstr "このガイドを完成させるには、以下が必要です:"

#. type: Plain text
#: upstream/_versions/1.7/guides/spring-cache.adoc:22
msgid "less than 15 minutes"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/spring-cache.adoc:23
msgid "an IDE"
msgstr "IDE"

#. type: Plain text
#: upstream/_versions/1.7/guides/spring-cache.adoc:24
msgid "JDK 1.8+ installed with `JAVA_HOME` configured appropriately"
msgstr "JDK 1.8+ がインストールされ、 `JAVA_HOME`  が適切に設定されていること"

#. type: Plain text
#: upstream/_versions/1.7/guides/spring-cache.adoc:25
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Plain text
#: upstream/_versions/1.7/guides/spring-cache.adoc:26
msgid "Some familiarity with the Spring DI extension"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/spring-cache.adoc:28
#, no-wrap
msgid "Creating the Maven project"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/spring-cache.adoc:31
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/spring-cache.adoc:41
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=spring-cache-quickstart \\\n"
"    -DclassName=\"org.acme.spring.cache.GreeterResource\" \\\n"
"    -Dpath=\"/greeting\" \\\n"
"    -Dextensions=\"spring-di,spring-cache\"\n"
"cd spring-cache-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/spring-cache.adoc:44
msgid "This command generates a Maven project with a REST endpoint and imports the `spring-cache` and `spring-di` extensions."
msgstr "このコマンドは、REST エンドポイントを持つ Maven プロジェクトを生成し、 `spring-cache` と `spring-di` のエクステンションをインポートします。"

#. type: Plain text
#: upstream/_versions/1.7/guides/spring-cache.adoc:47
msgid "If you already have your Quarkus project configured, you can add the `spring-cache` extension to your project by running the following command in your project base directory:"
msgstr "すでにQuarkusプロジェクトが設定されている場合は、プロジェクトのベースディレクトリーで以下のコマンドを実行することで、プロジェクトに `spring-cache` エクステンションを追加することができます。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/spring-cache.adoc:51
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"spring-cache\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/spring-cache.adoc:54
msgid "This will add the following to your `pom.xml`:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: delimited block -
#: upstream/_versions/1.7/guides/spring-cache.adoc:61
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-spring-cache</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/spring-cache.adoc:63
#, no-wrap
msgid "Creating the REST API"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/spring-cache.adoc:67
msgid "Let's start by creating a service which will simulate an extremely slow call to an external meteorological service.  Create `src/main/java/org/acme/spring/cache/WeatherForecastService.java` with the following content:"
msgstr "まずは、外部の気象サービスへの非常に遅い呼び出しをシミュレートするサービスを作成してみましょう。以下の内容で `src/main/java/org/acme/spring/cache/WeatherForecastService.java` を作成します。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/spring-cache.adoc:71
#: upstream/_versions/1.7/guides/spring-cache.adoc:112
#: upstream/_versions/1.7/guides/spring-cache.adoc:141
#, no-wrap
msgid "package org.acme.spring.cache;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/spring-cache.adoc:73
#: upstream/_versions/1.7/guides/spring-cache.adoc:206
#, no-wrap
msgid "import java.time.LocalDate;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/spring-cache.adoc:75
#, no-wrap
msgid "import org.springframework.stereotype.Component;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/spring-cache.adoc:78
#: upstream/_versions/1.7/guides/spring-cache.adoc:212
#, no-wrap
msgid ""
"@Component\n"
"public class WeatherForecastService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/spring-cache.adoc:87
#, no-wrap
msgid ""
"    public String getDailyForecast(LocalDate date, String city) {\n"
"        try {\n"
"            Thread.sleep(2000L); // <1>\n"
"        } catch (InterruptedException e) {\n"
"            Thread.currentThread().interrupt();\n"
"        }\n"
"        return date.getDayOfWeek() + \" will be \" + getDailyResult(date.getDayOfMonth() % 4) + \" in \" + city;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/spring-cache.adoc:103
#: upstream/_versions/1.7/guides/spring-cache.adoc:238
#, no-wrap
msgid ""
"    private String getDailyResult(int dayOfMonthModuloFour) {\n"
"        switch (dayOfMonthModuloFour) {\n"
"            case 0:\n"
"                return \"sunny\";\n"
"            case 1:\n"
"                return \"cloudy\";\n"
"            case 2:\n"
"                return \"chilly\";\n"
"            case 3:\n"
"                return \"rainy\";\n"
"            default:\n"
"                throw new IllegalArgumentException();\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/spring-cache.adoc:105
msgid "This is where the slowness comes from."
msgstr "遅さはここに由来します。"

#. type: Plain text
#: upstream/_versions/1.7/guides/spring-cache.adoc:108
msgid "We also need a class which contains the response sent to the users when they ask for the next three days weather forecast.  Create `src/main/java/org/acme/spring/cache/WeatherForecast.java` this way:"
msgstr "また、ユーザーが3日間の天気予報を聞いてきたときに、ユーザーに送信されるレスポンスを含むクラスも必要です。 `src/main/java/org/acme/spring/cache/WeatherForecast.java` をこのように作成します:"

#. type: delimited block -
#: upstream/_versions/1.7/guides/spring-cache.adoc:114
#, no-wrap
msgid "import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/spring-cache.adoc:116
#, no-wrap
msgid "public class WeatherForecast {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/spring-cache.adoc:118
#, no-wrap
msgid "    private List<String> dailyForecasts;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/spring-cache.adoc:120
#, no-wrap
msgid "    private long executionTimeInMs;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/spring-cache.adoc:125
#, no-wrap
msgid ""
"    public WeatherForecast(List<String> dailyForecasts, long executionTimeInMs) {\n"
"        this.dailyForecasts = dailyForecasts;\n"
"        this.executionTimeInMs = executionTimeInMs;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/spring-cache.adoc:129
#, no-wrap
msgid ""
"    public List<String> getDailyForecasts() {\n"
"        return dailyForecasts;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/spring-cache.adoc:134
#, no-wrap
msgid ""
"    public long getExecutionTimeInMs() {\n"
"        return executionTimeInMs;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/spring-cache.adoc:137
msgid "Now, we just need to update the generated `WeatherForecastResource` class to use the service and response:"
msgstr "あとは、サービスとレスポンスを使用するようにに生成された `WeatherForecastResource` クラスを更新するだけです。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/spring-cache.adoc:145
#, no-wrap
msgid ""
"import java.time.LocalDate;\n"
"import java.util.Arrays;\n"
"import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/spring-cache.adoc:151
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/spring-cache.adoc:153
#, no-wrap
msgid "import org.jboss.resteasy.annotations.jaxrs.QueryParam;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/spring-cache.adoc:156
#, no-wrap
msgid ""
"@Path(\"/weather\")\n"
"public class WeatherForecastResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/spring-cache.adoc:159
#, no-wrap
msgid ""
"    @Inject\n"
"    WeatherForecastService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/spring-cache.adoc:173
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.APPLICATION_JSON)\n"
"    public WeatherForecast getForecast(@QueryParam String city, @QueryParam long daysInFuture) { // <1>\n"
"        long executionStart = System.currentTimeMillis();\n"
"        List<String> dailyForecasts = Arrays.asList(\n"
"                service.getDailyForecast(LocalDate.now().plusDays(daysInFuture), city),\n"
"                service.getDailyForecast(LocalDate.now().plusDays(daysInFuture + 1L), city),\n"
"                service.getDailyForecast(LocalDate.now().plusDays(daysInFuture + 2L), city)\n"
"        );\n"
"        long executionEnd = System.currentTimeMillis();\n"
"        return new WeatherForecast(dailyForecasts, executionEnd - executionStart);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/spring-cache.adoc:176
msgid "If the `daysInFuture` query parameter is omitted, the three days weather forecast will start from the current day.  Otherwise, it will start from the current day plus the `daysInFuture` value."
msgstr "`daysInFuture` クエリパラメーターが省略された場合、3 日間の天気予報は現在の日から始まります。それ以外の場合は、現在の日に `daysInFuture` の値を加えたものから始まります。"

#. type: Plain text
#: upstream/_versions/1.7/guides/spring-cache.adoc:178
msgid "We're all done! Let's check if everything's working."
msgstr "完了です!うまくいっているか確認してみましょう"

#. type: Plain text
#: upstream/_versions/1.7/guides/spring-cache.adoc:180
msgid "First, run the application using `./mvnw compile quarkus:dev` from the project directory."
msgstr "まず、プロジェクトディレクトリーから `./mvnw compile quarkus:dev` を使ってアプリケーションを実行します。"

#. type: Plain text
#: upstream/_versions/1.7/guides/spring-cache.adoc:183
msgid "Then, call `http://localhost:8080/weather?city=Raleigh` from a browser.  After six long seconds, the application will answer something like this:"
msgstr "次に、 `http://localhost:8080/weather?city=Raleigh` ブラウザからを呼び出します。6秒ほど長い時間が経過すると、アプリケーションは次のような回答をします。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/spring-cache.adoc:187
#, no-wrap
msgid "{\"dailyForecasts\":[\"MONDAY will be cloudy in Raleigh\",\"TUESDAY will be chilly in Raleigh\",\"WEDNESDAY will be rainy in Raleigh\"],\"executionTimeInMs\":6001}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.7/guides/spring-cache.adoc:192
msgid "The response content may vary depending on the day you run the code."
msgstr "コードを実行する日によってレスポンスの内容が異なる場合があります。"

#. type: Plain text
#: upstream/_versions/1.7/guides/spring-cache.adoc:195
msgid "You can try calling the same URL again and again, it will always take six seconds to answer."
msgstr "何度も同じURLに電話をかけてみても、必ず6秒でレスポンスが返却されます。"

#. type: Title ==
#: upstream/_versions/1.7/guides/spring-cache.adoc:196
#, no-wrap
msgid "Enabling the cache"
msgstr "キャッシュの有効化"

#. type: Plain text
#: upstream/_versions/1.7/guides/spring-cache.adoc:200
msgid "Now that your Quarkus application is up and running, let's tremendously improve its response time by caching the external meteorological service responses.  Update the `WeatherForecastService` class as follows:"
msgstr "Quarkusアプリケーションが稼働しているので、外部の気象サービスのレスポンスをキャッシュすることで、レスポンスタイムを大幅に改善してみましょう。 `WeatherForecastService` クラスを以下のように更新します:"

#. type: delimited block -
#: upstream/_versions/1.7/guides/spring-cache.adoc:204
#, no-wrap
msgid "package org.acme.cache;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/spring-cache.adoc:209
#, no-wrap
msgid ""
"import org.springframework.cache.annotation.Cacheable;\n"
"import org.springframework.stereotype.Component;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/spring-cache.adoc:222
#, no-wrap
msgid ""
"    @Cacheable(\"weather-cache\") // <1>\n"
"    public String getDailyForecast(LocalDate date, String city) {\n"
"        try {\n"
"            Thread.sleep(2000L);\n"
"        } catch (InterruptedException e) {\n"
"            Thread.currentThread().interrupt();\n"
"        }\n"
"        return date.getDayOfWeek() + \" will be \" + getDailyResult(date.getDayOfMonth() % 4) + \" in \" + city;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/spring-cache.adoc:240
msgid "We only added this annotation (and the associated import of course)."
msgstr "このアノテーション(もちろん関連するインポートも)を追加しただけです。"

#. type: Plain text
#: upstream/_versions/1.7/guides/spring-cache.adoc:244
msgid "Let's try to call `http://localhost:8080/weather?city=Raleigh` again.  You're still waiting a long time before receiving an answer.  This is normal since the server just restarted and the cache was empty."
msgstr " `http://localhost:8080/weather?city=Raleigh` をもう一度実行してみましょう。レスポンスが来るまでにまだ長い時間待たされています。これはサーバーが再起動したばかりでキャッシュが空になっているので正常です。"

#. type: Plain text
#: upstream/_versions/1.7/guides/spring-cache.adoc:247
msgid "Wait a second! The server restarted by itself after the `WeatherForecastService` update? Yes, this is one of Quarkus amazing features for developers called `live coding`."
msgstr "ちょっと待って!? `WeatherForecastService` のアップデート後、サーバーが勝手に再起動した?はい、これは、 `live coding` と呼ばれる開発者のためのQuarkusの驚くべき機能の一つです。"

#. type: Plain text
#: upstream/_versions/1.7/guides/spring-cache.adoc:250
msgid "Now that the cache was loaded during the previous call, try calling the same URL.  This time, you should get a super fast answer with an `executionTimeInMs` value close to 0."
msgstr "前回の呼び出しでキャッシュが読み込まれたので、同じ URL を呼び出してみてください。今度は、 `executionTimeInMs` の値が 0 に近い超高速な応答が返ってくるはずです。"

#. type: Plain text
#: upstream/_versions/1.7/guides/spring-cache.adoc:253
msgid "Let's see what happens if we start from one day in the future using the `http://localhost:8080/weather?city=Raleigh&daysInFuture=1` URL.  You should get an answer two seconds later since two of the requested days were already loaded in the cache."
msgstr "`http://localhost:8080/weather?city=Raleigh&daysInFuture=1` のURLで、未来のある日から始めるとどうなるか見てみましょう。要求された日のうち2つはすでにキャッシュに読み込まれていたので、2秒後に回答が得られるはずです。"

#. type: Plain text
#: upstream/_versions/1.7/guides/spring-cache.adoc:256
msgid "You can also try calling the same URL with a different city and see the cache in action again.  The first call will take six seconds and the following ones will be answered immediately."
msgstr "また、同じURLを別の都市で呼び出してみて、再度キャッシュの動作を確認することもできます。最初の呼出には6秒ほどかかり、次の呼出にはすぐに出ます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/spring-cache.adoc:258
msgid "Congratulations! You just added application data caching to your Quarkus application with a single line of code!"
msgstr "おめでとうございます。たった1行のコードでQuarkusアプリケーションにアプリケーションデータのキャッシングを追加しました。"

#. type: Title ==
#: upstream/_versions/1.7/guides/spring-cache.adoc:259
#, no-wrap
msgid "Supported features"
msgstr "サポートされている機能"

#. type: Plain text
#: upstream/_versions/1.7/guides/spring-cache.adoc:262
msgid "Quarkus provides compatibility with the following Spring Cache annotations:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/spring-cache.adoc:264
msgid "`@Cacheable`"
msgstr "`@Cacheable`"

#. type: Plain text
#: upstream/_versions/1.7/guides/spring-cache.adoc:265
msgid "`@CachePut`"
msgstr "`@CachePut`"

#. type: Plain text
#: upstream/_versions/1.7/guides/spring-cache.adoc:266
msgid "`@CacheEvict`"
msgstr "`@CacheEvict`"

#. type: Plain text
#: upstream/_versions/1.7/guides/spring-cache.adoc:270
msgid "Note that in this first version of the Spring Cache annotations extension, not all features of these annotations are supported (with proper errors being logged when trying to use an unsupported feature).  However, additional features are planned for future releases."
msgstr "この最初のバージョンの Spring Cache アノテーションエクステンションでは、これらのアノテーションのすべての機能がサポートされているわけではないことに注意してください (サポートされていない機能を使用しようとすると、適切なエラーがログに記録されます)。しかし、今後のリリースでは追加機能が計画されています。"

#. type: Title ==
#: upstream/_versions/1.7/guides/spring-cache.adoc:271
#, no-wrap
msgid "More Spring guides"
msgstr "その他のSpringガイド"

#. type: Plain text
#: upstream/_versions/1.7/guides/spring-cache.adoc:274
msgid "Quarkus has more Spring compatibility features. See the following guides for more details:"
msgstr "Quarkusには、より多くのSpring互換機能があります。詳細については、以下のガイドを参照してください。"

#. type: Plain text
#: upstream/_versions/1.7/guides/spring-cache.adoc:276
msgid "link:spring-di[Quarkus - Extension for Spring DI]"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/spring-cache.adoc:277
msgid "link:spring-web[Quarkus - Extension for Spring Web]"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/spring-cache.adoc:278
msgid "link:spring-security[Quarkus - Extension for Spring Security]"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/spring-cache.adoc:279
msgid "link:spring-data-jpa[Quarkus - Extension for Spring Data JPA]"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/spring-cache.adoc:280
msgid "link:spring-cloud-config-client[Quarkus - Reading properties from Spring Cloud Config Server]"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/spring-cache.adoc:281
msgid "link:spring-boot-properties[Quarkus - Extension for Spring Boot properties]"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/spring-cache.adoc:281
msgid "link:spring-scheduled[Quarkus - Extension for Spring Scheduled]"
msgstr ""
