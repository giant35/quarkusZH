# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-07-10 05:19+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/1.7/guides/security-built-in-authentication.adoc:6
#, no-wrap
msgid "Quarkus - Built-In Authentication Support"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-built-in-authentication.adoc:11
msgid "This document describes the Quarkus built-in authentication mechanisms for HTTP based FORM, BASIC and Mutual TLS authentication as well as the proactive authentication."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/security-built-in-authentication.adoc:13
#, no-wrap
msgid "Basic Authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-built-in-authentication.adoc:17
msgid "To enable basic authentication set `quarkus.http.auth.basic=true`. You must also have at least one extension installed that provides a username/password based `IdentityProvider`, such as link:security-jdbc[Elytron JDBC]."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-built-in-authentication.adoc:19
msgid "Please see link:security#identity-providers[Security Identity Providers] for more information."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/security-built-in-authentication.adoc:21
#, no-wrap
msgid "Form Based Authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-built-in-authentication.adoc:27
msgid "Quarkus provides form based authentication that works in a similar manner to traditional Servlet form based auth. Unlike traditional form authentication, the authenticated user is not stored in an HTTP session, as Quarkus does not provide clustered HTTP session support. Instead the authentication information is stored in an encrypted cookie, which can be read by all members of the cluster (provided they all share the same encryption key)."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-built-in-authentication.adoc:33
msgid "The encryption key can be set using the `quarkus.http.auth.session.encryption-key` property, and it must be at least 16 characters long. This key is hashed using SHA-256 and the resulting digest is used as a key for AES-256 encryption of the cookie value. This cookie contains an expiry time as part of the encrypted value, so all nodes in the cluster must have their clocks synchronized. At one minute intervals a new cookie will be generated with an updated expiry time if the session is in use."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-built-in-authentication.adoc:35
msgid "The following properties can be used to configure form based auth:"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/security-built-in-authentication.adoc:39
#, no-wrap
msgid "Mutual TLS Authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-built-in-authentication.adoc:42
msgid "Quarkus provides mTLS authentication so that you can authenticate users based on their X.509 certificates."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-built-in-authentication.adoc:44
msgid "To use this authentication method, you should first enable SSL for your application. For more details, check the link:http-reference[Supporting secure connections with SSL] guide."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-built-in-authentication.adoc:48
msgid "Once your application is accepting secure connections, the next step is to configure a `quarkus.http.ssl.certificate.trust-store-file` holding all the certificates that your application should trust as well as how your application should ask for certificates when a client (e.g.: browser or another service) tries to access one of its protected resources."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-built-in-authentication.adoc:56
#, no-wrap
msgid ""
"quarkus.http.ssl.certificate.key-store-file=server-keystore.jks            <1>\n"
"quarkus.http.ssl.certificate.key-store-password=the_key_store_secret\n"
"quarkus.http.ssl.certificate.trust-store-file=server-truststore.jks        <2>\n"
"quarkus.http.ssl.certificate.trust-store-password=the_trust_store_secret\n"
"quarkus.http.ssl.client-auth=required                                      <3>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-built-in-authentication.adoc:59
#, no-wrap
msgid ""
"quarkus.http.auth.permission.default.paths=/*                              <4>\n"
"quarkus.http.auth.permission.default.policy=authenticated\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-built-in-authentication.adoc:61
msgid "Configures a key store where the server's private key is located."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-built-in-authentication.adoc:62
msgid "Configures a trust store from where the trusted certificates are going to be loaded from."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-built-in-authentication.adoc:65
msgid "Defines that the server should *always* ask certificates from clients. You can relax this behavior by using `REQUEST` so that the server should still accept requests without a certificate. Useful when you are also supporting authentication methods other than mTLS."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-built-in-authentication.adoc:66
msgid "Defines a policy where only authenticated users should have access to resources from your application."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-built-in-authentication.adoc:69
msgid "Once the incoming request matches a valid certificate in the truststore, your application should be able to obtain the subject by just injecting a `SecurityIdentity` as follows:"
msgstr ""

#. type: Block title
#: upstream/_versions/1.7/guides/security-built-in-authentication.adoc:71
#, no-wrap
msgid "Obtaining the subject"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-built-in-authentication.adoc:76
#, no-wrap
msgid ""
"@Inject\n"
"SecurityIdentity identity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-built-in-authentication.adoc:82
#, no-wrap
msgid ""
"@GET\n"
"@Produces(MediaType.TEXT_PLAIN)\n"
"public String hello() {\n"
"    return String.format(\"Hello, %s\", identity.getPrincipal().getName());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-built-in-authentication.adoc:85
msgid "You should also be able to get the certificate as follows:"
msgstr ""

#. type: Block title
#: upstream/_versions/1.7/guides/security-built-in-authentication.adoc:87
#, no-wrap
msgid "Obtaining the certificate"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-built-in-authentication.adoc:92
#, no-wrap
msgid ""
"import java.security.cert.X509Certificate;\n"
"import io.quarkus.security.credential.CertificateCredential;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-built-in-authentication.adoc:95
#, no-wrap
msgid ""
"CertificateCredential credential = identity.getCredential(CertificateCredential.class);\n"
"X509Certificate certificate = credential.getCertificate();\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/security-built-in-authentication.adoc:97
#, no-wrap
msgid "Authorization"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-built-in-authentication.adoc:101
msgid "The information from the client certificate can be used to enhance Quarkus `SecurityIdentity`. For example, one can add new roles after checking a client certificate subject name, etc.  Please see the link:security-customization#security-identity-customization[SecurityIdentity Customization] section for more information about customizing Quarkus `SecurityIdentity`."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/security-built-in-authentication.adoc:103
#, no-wrap
msgid "Proactive Authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-built-in-authentication.adoc:107
msgid "By default Quarkus does what we call proactive authentication. This means that if an incoming request has a credential then that request will always be authenticated (even if the target page does not require authentication)."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-built-in-authentication.adoc:110
msgid "This means that requests with an invalid credential will always be rejected, even for public pages. You can change this behavior and only authenticate when required by setting `quarkus.http.auth.proactive=false`."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/security-built-in-authentication.adoc:111
#, no-wrap
msgid "References"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-built-in-authentication.adoc:113
msgid "link:security[Quarkus Security]"
msgstr ""
