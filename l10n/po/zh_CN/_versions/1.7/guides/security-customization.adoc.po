# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-07-10 05:19+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/1.7/guides/security-customization.adoc:6
#, no-wrap
msgid "Quarkus - Security Tips and Tricks"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/security-customization.adoc:10
#, no-wrap
msgid "HttpAuthenticationMechanism Customization"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-customization.adoc:14
msgid "One can customize `HttpAuthenticationMechanism` by registering a CDI implementation bean.  In the example below the custom authenticator delegates to `JWTAuthMechanism` provided by `quarkus-smallrye-jwt`:"
msgstr "CDI実装Beanを登録することで、 `HttpAuthenticationMechanism` をカスタマイズすることができます。以下の例では、カスタム認証機能は `quarkus-smallrye-jwt` によって提供される `JWTAuthMechanism` にデリゲートします。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-customization.adoc:21
#, no-wrap
msgid ""
"@Alternative\n"
"@Priority(1)\n"
"@ApplicationScoped\n"
"public class CustomAwareJWTAuthMechanism implements HttpAuthenticationMechanism {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-customization.adoc:23
#, no-wrap
msgid "\tprivate static final Logger LOG = LoggerFactory.getLogger(CustomAwareJWTAuthMechanism.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-customization.adoc:26
#, no-wrap
msgid ""
"\t@Inject\n"
"\tJWTAuthMechanism delegate;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-customization.adoc:32
#, no-wrap
msgid ""
"\t@Override\n"
"\tpublic Uni<SecurityIdentity> authenticate(RoutingContext context, IdentityProviderManager identityProviderManager) {\n"
"\t    // do some custom action and delegate\t\n"
"            return delegate.authenticate(context, identityProviderManager);\n"
"\t}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-customization.adoc:37
#, no-wrap
msgid ""
"\t@Override\n"
"\tpublic Uni<ChallengeData> getChallenge(RoutingContext context) {\n"
"\t\treturn delegate.getChallenge(context);\n"
"\t}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-customization.adoc:42
#, no-wrap
msgid ""
"\t@Override\n"
"\tpublic Set<Class<? extends AuthenticationRequest>> getCredentialTypes() {\n"
"\t\treturn delegate.getCredentialTypes();\n"
"\t}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-customization.adoc:47
#, no-wrap
msgid ""
"\t@Override\n"
"\tpublic HttpCredentialTransport getCredentialTransport() {\n"
"\t\treturn delegate.getCredentialTransport();\n"
"\t}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-customization.adoc:49
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/security-customization.adoc:52
#, no-wrap
msgid "Security Identity Customization"
msgstr "セキュリティー・アイデンティティのカスタマイズ"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-customization.adoc:55
msgid "Internally, the identity providers create and update an instance of the `io.quarkus.security.identity.SecurityIdentity` class which holds the principal, roles, credentials which were used to authenticate the client (user) and other security attributes. An easy option to customize `SecurityIdentity` is to register a custom `SecurityIdentityAugmentor`. For example, the augmentor below adds an addition role:"
msgstr "内部的には、アイデンティティ・プロバイダは、プリンシパル、役割、クライアント(ユーザー)の認証に使用されたクレデンシャル、 およびその他のセキュリティー属性を保持する `io.quarkus.security.identity.SecurityIdentity` クラスのインスタンスを作成して更新します。 `SecurityIdentity` をカスタマイズする簡単なオプションは、カスタム `SecurityIdentityAugmentor` を登録することです。例えば、以下のエクステンションは、追加のロールを追加します。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-customization.adoc:63
#, no-wrap
msgid ""
"import io.quarkus.security.identity.AuthenticationRequestContext;\n"
"import io.quarkus.security.identity.SecurityIdentity;\n"
"import io.quarkus.security.identity.SecurityIdentityAugmentor;\n"
"import io.quarkus.security.runtime.QuarkusSecurityIdentity;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-customization.adoc:66
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import java.util.function.Supplier;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-customization.adoc:69
#: upstream/_versions/1.7/guides/security-customization.adoc:116
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class RolesAugmentor implements SecurityIdentityAugmentor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-customization.adoc:74
#: upstream/_versions/1.7/guides/security-customization.adoc:121
#, no-wrap
msgid ""
"    @Override\n"
"    public int priority() {\n"
"        return 0;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-customization.adoc:78
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<SecurityIdentity> augment(SecurityIdentity identity, AuthenticationRequestContext context) {\n"
"        return Uni.createFrom().item(build(identity));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-customization.adoc:82
#, no-wrap
msgid ""
"        // Do 'return context.runBlocking(build(identity));'\n"
"        // if a blocking call is required to customize the identity\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-customization.adoc:89
#, no-wrap
msgid ""
"    private Supplier<SecurityIdentity> build(SecurityIdentity identity) {\n"
"        if(identity.isAnonymous()) {\n"
"            return () -> identity;\n"
"        } else {\n"
"            // create a new builder and copy principal, attributes, credentials and roles from the original identity\n"
"            QuarkusSecurityIdentity.Builder builder = QuarkusSecurityIdentity.builder(identity);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-customization.adoc:96
#, no-wrap
msgid ""
"            // add custom role source here\n"
"            builder.addRole(\"dummy\");\n"
"            return builder::build;\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-customization.adoc:99
msgid "Here is another example showing how to use the client certificate available in the current link:security-built-in-authentication#mutual-tls[Mutual TLS] request to add more roles:"
msgstr "ここでは、現在の link:security-built-in-authentication#mutual-tls[相互TLS] リクエストで利用可能なクライアント証明書を使用して、より多くのロールを追加する方法を示すもう一つの例を示します。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-customization.adoc:109
#, no-wrap
msgid ""
"import java.security.cert.X509Certificate;\n"
"import io.quarkus.security.credential.CertificateCredential;\n"
"import io.quarkus.security.identity.AuthenticationRequestContext;\n"
"import io.quarkus.security.identity.SecurityIdentity;\n"
"import io.quarkus.security.identity.SecurityIdentityAugmentor;\n"
"import io.quarkus.security.runtime.QuarkusSecurityIdentity;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-customization.adoc:113
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import java.util.function.Supplier;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-customization.adoc:126
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<SecurityIdentity> augment(SecurityIdentity identity, AuthenticationRequestContext context) {\n"
"        return Uni.createFrom().item(build(identity));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-customization.adoc:130
#, no-wrap
msgid ""
"    private Supplier<SecurityIdentity> build(SecurityIdentity identity) {\n"
"        // create a new builder and copy principal, attributes, credentials and roles from the original identity\n"
"        QuarkusSecurityIdentity.Builder builder = QuarkusSecurityIdentity.builder(identity);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-customization.adoc:137
#, no-wrap
msgid ""
"        CertificateCredential certificate = identity.getCredential(CertificateCredential.class);\n"
"        if (certificate != null) {\n"
"            builder.addRoles(extractRoles(certificate.getCertificate()));\n"
"        }\n"
"        return builder::build;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-customization.adoc:140
#, no-wrap
msgid ""
"    private Set<String> extractRoles(X509Certificate certificate) {\n"
"        String name = certificate.getSubjectX500Principal().getName();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-customization.adoc:151
#, no-wrap
msgid ""
"        switch (name) {\n"
"            case \"CN=client\":\n"
"                return Collections.singleton(\"user\");\n"
"            case \"CN=guest-client\":\n"
"                return Collections.singleton(\"guest\");\n"
"            default:\n"
"                return Collections.emptySet();\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/security-customization.adoc:153
#, no-wrap
msgid "Custom JAX-RS SecurityContext"
msgstr "カスタム JAX-RS SecurityContext"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-customization.adoc:156
msgid "If you use JAX-RS `ContainerRequestFilter` to set a custom JAX-RS `SecurityContext` then make sure `ContainerRequestFilter` runs in the JAX-RS pre-match phase by adding a `@PreMatching` annotation to it for this custom security context to be linked with Quarkus `SecurityIdentity`, for example:"
msgstr "JAX-RS `ContainerRequestFilter` を使用してカスタム JAX-RS `SecurityContext` を設定する場合は、 `ContainerRequestFilter` が JAX-RS のプレマッチフェーズで実行されていることを確認し、このカスタムセキュリティーコンテキストが Quarkus `SecurityIdentity` とリンクされるように `@PreMatching` アノテーションを追加します。例:"

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-customization.adoc:160
#, no-wrap
msgid "import java.security.Principal;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-customization.adoc:166
#, no-wrap
msgid ""
"import javax.ws.rs.container.ContainerRequestContext;\n"
"import javax.ws.rs.container.ContainerRequestFilter;\n"
"import javax.ws.rs.container.PreMatching;\n"
"import javax.ws.rs.core.SecurityContext;\n"
"import javax.ws.rs.ext.Provider;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-customization.adoc:185
#, no-wrap
msgid ""
"@Provider\n"
"@PreMatching\n"
"public class SecurityOverrideFilter implements ContainerRequestFilter {\n"
"    @Override\n"
"    public void filter(ContainerRequestContext requestContext) throws IOException {\n"
"        String user = requestContext.getHeaders().getFirst(\"User\");\n"
"        String role = requestContext.getHeaders().getFirst(\"Role\");\n"
"        if (user != null && role != null) {\n"
"            requestContext.setSecurityContext(new SecurityContext() {\n"
"                @Override\n"
"                public Principal getUserPrincipal() {\n"
"                    return new Principal() {\n"
"                        @Override\n"
"                        public String getName() {\n"
"                            return user;\n"
"                        }\n"
"                    };\n"
"                }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-customization.adoc:190
#, no-wrap
msgid ""
"                @Override\n"
"                public boolean isUserInRole(String r) {\n"
"                    return role.equals(r);\n"
"                }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-customization.adoc:195
#, no-wrap
msgid ""
"                @Override\n"
"                public boolean isSecure() {\n"
"                    return false;\n"
"                }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-customization.adoc:202
#, no-wrap
msgid ""
"                @Override\n"
"                public String getAuthenticationScheme() {\n"
"                    return \"basic\";\n"
"                }\n"
"            });\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-customization.adoc:205
#, no-wrap
msgid ""
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/security-customization.adoc:207
#, no-wrap
msgid "Disabling Authorization"
msgstr "認可の無効化"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-customization.adoc:210
msgid "If you have a good reason to disable the authorization (for example, when testing) then you can register a custom `AuthorizationController`:"
msgstr "認可を無効にする正当な理由がある場合(テスト時など)は、カスタムの `AuthorizationController` を登録してください。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-customization.adoc:219
#, no-wrap
msgid ""
"@Alternative\n"
"@Priority(Interceptor.Priority.LIBRARY_AFTER)\n"
"@ApplicationScoped\n"
"public class DisabledAuthController extends AuthorizationController {\n"
"    @ConfigProperty(name = \"disable.authorization\")\n"
"    boolean disableAuthorization;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-customization.adoc:225
#, no-wrap
msgid ""
"    @Override\n"
"    public boolean isAuthorizationEnabled() {\n"
"        return disableAuthorization;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/security-customization.adoc:227
#, no-wrap
msgid "Registering Security Providers"
msgstr "セキュリティー プロバイダの登録"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-customization.adoc:233
msgid "When running in native mode, the default behavior for GraalVM native executable generation is to only include the main \"SUN\" provider unless you have enabled SSL, in which case all security providers are registered. If you are not using SSL, then you can selectively register security providers by name using the `quarkus.security.security-providers` property. The following example illustrates configuration to register the \"SunRsaSign\" and \"SunJCE\" security providers:"
msgstr "ネイティブモードで実行している場合、GraalVMネイティブ実行ファイル生成のデフォルトの動作は、SSLを有効にしていない限り、メインの「SUN」プロバイダのみを含めるようになっています。SSLを有効にしている場合は、すべてのセキュリティープロバイダが登録されます。SSLを使用していない場合は、 `quarkus.security.security-providers` プロパティーを使用して、セキュリティープロバイダを名前で選択的に登録することができます。以下の例では、「SunRsaSign」と「SunJCE」のセキュリティープロバイダを登録するための設定を説明します。"

#. type: Block title
#: upstream/_versions/1.7/guides/security-customization.adoc:234
#, no-wrap
msgid "Example Security Providers Configuration"
msgstr "セキュリティー プロバイダの設定例"

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-customization.adoc:238
#, no-wrap
msgid "quarkus.security.security-providers=SunRsaSign,SunJCE\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/security-customization.adoc:240
#, no-wrap
msgid "Reactive Security"
msgstr "Reactive Security"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-customization.adoc:243
msgid "If you are going to use security in a reactive environment, you will likely need SmallRye Context Propagation:"
msgstr "リアクティブな環境でセキュリティーを使用する場合は、SmallRye Context Propagationが必要になるでしょう。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-customization.adoc:250
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.quarkus</groupId>\n"
"  <artifactId>quarkus-smallrye-context-propagation</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-customization.adoc:256
msgid "This will allow you to propagate the identity throughout the reactive callbacks. You also need to make sure you are using an executor that is capable of propagating the identity (e.g. no `CompletableFuture.supplyAsync`), to make sure that Quarkus can propagate it. For more information see the link:context-propagation[Context Propagation Guide]."
msgstr "これにより、リアクティブコールバック全体にIDを伝播させることができます。また、QuarkusがIDを伝播できるようにするために、IDを伝播できる実行者を使用していることを確認する必要があります(例: `CompletableFuture.supplyAsync` がない)。詳細については、 link:context-propagation[コンテキスト伝搬ガイド] を参照してください。"

#. type: Title ==
#: upstream/_versions/1.7/guides/security-customization.adoc:257
#, no-wrap
msgid "References"
msgstr "参照"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-customization.adoc:259
msgid "link:security[Quarkus Security]"
msgstr "link:security[Quarkus Security]"
