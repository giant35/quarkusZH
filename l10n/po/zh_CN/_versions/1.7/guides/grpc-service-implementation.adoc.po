# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-07-10 05:19+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:6
#, no-wrap
msgid "Implementing a gRPC Service"
msgstr "gRPCサービスの実装"

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:11
msgid "gRPC service implementations exposed as beans are automatically registered and served by quarkus-grpc."
msgstr "Beanとして公開されたgRPCサービス実装は、自動的に登録され、quarkus-grpcによって提供されます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:14
msgid "Implementing a gRPC service requires the gRPC classes to be generated.  Place your `proto` files in `src/main/proto` and run `mvn compile`."
msgstr "gRPC サービスを実装するには、gRPC クラスを生成する必要があります。 `proto` ファイルを `src/main/proto` に置き、 `mvn compile` を実行します。"

#. type: Title ==
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:15
#, no-wrap
msgid "Implementation base"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:18
msgid "The generation has created 2 implementation bases:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:20
msgid "One using the default gRPC API"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:21
msgid "One using the Mutiny API"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:24
msgid "The first classname is structured as follows: `${NAME_OF_THE_SERVICE}Grpc.${NAME_OF_THE_SERVICE}ImplBase`.  The second classname is structured as follows: `Mutiny${NAME_OF_THE_SERVICE}Grpc.${NAME_OF_THE_SERVICE}ImplBase`."
msgstr "最初のクラス名は `${NAME_OF_THE_SERVICE}Grpc.${NAME_OF_THE_SERVICE}ImplBase` のように構成されています。 2番目のクラス名は `Mutiny${NAME_OF_THE_SERVICE}Grpc.${NAME_OF_THE_SERVICE}ImplBase` のように構成されています。"

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:26
msgid "For example, if you use `Greeter` as service name as in:"
msgstr "例えば、次のようにサービス名を `Greeter` とした場合"

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:32
#, no-wrap
msgid ""
"service Greeter {\n"
"    rpc SayHello (HelloRequest) returns (HelloReply) {}\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:36
msgid "The regular implementation base is: `GreeterGrpc.GreeterImplBase`.  The second implementation base is: `MutinyGreeterGrpc.GreeterImplBase`."
msgstr "通常の実装ベースは `GreeterGrpc.GreeterImplBase` です。第二の実装ベースは `MutinyGreeterGrpc.GreeterImplBase` です。"

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:39
msgid "Note that these classes are not interfaces but regular classes.  When extending them, you need to override the service methods defined in the service definition."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:40
#, no-wrap
msgid "Implementing a service with the default gRPC API"
msgstr "デフォルトのgRPC APIでサービスを実装する"

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:45
msgid "To implement a gRPC service using the default gRPC API, create a class extending the default implementation base.  Then, override the methods defined in the service interface.  Finally, expose the service as a CDI bean using the `@Singleton` annotation:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:49
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:73
#, no-wrap
msgid "import javax.inject.Singleton;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:52
#, no-wrap
msgid ""
"@Singleton\n"
"public class HelloService extends GreeterGrpc.GreeterImplBase {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:61
#, no-wrap
msgid ""
"    @Override\n"
"    public void sayHello(HelloRequest request, StreamObserver<HelloReply> responseObserver) {\n"
"        String name = request.getName();\n"
"        String message = \"Hello \" + name;\n"
"        responseObserver.onNext(HelloReply.newBuilder().setMessage(message).build());\n"
"        responseObserver.onCompleted();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:63
#, no-wrap
msgid "Implementing a service with the Mutiny API"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:69
msgid "To implement a gRPC service using the Mutiny gRPC API, create a class extending the Mutiny implementation base.  Then, override the methods defined in the service interface.  These methods are using Mutiny types.  Finally, expose the service as a CDI bean using the `@Singleton` annotation:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:76
#, no-wrap
msgid ""
"@Singleton\n"
"public class ReactiveHelloService extends MutinyGreeterGrpc.GreeterImplBase {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:84
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<HelloReply> sayHello(HelloRequest request) {\n"
"        return Uni.createFrom().item(() ->\n"
"                HelloReply.newBuilder().setMessage(\"Hello \" + request.getName()).build()\n"
"        );\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:86
#, no-wrap
msgid "Handling streams"
msgstr "ストリームの取り扱い"

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:89
msgid "gRPC allows receiving and returning streams:"
msgstr "gRPCでは、ストリームを受信して返すことができます。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:97
#, no-wrap
msgid ""
"service Streaming {\n"
"    rpc Source(Empty) returns (stream Item) {} // Returns a stream\n"
"    rpc Sink(stream Item) returns (Empty) {}   // Reads a stream\n"
"    rpc Pipe(stream Item) returns (stream Item) {}  // Reads a streams and return a streams\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:100
msgid "Using Mutiny, you can implement these as follows:"
msgstr "Mutinyを使うと、以下のように実装できます。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:105
#, no-wrap
msgid ""
"@Singleton\n"
"public class StreamingService extends MutinyStreamingGrpc.StreamingImplBase {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:113
#, no-wrap
msgid ""
"    @Override\n"
"    public Multi<Item> source(Empty request) {\n"
"        // Just returns a stream emitting an item every 2ms and stopping after 10 items.\n"
"        return Multi.createFrom().ticks().every(Duration.ofMillis(2))\n"
"                .transform().byTakingFirstItems(10)\n"
"                .map(l -> Item.newBuilder().setValue(Long.toString(l)).build());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:123
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<Empty> sink(Multi<Item> request) {\n"
"        // Reads the incoming streams, consume all the items.\n"
"        return request\n"
"                .map(Item::getValue)\n"
"                .map(Long::parseLong)\n"
"                .collectItems().last()\n"
"                .map(l -> Empty.newBuilder().build());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:135
#, no-wrap
msgid ""
"    @Override\n"
"    public Multi<Item> pipe(Multi<Item> request) {\n"
"        // Reads the incoming stream, compute a sum and return the cumulative results\n"
"        // in the outbound stream.\n"
"        return request\n"
"                .map(Item::getValue)\n"
"                .map(Long::parseLong)\n"
"                .onItem().scan(() -> 0L, Long::sum)\n"
"                .onItem().transform(l -> Item.newBuilder().setValue(Long.toString(l)).build());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:137
#, no-wrap
msgid "Health check"
msgstr "ヘルスチェック"

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:139
msgid "For the exposed services, Quarkus gRPC exposes health information in the following format:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:142
#, no-wrap
msgid "syntax = \"proto3\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:144
#, no-wrap
msgid "package grpc.health.v1;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:148
#, no-wrap
msgid ""
"message HealthCheckRequest {\n"
"  string service = 1;\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:157
#, no-wrap
msgid ""
"message HealthCheckResponse {\n"
"  enum ServingStatus {\n"
"    UNKNOWN = 0;\n"
"    SERVING = 1;\n"
"    NOT_SERVING = 2;\n"
"  }\n"
"  ServingStatus status = 1;\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:160
#, no-wrap
msgid ""
"service Health {\n"
"  rpc Check(HealthCheckRequest) returns (HealthCheckResponse);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:163
#, no-wrap
msgid ""
"  rpc Watch(HealthCheckRequest) returns (stream HealthCheckResponse);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:167
msgid "Clients can specify the fully qualified service name to get the health status of a specific service or skip specifying the service name to get the general status of the gRPC server."
msgstr "クライアントは、特定のサービスのヘルス状態を取得するために完全修飾されたサービス名を指定したり、gRPCサーバーの一般的な状態を取得するためにサービス名の指定を省略することができます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:170
msgid "For more details, check out the https://github.com/grpc/grpc/blob/v1.28.1/doc/health-checking.md[gRPC documentation]"
msgstr "詳細については、 link:https://github.com/grpc/grpc/blob/v1.28.1/doc/health-checking.md[gRPCのドキュメント] を確認してください。"

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:173
#, fuzzy
msgid "Additionally, if Quarkus SmallRye Health is added to the application, a readiness check for the state of the gRPC services will be added to the MicroProfile Health endpoint response, that is `/health`."
msgstr "さらに、Quarkus SmallRye Healthがアプリケーションに追加された場合、gRPCサービスの状態に関するレディネスチェックがMicroProfile Healthエンドポイントレスポンスに追加されます( `/q/health` )。"

#. type: Title ==
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:174
#, no-wrap
msgid "Reflection Service"
msgstr "リフレクションサービス"

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:178
msgid "Quarkus gRPC Server implements the https://github.com/grpc/grpc/blob/master/doc/server-reflection.md[reflection service].  This service allows tools like https://github.com/fullstorydev/grpcurl[grpcurl] or https://github.com/gusaul/grpcox[grpcox] to interact with your services."
msgstr "Quarkus gRPC Serverは、 link:https://github.com/grpc/grpc/blob/master/doc/server-reflection.md[リフレクションサービス] を実装しています。このサービスを使用すると、 link:https://github.com/fullstorydev/grpcurl[grpcurl] や link:https://github.com/gusaul/grpcox[grpcox] などのツールがサービスと対話できるようになります。"

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:181
msgid "The reflection service is enabled by default in _dev_ mode.  In test or production mode, you need to enable it explicitly by setting `quarkus.grpc.server.enable-reflection-service` to `true`."
msgstr "リフレクションサービスは、 _開発_ モードではデフォルトで有効になっています。テストモードやプロダクションモードでは、 `quarkus.grpc.server.enable-reflection-service` を `true` に設定して明示的に有効にする必要があります。"

#. type: Title ==
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:182
#, no-wrap
msgid "Scaling"
msgstr "スケーリング"

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:184
msgid "By default, quarkus-grpc starts a single gRPC server running on a single event loop."
msgstr "デフォルトでは、quarkus-grpcは単一のイベントループ上で動作する単一のgRPCサーバーを起動します。"

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:186
msgid "If you wish to scale your server, you can set the number of server instances by setting `quarkus.grpc.server.instances`."
msgstr "サーバーをスケールさせたい場合は、 `quarkus.grpc.server.instances` を設定することで、サーバーのインスタンス数をセットできます。"

#. type: Title ==
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:187
#, no-wrap
msgid "Server configuration"
msgstr "サーバーの設定"

#. type: Title ==
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:191
#, no-wrap
msgid "Example of configuration"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:193
#, no-wrap
msgid "Enabling TLS"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:196
msgid "To enable TLS, use the following configuration:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:201
#, no-wrap
msgid ""
"quarkus.grpc.server.ssl.certificate=src/main/resources/tls/server.pem\n"
"quarkus.grpc.server.ssl.key=src/main/resources/tls/server.key\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:204
msgid "When SSL/TLS is configured, `plain-text` is automatically disabled."
msgstr "SSL/TLSを設定すると、 `plain-text` は自動的に無効になります。"

#. type: Title ===
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:205
#, no-wrap
msgid "TLS with Mutual Auth"
msgstr "相互認証付きTLS"

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:208
msgid "To use TLS with mutual authentication, use the following configuration:"
msgstr "相互認証付きのTLSを使用するには、以下の設定を使用します。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-service-implementation.adoc:216
#, no-wrap
msgid ""
"quarkus.grpc.server.ssl.certificate=src/main/resources/tls/server.pem\n"
"quarkus.grpc.server.ssl.key=src/main/resources/tls/server.key\n"
"quarkus.grpc.server.ssl.trust-store=src/main/resources/tls/ca.jks\n"
"quarkus.grpc.server.ssl.trust-store-password=*****\n"
"quarkus.grpc.server.ssl.client-auth=REQUIRED\n"
msgstr ""
