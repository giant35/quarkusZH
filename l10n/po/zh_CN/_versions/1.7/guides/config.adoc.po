# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-07-11 01:24+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/1.7/guides/config.adoc:6
#, no-wrap
msgid "Quarkus - Configuring Your Application"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:12
msgid "Hardcoded values in your code are a _no go_ (even if we all did it at some point ;-)).  In this guide, we learn how to configure your application."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/config.adoc:13
#, no-wrap
msgid "Prerequisites"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:16
msgid "To complete this guide, you need:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:18
msgid "between 5 and 10 minutes"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:19
msgid "an IDE"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:20
msgid "JDK 1.8+ installed with `JAVA_HOME` configured appropriately"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:21
msgid "Apache Maven {maven-version}"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/config.adoc:22
#, no-wrap
msgid "Solution"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:26
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:28
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:30
msgid "The solution is located in the `config-quickstart` {quickstarts-tree-url}/config-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/config.adoc:31
#, no-wrap
msgid "Creating the Maven project"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:34
msgid "First, we need a new project. Create a new project with the following command:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:43
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=config-quickstart \\\n"
"    -DclassName=\"org.acme.config.GreetingResource\" \\\n"
"    -Dpath=\"/greeting\"\n"
"cd config-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:46
msgid "It generates:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:48
msgid "the Maven structure"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:49
msgid "a landing page accessible on `http://localhost:8080`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:50
msgid "example `Dockerfile` files for both `native` and `jvm` modes"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:51
msgid "the application configuration file"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:52
msgid "an `org.acme.config.GreetingResource` resource"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:53
msgid "an associated test"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/config.adoc:54
#, no-wrap
msgid "Injecting configuration value"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:58
msgid "Quarkus uses https://microprofile.io/project/eclipse/microprofile-config[MicroProfile Config] to inject the configuration in the application.  The injection uses the `@ConfigProperty` annotation."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:63
#, no-wrap
msgid ""
"@ConfigProperty(name = \"greeting.message\")\n"
"String message;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:67
msgid "When injecting a configured value, you can use `@Inject @ConfigProperty` or just `@ConfigProperty`.  The `@Inject` annotation is not necessary for members annotated with `@ConfigProperty`, a behavior which differs from https://microprofile.io/project/eclipse/microprofile-config[MicroProfile Config]"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:69
msgid "Edit the `org.acme.config.GreetingResource`, and introduce the following configuration properties:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:74
#, no-wrap
msgid ""
"@ConfigProperty(name = \"greeting.message\") <1>\n"
"String message;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:77
#, no-wrap
msgid ""
"@ConfigProperty(name = \"greeting.suffix\", defaultValue=\"!\") <2>\n"
"String suffix;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:80
#, no-wrap
msgid ""
"@ConfigProperty(name = \"greeting.name\")\n"
"Optional<String> name; <3>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:82
msgid "If you do not provide a value for this property, the application startup fails with `javax.enterprise.inject.spi.DeploymentException: No config value of type [class java.lang.String] exists for: greeting.message`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:83
msgid "The default value is injected if the configuration does not provide a value for `greeting.suffix`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:84
msgid "This property is optional - an empty `Optional` is injected if the configuration does not provide a value for `greeting.name`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:86
msgid "Now, modify the `hello` method to use the injected properties:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:94
#, no-wrap
msgid ""
"@GET\n"
"@Produces(MediaType.TEXT_PLAIN)\n"
"public String hello() {\n"
"    return message + \" \" + name.orElse(\"world\") + suffix;\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/config.adoc:97
#, no-wrap
msgid "Create the configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:101
msgid "By default, Quarkus reads `application.properties`.  Edit the `src/main/resources/application.properties` with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:107
#, no-wrap
msgid ""
"# Your configuration properties\n"
"greeting.message = hello\n"
"greeting.name = quarkus\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:110
msgid "Once set, check the application with:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:115
#, no-wrap
msgid ""
"$ curl http://localhost:8080/greeting\n"
"hello quarkus!\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:119
msgid "If the application requires configuration values and these values are not set, an error is thrown.  So you can quickly know when your configuration is complete."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/config.adoc:120
#, no-wrap
msgid "Update the test"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:124
msgid "We also need to update the functional test to reflect the changes made to the endpoint.  Edit the `src/test/java/org/acme/config/GreetingResourceTest.java` file and change the content of the `testHelloEndpoint` method to:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:129
#: upstream/_versions/1.7/guides/config.adoc:185
#: upstream/_versions/1.7/guides/config.adoc:237
#: upstream/_versions/1.7/guides/config.adoc:615
#: upstream/_versions/1.7/guides/config.adoc:637
#: upstream/_versions/1.7/guides/config.adoc:687
#, no-wrap
msgid "package org.acme.config;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:132
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:135
#, no-wrap
msgid ""
"import static io.restassured.RestAssured.given;\n"
"import static org.hamcrest.CoreMatchers.is;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:138
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class GreetingResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:147
#, no-wrap
msgid ""
"    @Test\n"
"    public void testHelloEndpoint() {\n"
"        given()\n"
"          .when().get(\"/greeting\")\n"
"          .then()\n"
"             .statusCode(200)\n"
"             .body(is(\"hello quarkus!\")); // Modified line\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:149
#: upstream/_versions/1.7/guides/config.adoc:309
#: upstream/_versions/1.7/guides/config.adoc:335
#: upstream/_versions/1.7/guides/config.adoc:350
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/config.adoc:151
#, no-wrap
msgid "Package and run the application"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:155
msgid "Run the application with: `./mvnw compile quarkus:dev`.  Open your browser to http://localhost:8080/greeting."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:158
msgid "Changing the configuration file is immediately reflected.  You can add the `greeting.suffix`, remove the other properties, change the values, etc."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:161
msgid "As usual, the application can be packaged using `./mvnw clean package` and executed using the `-runner.jar` file.  You can also generate the native executable with `./mvnw clean package -Pnative`."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/config.adoc:162
#, no-wrap
msgid "Programmatically access the configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:166
msgid "You can access the configuration programmatically.  It can be handy to achieve dynamic lookup, or retrieve configured values from classes that are neither CDI beans or JAX-RS resources."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:168
msgid "You can access the configuration programmatically using `org.eclipse.microprofile.config.ConfigProvider.getConfig()` such as in:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:173
#, no-wrap
msgid ""
"String databaseName = ConfigProvider.getConfig().getValue(\"database.name\", String.class);\n"
"Optional<String> maybeDatabaseName = ConfigProvider.getConfig().getOptionalValue(\"database.name\", String.class);\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/config.adoc:175
#, no-wrap
msgid "Using @ConfigProperties"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:179
msgid "As an alternative to injecting multiple related configuration values in the way that was shown in the previous example, users can also use the `@io.quarkus.arc.config.ConfigProperties` annotation to group these properties together."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:181
msgid "For the greeting properties above, a `GreetingConfiguration` class could be created like so:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:188
#, no-wrap
msgid ""
"import io.quarkus.arc.config.ConfigProperties;\n"
"import java.util.Optional;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:191
#, no-wrap
msgid ""
"@ConfigProperties(prefix = \"greeting\") <1>\n"
"public class GreetingConfiguration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:195
#, no-wrap
msgid ""
"    private String message;\n"
"    private String suffix = \"!\"; <2>\n"
"    private Optional<String> name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:199
#, no-wrap
msgid ""
"    public String getMessage() {\n"
"        return message;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:203
#, no-wrap
msgid ""
"    public void setMessage(String message) {\n"
"        this.message = message;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:207
#, no-wrap
msgid ""
"    public String getSuffix() {\n"
"        return suffix;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:211
#, no-wrap
msgid ""
"    public void setSuffix(String suffix) {\n"
"        this.suffix = suffix;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:215
#, no-wrap
msgid ""
"    public Optional<String> getName() {\n"
"        return name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:220
#, no-wrap
msgid ""
"    public void setName(Optional<String> name) {\n"
"        this.name = name;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:222
msgid "`prefix` is optional. If not set then the prefix to be used will be determined by the class name. In this case it would still be `greeting` (since the `Configuration` suffix is removed). If the class were named `GreetingExtraConfiguration` then the resulting default prefix would be `greeting-extra`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:223
msgid "`!` will be the default value if `greeting.suffix` is not set"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:225
msgid "This class could then be injected into the `GreetingResource` using the familiar CDI `@Inject` annotation like so:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:230
#, no-wrap
msgid ""
"@Inject\n"
"GreetingConfiguration greetingConfiguration;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:233
msgid "Another alternative style provided by Quarkus is to create `GreetingConfiguration` as an interface like so:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:241
#, no-wrap
msgid ""
"import io.quarkus.arc.config.ConfigProperties;\n"
"import org.eclipse.microprofile.config.inject.ConfigProperty;\n"
"import java.util.Optional;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:244
#, no-wrap
msgid ""
"@ConfigProperties(prefix = \"greeting\")\n"
"public interface GreetingConfiguration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:247
#, no-wrap
msgid ""
"    @ConfigProperty(name = \"message\") <1>\n"
"    String message();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:250
#, no-wrap
msgid ""
"    @ConfigProperty(defaultValue = \"!\")\n"
"    String getSuffix(); <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:253
#, no-wrap
msgid ""
"    Optional<String> getName(); <3>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:255
msgid "The `@ConfigProperty` annotation is needed because the name of the configuration property that the method corresponds to doesn't follow the getter method naming conventions"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:256
msgid "In this case since `name` was not set, the corresponding property will be `greeting.suffix`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:257
msgid "It is unnecessary to specify the `@ConfigProperty` annotation because the method name follows the getter method naming conventions (`greeting.name` being the corresponding property) and no default value is needed."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:260
msgid "When using `@ConfigProperties` on a class or an interface, if the value of one of its fields is not provided, the application startup will fail and a `javax.enterprise.inject.spi.DeploymentException` indicating the missing value information will be thrown.  This does not apply to `Optional` fields and fields with a default value."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/config.adoc:261
#, no-wrap
msgid "Additional notes on @ConfigProperties"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:265
msgid "When using a regular class annotated with `@ConfigProperties` the class doesn't necessarily have to declare getters and setters.  Having simple public non-final fields is valid as well."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:268
msgid "Furthermore, the configuration classes support nested object configuration. Suppose there was a need to have an extra layer of greeting configuration named `hidden` that would contain a few fields. This could be achieved like so:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:273
#: upstream/_versions/1.7/guides/config.adoc:303
#: upstream/_versions/1.7/guides/config.adoc:329
#, no-wrap
msgid ""
"@ConfigProperties(prefix = \"greeting\")\n"
"public class GreetingConfiguration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:278
#, no-wrap
msgid ""
"    public String message;\n"
"    public String suffix = \"!\";\n"
"    public Optional<String> name;\n"
"    public HiddenConfig hidden; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:284
#, no-wrap
msgid ""
"    public static class HiddenConfig {\n"
"        public Integer prizeAmount;\n"
"        public List<String> recipients;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:286
msgid "The name of the field (not the class name) will determine the name of the properties that are bound to the object."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:288
msgid "Setting the properties would occur in the normal manner, for example in `application.properties` one could have:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:295
#, no-wrap
msgid ""
"greeting.message = hello\n"
"greeting.name = quarkus\n"
"greeting.hidden.prize-amount=10\n"
"greeting.hidden.recipients=Jane,John\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:298
msgid "Furthermore, classes annotated with `@ConfigProperties` can be annotated with Bean Validation annotations similar to the following example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:307
#: upstream/_versions/1.7/guides/config.adoc:333
#, no-wrap
msgid ""
"    @Size(min = 20)\n"
"    public String message;\n"
"    public String suffix = \"!\";\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:312
msgid "For validation to work, the `quarkus-hibernate-validator` extension needs to be present."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:314
msgid "If the validation fails with the given configuration, the application will fail to start and indicate the corresponding validation errors in the log."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:317
msgid "In the case of an interface being annotated with `@ConfigProperties`, the interface is allowed to extend other interfaces and methods from the entire interface hierarchy are used to bind properties."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/config.adoc:318
#, no-wrap
msgid "Using same ConfigProperties with different prefixes"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:323
msgid "Quarkus also supports the use of the same `@ConfigProperties` object with different prefixes for each injection point using the `io.quarkus.arc.config.@ConfigPrefix` annotation.  Say for example that `GreetingConfiguration` from above needs to be used for both the `greeting` prefix and the `other` prefix.  In that case the code would look like so:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:325
msgid "`GreetingConfiguration.java`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:338
msgid "`SomeBean.java`"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:342
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class SomeBean {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:345
#, no-wrap
msgid ""
"    @Inject <1>\n"
"    GreetingConfiguration greetingConfiguration;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:348
#, no-wrap
msgid ""
"    @ConfigPrefix(\"other\") <2>\n"
"    GreetingConfiguration otherConfiguration;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:352
msgid "At this injection point `greetingConfiguration` will use the `greeting` prefix since that is what has been defined on `@ConfigProperties`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:353
msgid "At this injection point `otherConfiguration` will use the `other` prefix from `@ConfigPrefix` instead of the `greeting` prefix. Notice that in this case `@Inject` is not required."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/config.adoc:354
#, no-wrap
msgid "Configuring Quarkus"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:359
msgid "Quarkus itself is configured via the same mechanism as your application. Quarkus reserves the `quarkus.` namespace for its own configuration. For example to configure the HTTP server port you can set `quarkus.http.port` in `application.properties`."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.7/guides/config.adoc:364
msgid "As mentioned above, properties prefixed with `quarkus.` are effectively reserved for configuring Quarkus itself and therefore `quarkus.` should **never** be used as prefix for application specific properties."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.7/guides/config.adoc:366
msgid "In the previous examples using `quarkus.message` instead of `greeting.message` would result in unexpected behavior."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/config.adoc:368
#, no-wrap
msgid "List of all configuration properties"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:371
msgid "All the Quarkus configuration properties are link:all-config[documented and searcheable]."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/config.adoc:372
#, no-wrap
msgid "Generating configuration for your application"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:376
msgid "It is also possible to generate an example `application.properties` with all known configuration properties, to make it easy to see what Quarkus configuration options are available. To do this, run:"
msgstr ""

#. type: Block title
#: upstream/_versions/1.7/guides/config.adoc:379
#, no-wrap
msgid "/mvnw quarkus:generate-config"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:385
msgid "This will create a `src/main/resources/application.properties.example` file that contains all the config options exposed via the extensions you currently have installed. These options are commented out, and have their default value when applicable. For example this HTTP port config entry will appear as:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:393
msgid "# # The HTTP port # #quarkus.http.port=8080"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:397
msgid "Rather than generating an example config file, you can also add these to you actual config file by setting the `-Dfile` parameter:"
msgstr ""

#. type: Block title
#: upstream/_versions/1.7/guides/config.adoc:400
#, no-wrap
msgid "/mvnw quarkus:generate-config -Dfile=application.properties"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:405
msgid "If a config option is already present (commented or not) it will not be added, so it is safe to run this after adding an additional extension to see what additional options have been added."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/config.adoc:406
#, no-wrap
msgid "Overriding properties at runtime"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:411
msgid "Quarkus does much of its configuration and bootstrap at build time.  Most properties will then be read and set during the build time step.  To change them, make sure to repackage your application."
msgstr ""

#. type: Block title
#: upstream/_versions/1.7/guides/config.adoc:414
#, no-wrap
msgid "/mvnw clean package"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:420
msgid "Extensions do define _some_ properties as overridable at runtime.  A canonical example is the database URL, username and password which is only known specifically in your target environment.  This is a tradeoff as the more runtime properties are available, the less build time prework Quarkus can do. The list of runtime properties is therefore lean."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:422
msgid "You can override these runtime properties with the following mechanisms (in decreasing priority):"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:424
msgid "using system properties:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:425
msgid "for a runner jar: `java -Dquarkus.datasource.password=youshallnotpass -jar target/myapp-runner.jar`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:426
msgid "for a native executable: `./target/myapp-runner -Dquarkus.datasource.password=youshallnotpass`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:427
msgid "using environment variables:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:428
msgid "for a runner jar: `export QUARKUS_DATASOURCE_PASSWORD=youshallnotpass ; java -jar target/myapp-runner.jar`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:429
msgid "for a native executable: `export QUARKUS_DATASOURCE_PASSWORD=youshallnotpass ; ./target/myapp-runner`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:430
msgid "using an environment file named `.env` placed in the current working directory containing the line `QUARKUS_DATASOURCE_PASSWORD=youshallnotpass` (for dev mode, this file can be placed in the root of the project, but it is advised to not check it in to version control)"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:431
msgid "using a configuration file placed in `$PWD/config/application.properties`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:434
msgid "By placing an `application.properties` file inside a directory named `config` which resides in the directory where the application runs, any runtime properties defined in that file will override the default configuration. Furthermore any runtime properties added to this file that were not part of the original `application.properties` file _will also_ be taken into account."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:435
msgid "This works in the same way for runner jar and the native executable"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:437
msgid "Environment variables names are following the conversion rules of link:https://github.com/eclipse/microprofile-config/blob/master/spec/src/main/asciidoc/configsources.asciidoc#default-configsources[Eclipse MicroProfile]"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:439
msgid "Environment variables without a configuration profile defined in `.env` file will overwrite all its related profiles in `application.properties`, e.g. `%test.application.value` is overwritten by `APPLICATION_VALUE` in `.env` file."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:442
msgid "The `config/application.properties` features is available in development mode as well. To make use of it, `config/application.properties` needs to be placed inside the build tool's output directory (`target` for Maven and `build/classes/java/main` for Gradle).  Keep in mind however that any cleaning operation from the build tool like `mvn clean` or `gradle clean` will remove the `config` directory as well."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/config.adoc:443
#, no-wrap
msgid "Configuration Profiles"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:447
msgid "Quarkus supports the notion of configuration profiles. These allow you to have multiple configuration in the same file and select between them via a profile name."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:449
msgid "The syntax for this is `%{profile}.config.key=value`. For example if I have the following:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:454
#, no-wrap
msgid ""
"quarkus.http.port=9090\n"
"%dev.quarkus.http.port=8181\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:457
msgid "The Quarkus HTTP port will be 9090, unless the `dev` profile is active, in which case it will be 8181."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:459
msgid "To use profiles in the `.env` file, you can follow a `_{PROFILE}_CONFIG_KEY=value` pattern. An equivalent of the above example in an `.env` file would be:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:464
#, no-wrap
msgid ""
"QUARKUS_HTTP_PORT=9090\n"
"_DEV_QUARKUS_HTTP_PORT=8181\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:467
msgid "By default Quarkus has three profiles, although it is possible to use as many as you like. The default profiles are:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:469
#, no-wrap
msgid "*dev* - Activated when in development mode (i.e. `quarkus:dev`)\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:470
#, no-wrap
msgid "*test* - Activated when running tests\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:471
#, no-wrap
msgid "*prod* - The default profile when not running in development or test mode\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:477
msgid "There are two ways to set a custom profile, either via the `quarkus.profile` system property or the `QUARKUS_PROFILE` environment variable. If both are set the system property takes precedence. Note that it is not necessary to define the names of these profiles anywhere, all that is necessary is to create a config property with the profile name, and then set the current profile to that name. For example if I want a `staging` profile with a different HTTP port I can add the following to `application.properties`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:482
#, no-wrap
msgid ""
"quarkus.http.port=9090\n"
"%staging.quarkus.http.port=9999\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:485
msgid "And then set the `QUARKUS_PROFILE` environment variable to `staging` to activate my profile."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.7/guides/config.adoc:489
msgid "The proper way to check the active profile programmatically is to use the `getActiveProfile` method of `io.quarkus.runtime.configuration.ProfileManager`."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.7/guides/config.adoc:491
msgid "Using `@ConfigProperty(\"quarkus.profile\")` will *not* work properly."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/config.adoc:493
#, no-wrap
msgid "Using Property Expressions"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:496
msgid "Quarkus supports the use of property expressions in the `application.properties` file."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:500
msgid "These expressions are resolved when the property is read.  So if your configuration property is a build time configuration property, the property expression will be resolved at build time.  If your configuration property is overridable at runtime, the property expression will be resolved at runtime."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:502
msgid "You can use property expressions both for the Quarkus configuration or for your own configuration properties."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:504
msgid "Property expressions are defined this way: `${my-property-expression}`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:506
msgid "For example, having the following property:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:510
#: upstream/_versions/1.7/guides/config.adoc:555
#, no-wrap
msgid "remote.host=quarkus.io\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:512
msgid "and another property defined as:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:516
#, no-wrap
msgid "callable.url=https://${remote.host}/\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:519
msgid "will result in the value of the `callable.url` property being set to:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:523
#, no-wrap
msgid "callable.url=https://quarkus.io/\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:526
msgid "Another example would be defining different database servers depending on the profile used:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:531
#, no-wrap
msgid ""
"%dev.quarkus.datasource.jdbc.url=jdbc:mysql://localhost:3306/mydatabase?useSSL=false\n"
"quarkus.datasource.jdbc.url=jdbc:mysql://remotehost:3306/mydatabase?useSSL=false\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:534
msgid "can be simplified by having:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:539
#, no-wrap
msgid ""
"%dev.application.server=localhost\n"
"application.server=remotehost\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:541
#, no-wrap
msgid "quarkus.datasource.jdbc.url=jdbc:mysql://${application.server}:3306/mydatabase?useSSL=false\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:545
msgid "It does result in one more line in this example but the value of `application.server` can be reused in other properties, diminishing the possibility of typos and providing more flexibility in property definitions."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/config.adoc:546
#, no-wrap
msgid "Combining Property Expressions and Environment Variables"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:549
msgid "Quarkus also supports the combination of both property expressions and environment variables."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:551
msgid "Let's assume you have following property defined in `application.properties`:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:558
msgid "You can combine environment variables and property expressions by having a property defined as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:562
#, no-wrap
msgid "application.host=${HOST:${remote.host}}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:565
msgid "This will expand the `HOST` environment variable and use the value of the property `remote.host` as the default value if `HOST` is not set."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:568
msgid "For the purpose of this section we used the property `remote.host` we defined previously.  It has to be noted that the value could have been a fixed one such as in:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:572
#, no-wrap
msgid "application.host=${HOST:localhost}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:575
msgid "which will result in `localhost` as the default value if `HOST` is not set."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/config.adoc:576
#, no-wrap
msgid "Clearing properties"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:581
msgid "Run time properties which are optional, and which have had values set at build time or which have a default value, may be explicitly cleared by assigning an empty string to the property.  Note that this will _only_ affect run time properties, and will _only_ work with properties whose values are not required."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:584
msgid "The property may be cleared by setting the corresponding `application.properties` property, setting the corresponding system property, or setting the corresponding environment variable."
msgstr ""

#. type: Title ====
#: upstream/_versions/1.7/guides/config.adoc:585
#, no-wrap
msgid "Miscellaneous"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:588
msgid "The default Quarkus application runtime profile is set to the profile used to build the application.  For example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:592
#, no-wrap
msgid ""
"./mvnw package -Pnative -Dquarkus.profile=prod-aws\n"
"./target/my-app-1.0-runner // <1>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:594
msgid "The command will run with the `prod-aws` profile. This can be overridden using the `quarkus.profile` system property."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/config.adoc:595
#, no-wrap
msgid "Custom Configuration"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/config.adoc:597
#, no-wrap
msgid "Custom configuration sources"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:604
msgid "You can also introduce custom configuration sources in the standard MicroProfile Config manner.  To do this, you must provide a class which implements either `org.eclipse.microprofile.config.spi.ConfigSource` or `org.eclipse.microprofile.config.spi.ConfigSourceProvider`.  Create a https://docs.oracle.com/javase/8/docs/api/java/util/ServiceLoader.html[service file] for the class and it will be detected and installed at application startup."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/config.adoc:605
#, no-wrap
msgid "Custom configuration converters"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:609
msgid "You can also use your custom types as a configuration values. This can be done by implementing `org.eclipse.microprofile.config.spi.Converter<T>` and adding its fully qualified class name in the `META-INF/services/org.eclipse.microprofile.config.spi.Converter` file."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:611
msgid "Let us assume you have a custom type like this one:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:617
#, no-wrap
msgid "public class MicroProfileCustomValue {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:619
#, no-wrap
msgid "    private final int number;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:623
#, no-wrap
msgid ""
"    public MicroProfileCustomValue(int number) {\n"
"        this.number = number;\n"
"    };\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:628
#, no-wrap
msgid ""
"    public int getNumber() {\n"
"        return number;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:632
msgid "The corresponding converter will look like the one below. Please note that your custom converter class must be `public` and must have a `public` no-argument constructor. It also must not be `abstract`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:639
#, no-wrap
msgid "import org.eclipse.microprofile.config.spi.Converter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:641
#, no-wrap
msgid "public class MicroProfileCustomValueConverter implements Converter<MicroProfileCustomValue> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:647
#, no-wrap
msgid ""
"    @Override\n"
"    public MicroProfileCustomValue convert(String value) {\n"
"        return new MicroProfileCustomValue(Integer.valueOf(value));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:651
msgid "Then you need to include the fully qualified class name of the converter in a service file `META-INF/services/org.eclipse.microprofile.config.spi.Converter`.  If you have more converters, simply add their class names in this file as well. Single fully qualified class name per line, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:657
#, no-wrap
msgid ""
"org.acme.config.MicroProfileCustomValueConverter\n"
"org.acme.config.SomeOtherConverter\n"
"org.acme.config.YetAnotherConverter\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:661
msgid "Please note that `SomeOtherConverter` and `YetAnotherConverter` were added just for a demonstration. If you include in this file classes which are not available at runtime, the converters loading will fail."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:663
msgid "After this is done you can use your custom type as a configuration value:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:668
#, no-wrap
msgid ""
"@ConfigProperty(name = \"configuration.value.name\")\n"
"MicroProfileCustomValue value;\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/1.7/guides/config.adoc:670
#, no-wrap
msgid "Converter priority"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:676
msgid "In some cases, you may want to use a custom converter to convert a type which is already converted by a different converter. In such cases, you can use the `javax.annotation.Priority` annotation to change converters precedence and make your custom converter of higher priority than the other on the list."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:680
msgid "By default, if no `@Priority` can be found on a converter, it's registered with a priority of 100 and all Quarkus core converters are registered with a priority of 200, so depending on which converter you would like to replace, you need to set a higher value."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:683
msgid "To demonstrate the idea let us implement a custom converter which will take precedence over `MicroProfileCustomValueConverter` implemented in the previous example."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:690
#, no-wrap
msgid ""
"import javax.annotation.Priority;\n"
"import org.eclipse.microprofile.config.spi.Converter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:693
#, no-wrap
msgid ""
"@Priority(150)\n"
"public class MyCustomConverter implements Converter<MicroProfileCustomValue> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:696
#, no-wrap
msgid ""
"    @Override\n"
"    public MicroProfileCustomValue convert(String value) {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:703
#, no-wrap
msgid ""
"        final int secretNumber;\n"
"        if (value.startsFrom(\"OBF:\")) {\n"
"            secretNumber = Integer.valueOf(SecretDecoder.decode(value));\n"
"        } else {\n"
"            secretNumber = Integer.valueOf(value);\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:707
#, no-wrap
msgid ""
"        return new MicroProfileCustomValue(secretNumber);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:712
msgid "Since it converts the same value type (namely `MicroProfileCustomValue`) and has a priority of 150, it will be used instead of a `MicroProfileCustomValueConverter` which has a default priority of 100."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:714
msgid "This new converter also needs to be listed in a service file, i.e. `META-INF/services/org.eclipse.microprofile.config.spi.Converter`."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/config.adoc:716
#, no-wrap
msgid "YAML for Configuration"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/config.adoc:718
#, no-wrap
msgid "Add YAML Config Support"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:723
msgid "You might want to use YAML over properties for configuration.  Since link:https://github.com/smallrye/smallrye-config[SmallRye Config] brings support for YAML configuration, Quarkus supports this as well."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:725
msgid "First you will need to add the YAML extension to your `pom.xml`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:732
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-config-yaml</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:735
msgid "Or you can alternatively run this command in the directory containing your Quarkus project:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:739
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"config-yaml\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:743
msgid "Now Quarkus can read YAML configuration files.  The config directories and priorities are the same as before."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:747
msgid "Quarkus will choose an `application.yaml` over an `application.properties`.  YAML files are just an alternative way to configure your application.  You should decide and keep one configuration type to avoid errors."
msgstr ""

#. type: Title ====
#: upstream/_versions/1.7/guides/config.adoc:748
#, no-wrap
msgid "Configuration Examples"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:759
#, no-wrap
msgid ""
"# YAML supports comments\n"
"quarkus:\n"
"  datasource:\n"
"    db-kind: postgresql\n"
"    jdbc:\n"
"      url: jdbc:postgresql://localhost:5432/some-database\n"
"    username: quarkus\n"
"    password: quarkus\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:765
#, no-wrap
msgid ""
"# REST Client configuration property\n"
"org:\n"
"  acme:\n"
"    restclient:\n"
"      CountriesService/mp-rest/url: https://restcountries.eu/rest\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:772
#, no-wrap
msgid ""
"# For configuration property names that use quotes, do not split the string inside the quotes.\n"
"quarkus:\n"
"  log:\n"
"    category:\n"
"      \"io.quarkus.category\":\n"
"        level: INFO\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.7/guides/config.adoc:777
msgid "Quarkus also supports using `application.yml` as the name of the YAML file. The same rules apply for this file as for `application.yaml`."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/config.adoc:779
#, no-wrap
msgid "Profile dependent configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:783
msgid "Providing profile dependent configuration with YAML is done like with properties.  Just add the `%profile` wrapped in quotation marks before defining the key-value pairs:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:794
#, no-wrap
msgid ""
"\"%dev\":\n"
"  quarkus:\n"
"    datasource:\n"
"      db-kind: postgresql\n"
"      jdbc:\n"
"        url: jdbc:postgresql://localhost:5432/some-database\n"
"      username: quarkus\n"
"      password: quarkus\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/config.adoc:796
#, no-wrap
msgid "Configuration key conflicts"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:802
msgid "The MicroProfile Configuration specification defines configuration keys as an arbitrary `.`-delimited string.  However, structured formats like YAML naively only support a subset of the possible configuration namespace.  For example, consider the two configuration properties `quarkus.http.cors` and `quarkus.http.cors.methods`.  One property is the prefix of another, so it may not be immediately evident how to specify both keys in your YAML configuration."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:804
msgid "This is solved by using a null key (normally represented by `~`) for any YAML property which is a prefix of another one.  Here's an example:"
msgstr ""

#. type: Block title
#: upstream/_versions/1.7/guides/config.adoc:805
#, no-wrap
msgid "An example YAML configuration resolving prefix-related key name conflicts"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/config.adoc:813
#, no-wrap
msgid ""
"quarkus:\n"
"  http:\n"
"    cors:\n"
"      ~: true\n"
"      methods: GET,PUT,POST\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:817
msgid "In general, null YAML keys are not included in assembly of the configuration property name, allowing them to be used to any level for disambiguating configuration keys."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/config.adoc:818
#, no-wrap
msgid "More info on how to configure"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:821
msgid "Quarkus relies on SmallRye Config and inherits its features."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:823
msgid "SmallRye Config provides:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:825
msgid "Additional Config Sources"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:826
msgid "Additional Converters"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:827
msgid "Interceptors for configuration value resolution"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:828
msgid "Relocate Configuration Properties"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:829
msgid "Fallback Configuration Properties"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:830
msgid "Logging"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:831
msgid "Hide Secrets"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/config.adoc:833
msgid "For more information, please check the link:https://smallrye.io/docs/smallrye-config/index.html[SmallRye Config documentation]."
msgstr ""
