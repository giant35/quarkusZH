# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-07-10 05:19+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/1.7/guides/kafka.adoc:6
#, no-wrap
msgid "Quarkus - Using Apache Kafka with Reactive Messaging"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:11
msgid "This guide demonstrates how your Quarkus application can utilize MicroProfile Reactive Messaging to interact with Apache Kafka."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/kafka.adoc:12
#, no-wrap
msgid "Prerequisites"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:15
msgid "To complete this guide, you need:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:17
msgid "less than 15 minutes"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:18
msgid "an IDE"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:19
msgid "JDK 1.8+ installed with `JAVA_HOME` configured appropriately"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:20
msgid "Apache Maven {maven-version}"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:21
msgid "A running Kafka cluster, or Docker Compose to start a development cluster"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:22
msgid "GraalVM installed if you want to run in native mode."
msgstr ""

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_versions/1.7/guides/kafka.adoc:23
#: upstream/_versions/1.7/guides/kafka.adoc:31
#, no-wrap
msgid "Architecture"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:30
msgid "In this guide, we are going to generate (random) prices in one component.  These prices are written in a Kafka topic (`prices`).  A second component reads from the `prices` Kafka topic and apply some magic conversion to the price.  The result is sent to an in-memory stream consumed by a JAX-RS resource.  The data is sent to a browser using server-sent events."
msgstr ""

#. type: Target for macro image
#: upstream/_versions/1.7/guides/kafka.adoc:31
#, no-wrap
msgid "kafka-guide-architecture.png"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/kafka.adoc:33
#, no-wrap
msgid "Solution"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:37
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:39
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:41
msgid "The solution is located in the `kafka-quickstart` {quickstarts-tree-url}/kafka-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/kafka.adoc:42
#, no-wrap
msgid "Creating the Maven Project"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:45
msgid "First, we need a new project. Create a new project with the following command:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:53
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=kafka-quickstart \\\n"
"    -Dextensions=\"smallrye-reactive-messaging-kafka\"\n"
"cd kafka-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:56
msgid "This command generates a Maven project, importing the Reactive Messaging and Kafka connector extensions."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:59
msgid "If you already have your Quarkus project configured, you can add the `smallrye-reactive-messaging-kafka` extension to your project by running the following command in your project base directory:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:63
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"smallrye-reactive-messaging-kafka\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:66
msgid "This will add the following to your `pom.xml`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:73
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-smallrye-reactive-messaging-kafka</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/kafka.adoc:75
#, no-wrap
msgid "Starting Kafka"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:79
msgid "Then, we need a Kafka cluster.  You can follow the instructions from the https://kafka.apache.org/quickstart[Apache Kafka web site] or create a `docker-compose.yaml` file with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:83
#, no-wrap
msgid "version: '2'\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:85
#, no-wrap
msgid "services:\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:96
#, no-wrap
msgid ""
"  zookeeper:\n"
"    image: strimzi/kafka:0.11.3-kafka-2.1.0\n"
"    command: [\n"
"      \"sh\", \"-c\",\n"
"      \"bin/zookeeper-server-start.sh config/zookeeper.properties\"\n"
"    ]\n"
"    ports:\n"
"      - \"2181:2181\"\n"
"    environment:\n"
"      LOG_DIR: /tmp/logs\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:112
#, no-wrap
msgid ""
"  kafka:\n"
"    image: strimzi/kafka:0.11.3-kafka-2.1.0\n"
"    command: [\n"
"      \"sh\", \"-c\",\n"
"      \"bin/kafka-server-start.sh config/server.properties --override listeners=$${KAFKA_LISTENERS} --override advertised.listeners=$${KAFKA_ADVERTISED_LISTENERS} --override zookeeper.connect=$${KAFKA_ZOOKEEPER_CONNECT}\"\n"
"    ]\n"
"    depends_on:\n"
"      - zookeeper\n"
"    ports:\n"
"      - \"9092:9092\"\n"
"    environment:\n"
"      LOG_DIR: \"/tmp/logs\"\n"
"      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092\n"
"      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092\n"
"      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:115
msgid "Once created, run `docker-compose up`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:117
msgid "This is a development cluster, do not use in production."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/kafka.adoc:118
#, no-wrap
msgid "The price generator"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:121
msgid "Create the `src/main/java/org/acme/kafka/PriceGenerator.java` file, with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:125
#: upstream/_versions/1.7/guides/kafka.adoc:164
#: upstream/_versions/1.7/guides/kafka.adoc:204
#, no-wrap
msgid "package org.acme.kafka;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:128
#, no-wrap
msgid ""
"import io.reactivex.Flowable;\n"
"import org.eclipse.microprofile.reactive.messaging.Outgoing;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:132
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import java.util.Random;\n"
"import java.util.concurrent.TimeUnit;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:139
#, no-wrap
msgid ""
"/**\n"
" * A bean producing random prices every 5 seconds.\n"
" * The prices are written to a Kafka topic (prices). The Kafka configuration is specified in the application configuration.\n"
" */\n"
"@ApplicationScoped\n"
"public class PriceGenerator {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:141
#, no-wrap
msgid "    private Random random = new Random();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:147
#, no-wrap
msgid ""
"    @Outgoing(\"generated-price\")                        // <1>\n"
"    public Flowable<Integer> generate() {               // <2>\n"
"        return Flowable.interval(5, TimeUnit.SECONDS)\n"
"                .map(tick -> random.nextInt(100));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:149
#: upstream/_versions/1.7/guides/kafka.adoc:188
#: upstream/_versions/1.7/guides/kafka.adoc:440
#: upstream/_versions/1.7/guides/kafka.adoc:610
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:151
msgid "Instruct Reactive Messaging to dispatch the items from returned stream to `generated-price`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:152
msgid "The method returns a RX Java 2 _stream_ (`Flowable`) emitting a random _price_ every 5 seconds."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:155
msgid "The method returns a _Reactive Stream_. The generated items are sent to the stream named `generated-price`.  This stream is mapped to Kafka using the `application.properties` file that we will create soon."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/kafka.adoc:156
#, no-wrap
msgid "The price converter"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:160
msgid "The price converter reads the prices from Kafka, and transforms them.  Create the `src/main/java/org/acme/kafka/PriceConverter.java` file with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:168
#: upstream/_versions/1.7/guides/kafka.adoc:419
#, no-wrap
msgid ""
"import io.smallrye.reactive.messaging.annotations.Broadcast;\n"
"import org.eclipse.microprofile.reactive.messaging.Incoming;\n"
"import org.eclipse.microprofile.reactive.messaging.Outgoing;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:170
#: upstream/_versions/1.7/guides/kafka.adoc:421
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:177
#, no-wrap
msgid ""
"/**\n"
" * A bean consuming data from the \"prices\" Kafka topic and applying some conversion.\n"
" * The result is pushed to the \"my-data-stream\" stream which is an in-memory stream.\n"
" */\n"
"@ApplicationScoped\n"
"public class PriceConverter {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:179
#: upstream/_versions/1.7/guides/kafka.adoc:430
#, no-wrap
msgid "    private static final double CONVERSION_RATE = 0.88;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:186
#, no-wrap
msgid ""
"    @Incoming(\"prices\")                                 // <1>\n"
"    @Outgoing(\"my-data-stream\")                         // <2>\n"
"    @Broadcast                                          // <3>\n"
"    public double process(int priceInUsd) {\n"
"        return priceInUsd * CONVERSION_RATE;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:190
msgid "Indicates that the method consumes the items from the `prices` topic"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:191
msgid "Indicates that the objects returned by the method are sent to the `my-data-stream` stream"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:192
msgid "Indicates that the item are dispatched to all _subscribers_"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:195
msgid "The `process` method is called for every Kafka _record_ from the `prices` topic (configured in the application configuration).  Every result is sent to the `my-data-stream` in-memory stream."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/kafka.adoc:196
#, no-wrap
msgid "The price resource"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:200
msgid "Finally, let's bind our stream to a JAX-RS resource.  Creates the `src/main/java/org/acme/kafka/PriceResource.java` file with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:207
#: upstream/_versions/1.7/guides/kafka.adoc:556
#, no-wrap
msgid ""
"import io.smallrye.reactive.messaging.annotations.Channel;\n"
"import org.reactivestreams.Publisher;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:214
#: upstream/_versions/1.7/guides/kafka.adoc:563
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
"import org.jboss.resteasy.annotations.SseElementType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:220
#, no-wrap
msgid ""
"/**\n"
" * A simple resource retrieving the in-memory \"my-data-stream\" and sending the items as server-sent events.\n"
" */\n"
"@Path(\"/prices\")\n"
"public class PriceResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:223
#, no-wrap
msgid ""
"    @Inject\n"
"    @Channel(\"my-data-stream\") Publisher<Double> prices; // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:232
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/stream\")\n"
"    @Produces(MediaType.SERVER_SENT_EVENTS) // <2>\n"
"    @SseElementType(\"text/plain\") // <3>\n"
"    public Publisher<Double> stream() { // <4>\n"
"        return prices;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:234
msgid "Injects the `my-data-stream` channel using the `@Channel` qualifier"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:235
msgid "Indicates that the content is sent using `Server Sent Events`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:236
msgid "Indicates that the data contained within the server sent events is of type `text/plain`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:237
msgid "Returns the stream (_Reactive Stream_)"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/kafka.adoc:238
#, no-wrap
msgid "Configuring the Kafka connector"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:242
msgid "We need to configure the Kafka connector. This is done in the `application.properties` file.  The keys are structured as follows:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:244
msgid "`mp.messaging.[outgoing|incoming].{channel-name}.property=value`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:246
msgid "The `channel-name` segment must match the value set in the `@Incoming` and `@Outgoing` annotation:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:248
msgid "`generated-price` -> sink in which we write the prices"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:249
msgid "`prices` -> source in which we read the prices"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:254
#, no-wrap
msgid ""
"# Configure the SmallRye Kafka connector\n"
"kafka.bootstrap.servers=localhost:9092\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:259
#, no-wrap
msgid ""
"# Configure the Kafka sink (we write to it)\n"
"mp.messaging.outgoing.generated-price.connector=smallrye-kafka\n"
"mp.messaging.outgoing.generated-price.topic=prices\n"
"mp.messaging.outgoing.generated-price.value.serializer=org.apache.kafka.common.serialization.IntegerSerializer\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:263
#, no-wrap
msgid ""
"# Configure the Kafka source (we read from it)\n"
"mp.messaging.incoming.prices.connector=smallrye-kafka\n"
"mp.messaging.incoming.prices.value.deserializer=org.apache.kafka.common.serialization.IntegerDeserializer\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:266
msgid "More details about this configuration is available on the https://kafka.apache.org/documentation/#producerconfigs[Producer configuration] and https://kafka.apache.org/documentation/#consumerconfigs[Consumer configuration] section from the Kafka documentation. These properties are configured with the prefix `kafka`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:268
msgid "What about `my-data-stream`? This is an in-memory stream, not connected to a message broker."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/kafka.adoc:269
#, no-wrap
msgid "The HTML page"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:272
msgid "Final touch, the HTML page reading the converted prices using SSE."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:274
msgid "Create the `src/main/resources/META-INF/resources/prices.html` file, with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:282
#, no-wrap
msgid ""
"<!DOCTYPE html>\n"
"<html lang=\"en\">\n"
"<head>\n"
"    <meta charset=\"UTF-8\">\n"
"    <title>Prices</title>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:290
#, no-wrap
msgid ""
"    <link rel=\"stylesheet\" type=\"text/css\"\n"
"          href=\"https://cdnjs.cloudflare.com/ajax/libs/patternfly/3.24.0/css/patternfly.min.css\">\n"
"    <link rel=\"stylesheet\" type=\"text/css\"\n"
"          href=\"https://cdnjs.cloudflare.com/ajax/libs/patternfly/3.24.0/css/patternfly-additions.min.css\">\n"
"</head>\n"
"<body>\n"
"<div class=\"container\">\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:305
#, no-wrap
msgid ""
"    <h2>Last price</h2>\n"
"    <div class=\"row\">\n"
"    <p class=\"col-md-12\">The last price is <strong><span id=\"content\">N/A</span>&nbsp;&euro;</strong>.</p>\n"
"    </div>\n"
"</div>\n"
"</body>\n"
"<script src=\"https://code.jquery.com/jquery-3.3.1.min.js\"></script>\n"
"<script>\n"
"    var source = new EventSource(\"/prices/stream\");\n"
"    source.onmessage = function (event) {\n"
"        document.getElementById(\"content\").innerHTML = event.data;\n"
"    };\n"
"</script>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:308
msgid "Nothing spectacular here. On each received price, it updates the page."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/kafka.adoc:309
#, no-wrap
msgid "Get it running"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:313
msgid "If you followed the instructions, you should have Kafka running.  Then, you just need to run the application using:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:317
#, no-wrap
msgid "./mvnw quarkus:dev\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:320
msgid "Open `http://localhost:8080/prices.html` in your browser."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:322
msgid "If you started the Kafka broker with docker compose, stop it using `CTRL+C` followed by `docker-compose down`."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/kafka.adoc:323
#, no-wrap
msgid "Running Native"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:326
msgid "You can build the native executable with:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:330
#, no-wrap
msgid "./mvnw package -Pnative\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/kafka.adoc:332
#, no-wrap
msgid "Imperative usage"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:335
msgid "Sometimes, you need to have an imperative way of sending messages."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:338
msgid "For example, if you need to send a message to a stream, from inside a REST endpoint, when receiving a POST request.  In this case, you cannot use `@Output` because your method has parameters."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:340
msgid "For this, you can use an `Emitter`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:345
#, no-wrap
msgid ""
"import org.eclipse.microprofile.reactive.messaging.Channel;\n"
"import org.eclipse.microprofile.reactive.messaging.Emitter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:351
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:354
#, no-wrap
msgid ""
"@Path(\"/prices\")\n"
"public class PriceResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:356
#, no-wrap
msgid "    @Inject @Channel(\"price-create\") Emitter<Double> priceEmitter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:363
#, no-wrap
msgid ""
"    @POST\n"
"    @Consumes(MediaType.TEXT_PLAIN)\n"
"    public void addPrice(Double price) {\n"
"        priceEmitter.send(price);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:367
msgid "The `Emitter` configuration is done the same way as the other stream configuration used by `@Incoming` and `@Outgoing`.  In addition, you can use `@OnOverflow` to configure back-pressure strategy."
msgstr ""

#. type: Block title
#: upstream/_versions/1.7/guides/kafka.adoc:369
#, no-wrap
msgid "Deprecation"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.7/guides/kafka.adoc:372
msgid "The `io.smallrye.reactive.messaging.annotations.Emitter`, `io.smallrye.reactive.messaging.annotations.Channel` and `io.smallrye.reactive.messaging.annotations.OnOverflow` classes are now deprecated and replaced by:"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.7/guides/kafka.adoc:374
msgid "`org.eclipse.microprofile.reactive.messaging.Emitter`"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.7/guides/kafka.adoc:375
msgid "`org.eclipse.microprofile.reactive.messaging.Channel`"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.7/guides/kafka.adoc:376
msgid "`org.eclipse.microprofile.reactive.messaging.OnOverflow`"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.7/guides/kafka.adoc:378
msgid "The new `Emitter.send` method returns a `CompletionStage` completed when the produced message is acknowledged."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/kafka.adoc:380
#, no-wrap
msgid "Kafka Health Check"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:384
msgid "If you are using the `quarkus-smallrye-health` extension, `quarkus-kafka` can add a readiness health check to validate the connection to the broker. This is disabled by default."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:386
msgid "If enabled, when you access the `/health/ready` endpoint of your application you will have information about the connection validation status."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:388
msgid "This behavior can be enabled by setting the `quarkus.kafka.health.enabled` property to `true` in your `application.properties`."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/kafka.adoc:389
#, no-wrap
msgid "JSON serialization"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:392
msgid "Quarkus has built-in capabilities to deal with JSON Kafka messages."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:394
msgid "Imagine we have a `Fruit` pojo as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:398
#, no-wrap
msgid "public class Fruit {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:401
#, no-wrap
msgid ""
"    public String name;\n"
"    public int price;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:404
#, no-wrap
msgid ""
"    public Fruit() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:410
#, no-wrap
msgid ""
"    public Fruit(String name, int price) {\n"
"        this.name = name;\n"
"        this.price = price;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:413
msgid "And we want to use it to receive messages from Kafka, make some price transformation, and send messages back to Kafka."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:428
#, no-wrap
msgid ""
"/**\n"
"* A bean consuming data from the \"fruit-in\" Kafka topic and applying some price conversion.\n"
"* The result is pushed to the \"fruit-out\" stream.\n"
"*/\n"
"@ApplicationScoped\n"
"public class FruitProcessor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:438
#, no-wrap
msgid ""
"    @Incoming(\"fruit-in\")\n"
"    @Outgoing(\"fruit-out\")\n"
"    @Broadcast\n"
"    public double process(Fruit fruit) {\n"
"        fruit.price = fruit.price * CONVERSION_RATE;\n"
"        return fruit;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:443
msgid "To do this, we will need to setup JSON serialization with JSON-B or Jackson."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:445
msgid "With JSON serialization correctly configured, you can also use `Publisher<Fruit>` and `Emitter<Fruit>`."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/kafka.adoc:446
#, no-wrap
msgid "Serializing via JSON-B"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:449
msgid "First, you need to include the `quarkus-jsonb` extension (if you already use the `quarkus-resteasy-jsonb` extension, this is not needed)."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:456
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-jsonb</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:460
msgid "There is an existing `JsonbSerializer` that can be used to serialize all pojos via JSON-B, but the corresponding deserializer is generic, so it needs to be subclassed."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:462
msgid "So, let's create a `FruitDeserializer` that extends the generic `JsonbDeserializer`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:466
#, no-wrap
msgid "package com.acme.fruit.jsonb;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:468
#, no-wrap
msgid "import io.quarkus.kafka.client.serialization.JsonbDeserializer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:475
#, no-wrap
msgid ""
"public class FruitDeserializer extends JsonbDeserializer<Fruit> {\n"
"    public FruitDeserializer(){\n"
"        // pass the class to the parent.\n"
"        super(Fruit.class);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:479
msgid "If you don't want to create a deserializer for each of your pojo, you can use the generic `io.vertx.kafka.client.serialization.JsonObjectDeserializer` that will deserialize to a `javax.json.JsonObject`. The corresponding serializer can also be used: `io.vertx.kafka.client.serialization.JsonObjectSerializer`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:481
msgid "Finally, configure your streams to use the JSON-B serializer and deserializer."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:488
#, no-wrap
msgid ""
"# Configure the Kafka source (we read from it)\n"
"mp.messaging.incoming.fruit-in.connector=smallrye-kafka\n"
"mp.messaging.incoming.fruit-in.topic=fruit-in\n"
"mp.messaging.incoming.fruit-in.value.deserializer=com.acme.fruit.jsonb.FruitDeserializer\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:493
#, no-wrap
msgid ""
"# Configure the Kafka sink (we write to it)\n"
"mp.messaging.outgoing.fruit-out.connector=smallrye-kafka\n"
"mp.messaging.outgoing.fruit-out.topic=fruit-out\n"
"mp.messaging.outgoing.fruit-out.value.serializer=io.quarkus.kafka.client.serialization.JsonbSerializer\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:496
msgid "Now, your Kafka messages will contain a JSON-B serialized representation of your Fruit pojo."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/kafka.adoc:497
#, no-wrap
msgid "Serializing via Jackson"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:500
msgid "First, you need to include the `quarkus-jackson` extension (if you already use the `quarkus-resteasy-jackson` extension, this is not needed)."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:507
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-jackson</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:511
msgid "There is an existing `ObjectMapperSerializer` that can be used to serialize all pojos via Jackson, but the corresponding deserializer is generic, so it needs to be subclassed."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:513
msgid "So, let's create a `FruitDeserializer` that extends the `ObjectMapperDeserializer`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:517
#, no-wrap
msgid "package com.acme.fruit.jackson;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:519
#, no-wrap
msgid "import io.quarkus.kafka.client.serialization.ObjectMapperDeserializer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:526
#, no-wrap
msgid ""
"public class FruitDeserializer extends ObjectMapperDeserializer<Fruit> {\n"
"    public FruitDeserializer(){\n"
"        // pass the class to the parent.\n"
"        super(Fruit.class);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:529
msgid "Finally, configure your streams to use the Jackson serializer and deserializer."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:536
#, no-wrap
msgid ""
"# Configure the Kafka source (we read from it)\n"
"mp.messaging.incoming.fruit-in.connector=smallrye-kafka\n"
"mp.messaging.incoming.fruit-in.topic=fruit-in\n"
"mp.messaging.incoming.fruit-in.value.deserializer=com.acme.fruit.jackson.FruitDeserializer\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:541
#, no-wrap
msgid ""
"# Configure the Kafka sink (we write to it)\n"
"mp.messaging.outgoing.fruit-out.connector=smallrye-kafka\n"
"mp.messaging.outgoing.fruit-out.topic=fruit-out\n"
"mp.messaging.outgoing.fruit-out.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:544
msgid "Now, your Kafka messages will contain a Jackson serialized representation of your Fruit pojo."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/kafka.adoc:545
#, no-wrap
msgid "Sending JSON Server-Sent Events (SSE)"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:549
msgid "If you want RESTEasy to send JSON Server-Sent Events, you need to use the `@SseElementType` annotation to define the content type of the events, as the method will be annotated with `@Produces(MediaType.SERVER_SENT_EVENTS)`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:551
msgid "The following example shows how to use SSE from a Kafka topic source."
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:566
#, no-wrap
msgid ""
"@Path(\"/fruits\")\n"
"public class PriceResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:569
#, no-wrap
msgid ""
"    @Inject\n"
"    @Channel(\"fruit-out\") Publisher<Fruit> fruits;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:578
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/stream\")\n"
"    @Produces(MediaType.SERVER_SENT_EVENTS)\n"
"    @SseElementType(MediaType.APPLICATION_JSON)\n"
"    public Publisher<Fruit> stream() {\n"
"        return fruits;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/kafka.adoc:580
#, no-wrap
msgid "Blocking processing"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:584
msgid "You often need to combine Reactive Messaging with blocking processing such as database interactions.  For this, you need to use the `@Blocking` annotation indicating that the processing is _blocking_ and cannot be run on the caller thread."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:586
msgid "For example, The following code illustrates how you can store incoming payloads to a database using Hibernate with Panache:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:590
#, no-wrap
msgid "package org.acme.panache;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:593
#, no-wrap
msgid ""
"import io.smallrye.reactive.messaging.annotations.Blocking;\n"
"import org.eclipse.microprofile.reactive.messaging.Incoming;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:596
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.transaction.Transactional;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:599
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PriceStorage {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/kafka.adoc:608
#, no-wrap
msgid ""
"    @Incoming(\"prices\")\n"
"    @Blocking\n"
"    @Transactional\n"
"    public void store(int priceInUsd) {\n"
"        Price price = new Price();\n"
"        price.value = priceInUsd;\n"
"        price.persist();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:613
msgid "The complete example is available in the `kafka-panache-quickstart` {quickstarts-tree-url}/kafka-panache-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/kafka.adoc:614
#, no-wrap
msgid "Going further"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:618
msgid "This guide has shown how you can interact with Kafka using Quarkus.  It utilizes MicroProfile Reactive Messaging to build data streaming applications."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/kafka.adoc:619
msgid "If you want to go further check the documentation of https://smallrye.io/smallrye-reactive-messaging[SmallRye Reactive Messaging], the implementation used in Quarkus."
msgstr ""
