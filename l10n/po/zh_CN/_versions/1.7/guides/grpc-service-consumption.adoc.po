# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-07-10 05:19+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/1.7/guides/grpc-service-consumption.adoc:6
#, no-wrap
msgid "Consuming a gRPC Service"
msgstr "gRPC サービスを消費する"

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-service-consumption.adoc:11
msgid "gRPC services can be injected in your application code."
msgstr "gRPC サービスは、アプリケーションのコードに注入することができます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-service-consumption.adoc:14
msgid "Consuming gRPC services requires the gRPC classes to be generated.  Place your `proto` files in `src/main/proto` and run `mvn compile`."
msgstr "gRPC サービスを消費するには、gRPC クラスを生成する必要があります。 `proto` ファイルを `src/main/proto` に置き、 `mvn compile` を実行してください。"

#. type: Title ==
#: upstream/_versions/1.7/guides/grpc-service-consumption.adoc:15
#, no-wrap
msgid "Stubs and Injection"
msgstr "スタブとインジェクション"

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-service-consumption.adoc:19
msgid "gRPC generation provides several stubs, providing different way to consume a service.  Quarkus gRPC can inject:"
msgstr "gRPC生成はいくつかのスタブを提供し、サービスを消費するためのさまざまな方法を提供します。QuarkusのgRPCはインジェクトすることができます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-service-consumption.adoc:21
msgid "blocking stubs"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-service-consumption.adoc:22
msgid "reactive stubs based on Mutiny"
msgstr "Mutinyをベースにしたリアクティブスタブ"

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-service-consumption.adoc:24
msgid "In addition, it also can inject the gRPC `io.grpc.Channel`, that lets you create other types of stubs."
msgstr "さらに、それはまた gRPC `io.grpc.Channel` を注入することができ、他のタイプのスタブを作成することを可能にします。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-service-consumption.adoc:29
#, no-wrap
msgid ""
"@Inject @GrpcService(\"hello-service\")\n"
"MutinyGreeterGrpc.MutinyGreeterStub mutiny;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-service-consumption.adoc:32
#, no-wrap
msgid ""
"@Inject @GrpcService(\"hello-service\")\n"
"GreeterGrpc.GreeterBlockingStub blocking;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-service-consumption.adoc:35
#, no-wrap
msgid ""
"@Inject @GrpcService(\"hello-service\")\n"
"Channel channel;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-service-consumption.adoc:39
msgid "The stub class names are computed from the service name.  For example, if you use `Greeter` as service name as in:"
msgstr "スタブクラス名はサービス名から計算されます。例えば、サービス名として `Greeter` とした場合。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-service-consumption.adoc:45
#, no-wrap
msgid ""
"service Greeter {\n"
"    rpc SayHello (HelloRequest) returns (HelloReply) {}\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-service-consumption.adoc:49
msgid "The Mutiny stub name is: `MutinyGreeterGrpc.MutinyGreeterStub` The blocking stub name is: `GreeterGrpc.GreeterBlockingStub`"
msgstr "Mutinyのスタブ名は `MutinyGreeterGrpc.MutinyGreeterStub` です。ブロッキングのスタブ名は `GreeterGrpc.GreeterBlockingStub` です。"

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-service-consumption.adoc:53
msgid "Client injection must be qualified using `@GrpcService`.  This annotation indicates the configuration prefix used to configure the service.  For example, if you set it to `hello-service`, configuring the host of the service is done using `hello-service.host`."
msgstr "クライアントインジェクションは、 `@GrpcService` を使用して修飾する必要があります。このアノテーションは、サービスを構成するために使用する構成プレフィックスを示します。たとえば、 `hello-service` に設定した場合、サービスのホストの構成は `hello-service.host` を使用して行われます。"

#. type: Title ==
#: upstream/_versions/1.7/guides/grpc-service-consumption.adoc:54
#, no-wrap
msgid "Examples"
msgstr "例"

#. type: Title ===
#: upstream/_versions/1.7/guides/grpc-service-consumption.adoc:56
#, no-wrap
msgid "Using a blocking and mutiny stubs"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-service-consumption.adoc:62
#, no-wrap
msgid ""
"@Inject @GrpcService(\"hello\") GreeterGrpc.GreeterBlockingStub blockingHelloService;\n"
"@Inject @GrpcService(\"hello\") MutinyGreeterGrpc.MutinyGreeterStub mutinyHelloService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-service-consumption.adoc:68
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/blocking/{name}\")\n"
"public String helloBlocking(@PathParam(\"name\") String name) {\n"
"    return blockingHelloService.sayHello(HelloRequest.newBuilder().setName(name).build()).getMessage();\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-service-consumption.adoc:75
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/mutiny/{name}\")\n"
"public Uni<String> helloMutiny(@PathParam(\"name\") String name) {\n"
"    return mutinyHelloService.sayHello(HelloRequest.newBuilder().setName(name).build())\n"
"            .onItem().transform(HelloReply::getMessage);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-service-consumption.adoc:78
msgid "Note that in this example, the `quarkus.grpc.clients.hello.host` property must be set."
msgstr "この例では、 `quarkus.grpc.clients.hello.host` プロパティーを設定する必要があることに注意してください。"

#. type: Title ===
#: upstream/_versions/1.7/guides/grpc-service-consumption.adoc:79
#, no-wrap
msgid "Handling streams"
msgstr "ストリームの取り扱い"

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-service-consumption.adoc:82
msgid "gRPC allows sending and receiving streams:"
msgstr "gRPCでは、ストリームの送受信が可能です。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-service-consumption.adoc:90
#, no-wrap
msgid ""
"service Streaming {\n"
"    rpc Source(Empty) returns (stream Item) {} // Returns a stream\n"
"    rpc Sink(stream Item) returns (Empty) {}   // Reads a stream\n"
"    rpc Pipe(stream Item) returns (stream Item) {}  // Reads a streams and return a streams\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-service-consumption.adoc:93
msgid "Using the Mutiny stub, you can interact with these as follows:"
msgstr "Mutinyのスタブを使用すると、以下のようにこれらと対話することができます。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-service-consumption.adoc:97
#, no-wrap
msgid "package io.quarkus.grpc.example.streaming;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-service-consumption.adoc:103
#, no-wrap
msgid ""
"import io.grpc.examples.streaming.Empty;\n"
"import io.grpc.examples.streaming.Item;\n"
"import io.grpc.examples.streaming.MutinyStreamingGrpc;\n"
"import io.quarkus.grpc.runtime.annotations.GrpcService;\n"
"import io.smallrye.mutiny.Multi;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-service-consumption.adoc:110
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.PathParam;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-service-consumption.adoc:114
#, no-wrap
msgid ""
"@Path(\"/streaming\")\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"public class StreamingEndpoint {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-service-consumption.adoc:116
#, no-wrap
msgid "    @Inject @GrpcService(\"streaming\") MutinyStreamingGrpc.MutinyStreamingStub client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-service-consumption.adoc:123
#, no-wrap
msgid ""
"    @GET\n"
"    public Multi<String> invokeSource() {\n"
"        // Retrieve a stream\n"
"        return client.source(Empty.newBuilder().build())\n"
"                .onItem().transform(Item::getValue);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-service-consumption.adoc:133
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"sink/{max}\")\n"
"    public Uni<Void> invokeSink(@PathParam(\"max\") int max) {\n"
"        // Send a stream and wait for completion\n"
"        Multi<Item> inputs = Multi.createFrom().range(0, max)\n"
"                .map(i -> Integer.toString(i))\n"
"                .map(i -> Item.newBuilder().setValue(i).build());\n"
"        return client.sink(inputs).onItem().ignore().andContinueWithNull();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-service-consumption.adoc:143
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/{max}\")\n"
"    public Multi<String> invokePipe(@PathParam(\"max\") int max) {\n"
"        // Send a stream and retrieve a stream\n"
"        Multi<Item> inputs = Multi.createFrom().range(0, max)\n"
"                .map(i -> Integer.toString(i))\n"
"                .map(i -> Item.newBuilder().setValue(i).build());\n"
"        return client.pipe(inputs).onItem().transform(Item::getValue);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-service-consumption.adoc:145
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/grpc-service-consumption.adoc:148
#, no-wrap
msgid "Client configuration"
msgstr "クライアント設定"

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-service-consumption.adoc:151
msgid "For each gRPC service you inject in your application, you can configure the following attributes:"
msgstr "アプリケーションにインジェクトする各gRPCサービスに対して、以下の属性を設定することができます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-service-consumption.adoc:155
msgid "The `service-name` is the name set in the `@GrpcService`."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/grpc-service-consumption.adoc:156
#, no-wrap
msgid "Example of configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-service-consumption.adoc:160
msgid "The 2 following examples uses _hello_ as service name.  Don't forget to replace it with the name you used in in the `@GrpcService` annotation."
msgstr "以下の2つの例では、サービス名として _hello_ を使用しています。 `@GrpcService` アノテーションで使用した名前に置き換えることを忘れないでください。"

#. type: Title ===
#: upstream/_versions/1.7/guides/grpc-service-consumption.adoc:161
#, no-wrap
msgid "Enabling TLS"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-service-consumption.adoc:164
msgid "To enable TLS, use the following configuration:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-service-consumption.adoc:169
#, no-wrap
msgid ""
"quarkus.grpc.clients.hello.host=localhost\n"
"quarkus.grpc.clients.hello.ssl.trust-store=src/main/resources/tls/ca.pem\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-service-consumption.adoc:172
msgid "When SSL/TLS is configured, `plain-text` is automatically disabled."
msgstr "SSL/TLSを設定すると、 `plain-text` は自動的に無効になります。"

#. type: Title ===
#: upstream/_versions/1.7/guides/grpc-service-consumption.adoc:173
#, no-wrap
msgid "TLS with Mutual Auth"
msgstr "相互認証付きTLS"

#. type: Plain text
#: upstream/_versions/1.7/guides/grpc-service-consumption.adoc:176
msgid "To use TLS with mutual authentication, use the following configuration:"
msgstr "相互認証付きのTLSを使用するには、以下の設定を使用します。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/grpc-service-consumption.adoc:184
#, no-wrap
msgid ""
"quarkus.grpc.clients.hello.host=localhost\n"
"quarkus.grpc.clients.hello.plain-text=false\n"
"quarkus.grpc.clients.hello.ssl.certificate=src/main/resources/tls/client.pem\n"
"quarkus.grpc.clients.hello.ssl.key=src/main/resources/tls/client.key\n"
"quarkus.grpc.clients.hello.ssl.trust-store=src/main/resources/tls/ca.pem\n"
msgstr ""
