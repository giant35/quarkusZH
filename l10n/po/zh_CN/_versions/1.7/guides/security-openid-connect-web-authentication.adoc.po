# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-07-11 01:24+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:6
#, no-wrap
msgid "Quarkus - Using OpenID Connect to Protect Web Applications using Authorization Code Flow."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:12
msgid "This guide demonstrates how to use Quarkus OpenID Connect Extension to protect your Quarkus HTTP endpoints using OpenId Connect Authorization Code Flow supported by OpenId Connect compliant Authorization Servers such as https://www.keycloak.org/about.html[Keycloak]."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:14
msgid "The extension allows to easily authenticate the users of your web application by redirecting them to the OpenID Connect Provider (e.g.: Keycloak) to login and, once the authentication is complete, return them back with the code confirming the successful authentication. The extension will request ID and access tokens from the OpenID Connect Provider using an authorization code grant and verify these tokens in order to authorize an access to the application."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:16
msgid "Please read the link:security-openid-connect[Using OpenID Connect to Protect Service Applications] guide if you need to protect your applications using Bearer Token Authorization."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:18
msgid "Please read the link:security-openid-connect-multitenancy[Using OpenID Connect Multi-Tenancy] guide how to support multiple tenants."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:19
#, no-wrap
msgid "Prerequisites"
msgstr "准备"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:22
msgid "To complete this guide, you need:"
msgstr "要完成本指南，您需要："

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:24
msgid "less than 15 minutes"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:25
msgid "an IDE"
msgstr "IDE"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:26
msgid "JDK 1.8+ installed with `JAVA_HOME` configured appropriately"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:27
msgid "Apache Maven {maven-version}"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:28
msgid "https://stedolan.github.io/jq/[jq tool]"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:29
msgid "Docker"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:30
#, no-wrap
msgid "Architecture"
msgstr "架构"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:33
msgid "In this example, we build a very simple web application with a single page:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:35
msgid "`/index.html`"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:37
msgid "This page is protected and can only be accessed by authenticated users."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:38
#, no-wrap
msgid "Solution"
msgstr "完整源码"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:42
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:44
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:46
msgid "The solution is located in the `security-openid-connect-web-authentication-quickstart` {quickstarts-tree-url}/security-openid-connect-web-authentication-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:47
#, no-wrap
msgid "Creating the Maven Project"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:50
msgid "First, we need a new project. Create a new project with the following command:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:58
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=security-openid-connect-web-authentication-quickstart \\\n"
"    -Dextensions=\"oidc\"\n"
"cd security-openid-connect-web-authentication-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:62
msgid "If you already have your Quarkus project configured, you can add the `oidc` extension to your project by running the following command in your project base directory:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:66
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"oidc\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:69
msgid "This will add the following to your `pom.xml`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:76
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:78
#, no-wrap
msgid "Configuring the application"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:81
msgid "The OpenID Connect extension allows you to define the configuration using the `application.properties` file which should be located at the `src/main/resources` directory."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:82
#, no-wrap
msgid "Configuring using the application.properties file"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:91
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus\n"
"quarkus.oidc.client-id=frontend\n"
"quarkus.oidc.application-type=web-app\n"
"quarkus.http.auth.permission.authenticated.paths=/*\n"
"quarkus.http.auth.permission.authenticated.policy=authenticated\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:94
msgid "This is the simplest configuration you can have when enabling authentication to your application."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:96
msgid "The `quarkus.oidc.client-id` property references the `client_id` issued by the OpenID Connect Provider and, in this case, the application is a public client (no client secret is defined)."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:98
msgid "The `quarkus.oidc.application-type` property is set to `web-app` in order to tell Quarkus that you want to enable the OpenID Connect Authorization Code Flow, so that your users are redirected to the OpenID Connect Provider to authenticate."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:101
msgid "For last, the `quarkus.http.auth.permission.authenticated` permission is set to tell Quarkus about the paths you want to protect. In this case, all paths are being protected by a policy that ensures that only `authenticated` users are allowed to access. For more details check link:security[Security Guide]."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:102
#, no-wrap
msgid "Starting and Configuring the Keycloak Server"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:105
msgid "To start a Keycloak Server you can use Docker and just run the following command:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:109
#, no-wrap
msgid "docker run --name keycloak -e KEYCLOAK_USER=admin -e KEYCLOAK_PASSWORD=admin -p 8180:8080 {keycloak-docker-image}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:112
msgid "You should be able to access your Keycloak Server at http://localhost:8180/auth[localhost:8180/auth]."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:114
msgid "Log in as the `admin` user to access the Keycloak Administration Console. Username should be `admin` and password `admin`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:116
msgid "Import the {quickstarts-tree-url}/security-openid-connect-web-authentication-quickstart/config/quarkus-realm.json[realm configuration file] to create a new realm. For more details, see the Keycloak documentation about how to https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[create a new realm]."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:117
#, no-wrap
msgid "Running and Using the Application"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:119
#, no-wrap
msgid "Running in Developer Mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:122
msgid "To run the microservice in dev mode, use `./mvnw clean compile quarkus:dev`."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:123
#, no-wrap
msgid "Running in JVM Mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:126
msgid "When you're done playing with \"dev-mode\" you can run it as a standard Java application."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:128
msgid "First compile it:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:132
#, no-wrap
msgid "./mvnw package\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:135
msgid "Then run it:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:139
#, no-wrap
msgid "java -jar ./target/security-openid-connect-web-authentication-quickstart-runner.jar\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:141
#, no-wrap
msgid "Running in Native Mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:144
msgid "This same demo can be compiled into native code: no modifications required."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:148
msgid "This implies that you no longer need to install a JVM on your production environment, as the runtime technology is included in the produced binary, and optimized to run with minimal resource overhead."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:151
msgid "Compilation will take a bit longer, so this step is disabled by default; let's build again by enabling the `native` profile:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:155
#, no-wrap
msgid "./mvnw package -Pnative\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:158
msgid "After getting a cup of coffee, you'll be able to run this binary directly:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:162
#, no-wrap
msgid "./target/security-openid-connect-web-authentication-quickstart-runner\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:164
#, no-wrap
msgid "Testing the Application"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:167
msgid "To test the application, you should open your browser and access the following URL:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:169
msgid "http://localhost:8080[http://localhost:8080]"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:171
msgid "If everything is working as expected, you should be redirected to the Keycloak server to authenticate."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:173
msgid "In order to authenticate to the application you should type the following credentials when at the Keycloak login page:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:175
msgid "Username: *alice*"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:176
msgid "Password: *alice*"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:178
msgid "After clicking the `Login` button you should be redirected back to the application."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:179
#, no-wrap
msgid "Redirection"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:182
msgid "When the user is redirected to the OpenID Connect Provider to authenticate, the redirect URL includes a `redirect_uri` query parameter which indicates to the Provider where the user has to be redirected to once the authentication has been completed."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:184
msgid "Quarkus will set this parameter to the current request URL by default. For example, if the user is trying to access a Quarkus service endpoint at `http://localhost:8080/service/1` then the `redirect_uri` parameter will be set to `http://localhost:8080/service/1`. Similarly, if the request URL is `http://localhost:8080/service/2` then the `redirect_uri` parameter will be set to `http://localhost:8080/service/2`, etc."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:187
msgid "OpenID Connect Providers may be configured to require the `redirect_uri` parameter to have the same value (eg. `http://localhost:8080/service/callback`) for all the redirect URLs.  In such cases a `quarkus.oidc.authentication.redirect-path` property has to be set, for example, `quarkus.oidc.authentication.redirect-path=/service/callback`, and Quarkus will set the `redirect_uri` parameter to an absolute URL such as `http://localhost:8080/service/callback` which will be the same regardless of the current request URL."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:189
msgid "If `quarkus.oidc.authentication.redirect-path` is set but the original request URL has to be restored after the user has been redirected back to a callback URL such as `http://localhost:8080/service/callback` then a `quarkus.oidc.authentication.restore-path-after-redirect` property has to be set to `true` which will restore the request URL such as `http://localhost:8080/service/1`, etc."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:190
#, no-wrap
msgid "Logout"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:193
msgid "By default the logout is based on the expiration time of the ID Token issued by the OpenID Connect Provider. When the ID Token expires, the current user session at the Quarkus endpoint is invalidated and the user is redirected to the OpenID Connect Provider again to authenticate. If the session at the OpenID Connect Provider is still active, users are automatically re-authenticated without having to provide their credentials again."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:195
msgid "The current user session may be automatically extended by enabling a `quarkus.oidc.token.refresh-expired` property. If it is set to `true` then when the current ID Token expires a Refresh Token Grant will be used to refresh ID Token as well as Access and Refresh Tokens."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:196
#, no-wrap
msgid "User-Initiated Logout"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:200
msgid "Users can request a logout by sending a request to the Quarkus endpoint logout path set with a `quarkus.oidc.logout.path` property.  For example, if the endpoint address is `https://application.com/webapp` and the `quarkus.oidc.logout.path` is set to \"/logout\" then the logout request has to be sent to `https://application.com/webapp/logout`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:202
msgid "This logout request will start an https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-Initiated Logout] and the user will be redirected to the OpenID Connect Provider to logout where a user may be asked to confirm the logout is indeed intended."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:204
msgid "The user will be returned to the endpoint post logout page once the logout has been completed if the `quarkus.oidc.logout.post-logout-path` property is set. For example, if the endpoint address is `https://application.com/webapp` and the `quarkus.oidc.logout.post-logout-path` is set to \"/signin\" then the user will be returned to `https://application.com/webapp/signin` (note this URI must be registered as a valid `post_logout_redirect_uri` in the OpenID Connect Provider)."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:206
msgid "If the `quarkus.oidc.logout.post-logout-path` is set then a `q_post_logout` cookie will be created and a matching `state` query parameter will be added to the logout redirect URI and the OpenID Connect Provider will return this `state` once the logout has been completed. It is recommended for the Quarkus `web-app` applications to check that a `state` query parameter matches the value of the `q_post_logout` cookie which can be done for example in a JAX-RS filter."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:208
msgid "Note that a cookie name will vary when using link:security-openid-connect-multitenancy[OpenID Connect Multi-Tenancy]. For example, it will be named `q_post_logout_tenant_1` for a tenant with a `tenant_1` id, etc."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:209
#, no-wrap
msgid "Accessing ID and Access Tokens"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:212
msgid "ID Token is always a JWT token. One can access ID Token claims by injecting `JsonWebToken` with an `IdToken` qualifier:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:219
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
"import io.quarkus.oidc.IdToken;\n"
"import io.quarkus.security.Authenticated;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:223
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:247
#, no-wrap
msgid ""
"@Path(\"/web-app\")\n"
"@Authenticated\n"
"public class ProtectedResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:227
#, no-wrap
msgid ""
"    @Inject\n"
"    @IdToken\n"
"    JsonWebToken idToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:233
#, no-wrap
msgid ""
"    @GET\n"
"    public String getUserName() {\n"
"        return idToken.getName();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:236
msgid "Access Token is usually used by the OIDC `web-app` application to access other endpoints on behalf of the currently logged in user. The raw access token can be accessed as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:243
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
"import io.quarkus.oidc.AccessTokenCredential;\n"
"import io.quarkus.security.Authenticated;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:250
#, no-wrap
msgid ""
"    @Inject\n"
"    JsonWebToken accessToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:254
#, no-wrap
msgid ""
"    // or\n"
"    // @Inject\n"
"    // AccessTokenCredential accessTokenCredential;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:260
#, no-wrap
msgid ""
"    @GET\n"
"    public String getReservationOnBehalfOfUser() {\n"
"        String rawAccessToken = accessToken.getRawToken();\n"
"        //or\n"
"        //String rawAccessToken = accessTokenCredential.getToken();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:265
#, no-wrap
msgid ""
"        // Use the raw access token to access a remote endpoint\n"
"        return getReservationfromRemoteEndpoint(rawAccesstoken);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:268
msgid "Note that `AccessTokenCredential` will have to be used if the Access Token issued to the Quarkus `web-app` application is opaque (binary) and can not be parsed to `JsonWebToken`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:270
msgid "Injection of the `JsonWebToken` and `AccessTokenCredential` is supported in both `@RequestScoped` and `@ApplicationScoped` contexts."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:271
#, no-wrap
msgid "User Info"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:275
msgid "Set `quarkus.oidc.user-info-required=true` if a UserInfo JSON object from the OIDC userinfo endpoint has to be requested.  This will make an `io.quarkus.oidc.UserInfo` (which is a simple `javax.json.JsonObject` wrapper) object accessible as a SecurityIdentity `userinfo` attribute."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:276
#, no-wrap
msgid "Token Claims And SecurityIdentity Roles"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:279
msgid "The way the roles are mapped to the SecurityIdentity roles from the verified tokens is identical to how it is done for the link:security-openid-connect#token-claims-and-securityidentity-roles[bearer tokens] with the only difference being is that https://openid.net/specs/openid-connect-core-1_0.html#IDToken[ID Token] is used as a source of the roles by default."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:281
msgid "Note if you use Keycloak then you should set a Microprofile JWT client scope for ID token to contain a `groups` claim, please see the https://www.keycloak.org/docs/latest/server_admin/#protocol[Keycloak Server Administration Guide] for more information."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:283
msgid "If only the access token contains the roles and this access token is not meant to be propagated to the downstream endpoints then set `quarkus.oidc.roles.source=accesstoken`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:285
msgid "If UserInfo is the source of the roles then set `quarkus.oidc.user-info-required=true` and `quarkus.oidc.roles.source=userinfo`, and if needed, `quarkus.oidc.roles.role-claim-path`."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:286
#, no-wrap
msgid "Single Page Applications"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:289
msgid "Please check if implementing SPAs the way it is suggested in the link:security-openid-connect#single-page-applications[Single Page Applications for Service Applications] section can meet your requirements."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:291
msgid "If you prefer to use SPA and `XMLHttpRequest`(XHR) with Quarkus applications, please be aware that OpenID Connect Providers may not support CORS for Authorization endpoints where the users are authenticated after a redirect from Quarkus. This will lead to authentication failures if the Quarkus application and the OpenID Connect Provider are hosted on the different HTTP domains/ports."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:293
msgid "In such cases, set the `quarkus.oidc.authentication.xhr-auto-redirect` property to `false` which will instruct Quarkus to return a `499` status code and `WWW-Authenticate` header with the `OIDC` value. The browser script also needs to be updated to set `X-Requested-With` header with the `XMLHttpRequest` value and reload the last requested page in case of `499`, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:298
#, no-wrap
msgid ""
"Future<void> callQuarkusService() async {\n"
"    Map<String, String> headers = Map.fromEntries([MapEntry(\"X-Requested-With\", \"XMLHttpRequest\")]);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:307
#, no-wrap
msgid ""
"    await http\n"
"        .get(\"https://localhost:443/serviceCall\")\n"
"        .then((response) {\n"
"            if (response.statusCode == 499) {\n"
"                window.location.assign(\"https://localhost.com:443/serviceCall\");\n"
"            }\n"
"         });\n"
"  }\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:310
#, no-wrap
msgid "Configuration Reference"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:314
#, no-wrap
msgid "References"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:317
msgid "https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:318
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:319
msgid "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-openid-connect-web-authentication.adoc:319
msgid "link:security[Quarkus Security]"
msgstr ""
