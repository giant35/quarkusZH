# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-09-01 01:05+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/1.7/guides/cdi.adoc:6
#, no-wrap
msgid "Quarkus - Introduction to Contexts and Dependency Injection"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:15
msgid "In this guide we're going to describe the basic principles of the Quarkus programming model that is based on the http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html[Contexts and Dependency Injection for Java 2.0, window=\"_blank\"] specification."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/cdi.adoc:16
#, no-wrap
msgid "_Q: OK. Let's start simple. What is a bean?_"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:19
msgid "A: Well, a bean is a _container-managed_ object that supports a set of basic services, such as injection of dependencies, lifecycle callbacks and interceptors."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/cdi.adoc:20
#, no-wrap
msgid "_Q: Wait a minute. What does \"container-managed\" mean?_"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:26
msgid "A: Simply put, you don't control the lifecycle of the object instance directly.  Instead, you can affect the lifecycle through declarative means, such as annotations, configuration, etc.  The container is the _environment_ where your application runs.  It creates and destroys the instances of beans, associates the instances with a designated context, and injects them into other beans."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/cdi.adoc:27
#, no-wrap
msgid "_Q: What is it good for?_"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:30
msgid "A: An application developer can focus on the business logic rather than finding out \"where and how\" to obtain a fully initialized component with all of its dependencies."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:32
msgid "You've probably heard of the _inversion of control_ (IoC) programming principle. Dependency injection is one of the implementation techniques of IoC."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/cdi.adoc:33
#, no-wrap
msgid "_Q: What does a bean look like?_"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:37
msgid "A: There are several kinds of beans.  The most common ones are class-based beans:"
msgstr ""

#. type: Block title
#: upstream/_versions/1.7/guides/cdi.adoc:38
#, no-wrap
msgid "Simple Bean Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:44
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.enterprise.context.ApplicationScoped;\n"
"import org.eclipse.microprofile.metrics.annotation.Counted;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:47
#, no-wrap
msgid ""
"@ApplicationScoped <1>\n"
"public class Translator {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:50
#, no-wrap
msgid ""
"    @Inject\n"
"    Dictionary dictionary; <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:56
#, no-wrap
msgid ""
"    @Counted  <3>\n"
"    String translate(String sentence) { \n"
"      // ...\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:58
msgid "This is a scope annotation. It tells the container which context to associate the bean instance with. In this particular case, a *single bean instance* is created for the application and used by all other beans that inject `Translator`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:59
msgid "This is a field injection point. It tells the container that `Translator` depends on the `Dictionary` bean. If there is no matching bean the build fails."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:60
msgid "This is an interceptor binding annotation. In this case, the annotation comes from the MicroProfile Metrics. The relevant interceptor intercepts the invocation and updates the relevant metrics. We will about <<interceptors,interceptors>> later."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/cdi.adoc:61
#, no-wrap
msgid "_Q: Nice. How does the dependency resolution work? I see no names or identifiers._"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:70
msgid "A: That's a good question.  In CDI the process of matching a bean to an injection point is *type-safe*.  Each bean declares a set of bean types.  In our example above, the `Translator` bean has two bean types: `Translator` and `java.lang.Object`.  Subsequently, a bean is assignable to an injection point if the bean has a bean type that matches the _required type_ and has all the _required qualifiers_.  We'll talk about qualifiers later.  For now, it's enough to know that the bean above is assignable to an injection point of type `Translator` and `java.lang.Object`."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/cdi.adoc:71
#, no-wrap
msgid "_Q: Hm, wait a minute. What happens if multiple beans declare the same type?_"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:77
msgid "A: There is a simple rule: *exactly one bean must be assignable to an injection point, otherwise the build fails*.  If none is assignable the build fails with `UnsatisfiedResolutionException`.  If multiple are assignable the build fails with `AmbiguousResolutionException`.  This is very useful because your application fails fast whenever the container is not able to find an unambiguous dependency for any injection point."
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.7/guides/cdi.adoc:81
msgid "Your can use programmatic lookup via `javax.enterprise.inject.Instance` to resolve ambiguities at runtime and even iterate over all beans implementing a given type:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:85
#, no-wrap
msgid "public class Translator {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:88
#, no-wrap
msgid ""
"    @Inject\n"
"    Instance<Dictionary> dictionaries; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:95
#, no-wrap
msgid ""
"    String translate(String sentence) { \n"
"      for (Dictionary dict : dictionaries) { <2>\n"
"         // ...\n"
"      }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:97
msgid "This injection point will not result in an ambiguous dependency even if there are multiple beans that implement the `Dictionary` type."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:98
msgid "`javax.enterprise.inject.Instance` extends `Iterable`."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/cdi.adoc:100
#, no-wrap
msgid "_Q: Can I use setter and constructor injection?_"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.7/guides/cdi.adoc:105
msgid "A: Yes, you can.  In fact, in CDI the \"setter injection\" is superseded by more powerful https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#initializer_methods[initializer methods, window=\"_blank\"].  Intializers may accept multiple parameters and don't have to follow the JavaBean naming conventions."
msgstr ""

#. type: Block title
#: upstream/_versions/1.7/guides/cdi.adoc:106
#, no-wrap
msgid "Initialized and Constructor Injection Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:111
#: upstream/_versions/1.7/guides/cdi.adoc:304
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class Translator {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:113
#, no-wrap
msgid "    private final TranslatorHelper helper\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:117
#, no-wrap
msgid ""
"    Translator(TranslatorHelper helper) { <1>\n"
"       this.helper = helper;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:123
#, no-wrap
msgid ""
"    @Inject <2>\n"
"    void setDeps(Dictionary dic, LocalizationService locService) { <3>\n"
"      / ...\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:128
msgid "This is a constructor injection.  In fact, this code would not work in regular CDI implementations where a bean with a normal scope must always declare a no-args constructor and the bean constructor must be annotated with `@Inject`.  However, in Quarkus we detect the absence of no-args constructor and \"add\" it directly in the bytecode.  It's also not necessary to add `@Inject` if there is only one constructor present."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:129
msgid "An initializer method must be annotated with `@Inject`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:130
msgid "An initializer may accept multiple parameters - each one is an injection point."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/cdi.adoc:131
#, no-wrap
msgid "_Q: You talked about some qualifiers?_"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:136
msgid "A: https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#qualifiers[Qualifiers, window=\"_blank\"] are annotations that help the container to distinguish beans that implement the same type.  As we already said a bean is assignable to an injection point if it has all the required qualifiers.  If you declare no qualifier at an injection point the `@Default` qualifier is assumed."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:138
msgid "A qualifier type is a Java annotation defined as `@Retention(RUNTIME)` and annotated with the `@javax.inject.Qualifier` meta-annotation:"
msgstr ""

#. type: Block title
#: upstream/_versions/1.7/guides/cdi.adoc:139
#, no-wrap
msgid "Qualifier Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:146
#, no-wrap
msgid ""
"@Qualifier\n"
"@Retention(RUNTIME)\n"
"@Target({METHOD, FIELD, PARAMETER, TYPE})\n"
"public @interface Superior {}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:149
msgid "The qualifiers of a bean are declared by annotating the bean class or producer method or field with the qualifier types:"
msgstr ""

#. type: Block title
#: upstream/_versions/1.7/guides/cdi.adoc:150
#, no-wrap
msgid "Bean With Custom Qualifier Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:156
#, no-wrap
msgid ""
"@Superior <1>\n"
"@ApplicationScoped\n"
"public class SuperiorTranslator extends Translator {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:161
#: upstream/_versions/1.7/guides/cdi.adoc:208
#, no-wrap
msgid ""
"    String translate(String sentence) { \n"
"      // ...\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:163
msgid "`@Superior` is a https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#defining_qualifier_types[qualifier annotation, window=\"_blank\"]."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:167
msgid "This bean would be assignable to `@Inject @Superior Translator` and `@Inject @Superior SuperiorTranslator` but not to `@Inject Translator`.  The reason is that `@Inject Translator` is automatically transformed to `@Inject @Default Translator` during typesafe resolution.  And since our `SuperiorTranslator` does not declare `@Default` only the original `Translator` bean is assignable."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/cdi.adoc:168
#, no-wrap
msgid "_Q: Looks good. What is the bean scope?_"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:171
msgid "The scope of a bean determines the lifecycle of its instances, i.e. when and where an instance should be created and destroyed."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:173
msgid "Every bean has exactly one scope."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/cdi.adoc:174
#, no-wrap
msgid "_Q: What scopes can I actually use in my Quarkus application?_"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:177
msgid "A: You can use all the built-in scopes mentioned by the specification except for `javax.enterprise.context.ConversationScoped`."
msgstr ""

#. type: Table
#: upstream/_versions/1.7/guides/cdi.adoc:180
#, no-wrap
msgid "Annotation"
msgstr ""

#. type: Table
#: upstream/_versions/1.7/guides/cdi.adoc:182
#, no-wrap
msgid ""
"Description   \n"
"//----------------------"
msgstr ""

#. type: Table
#: upstream/_versions/1.7/guides/cdi.adoc:182
#, no-wrap
msgid "`@javax.enterprise.context.ApplicationScoped`"
msgstr ""

#. type: Table
#: upstream/_versions/1.7/guides/cdi.adoc:183
#, no-wrap
msgid "A single bean instance is used for the application and shared among all injection points. The instance is created lazily, i.e. once a method is invoked upon the <<client_proxies, client proxy>>."
msgstr ""

#. type: Table
#: upstream/_versions/1.7/guides/cdi.adoc:183
#, no-wrap
msgid "`@javax.inject.Singleton`"
msgstr ""

#. type: Table
#: upstream/_versions/1.7/guides/cdi.adoc:184
#, no-wrap
msgid "Just like `@ApplicationScoped` except that no client proxy is used. The instance is created when an injection point that resolves to a @Singleton bean is being injected."
msgstr ""

#. type: Table
#: upstream/_versions/1.7/guides/cdi.adoc:184
#, no-wrap
msgid "`@javax.enterprise.context.RequestScoped`"
msgstr ""

#. type: Table
#: upstream/_versions/1.7/guides/cdi.adoc:185
#, no-wrap
msgid "The bean instance is associated with the current _request_ (usually an HTTP request)."
msgstr ""

#. type: Table
#: upstream/_versions/1.7/guides/cdi.adoc:185
#, no-wrap
msgid "`@javax.enterprise.context.Dependent`"
msgstr ""

#. type: Table
#: upstream/_versions/1.7/guides/cdi.adoc:186
#, no-wrap
msgid "This is a pseudo-scope. The instances are not shared and every injection point spawns a new instance of the dependent bean. The lifecycle of dependent bean is bound to the bean injecting it - it will be created and destroyed along with the bean injecting it."
msgstr ""

#. type: Table
#: upstream/_versions/1.7/guides/cdi.adoc:186
#, no-wrap
msgid "`@javax.enterprise.context.SessionScoped`"
msgstr ""

#. type: Table
#: upstream/_versions/1.7/guides/cdi.adoc:187
#, no-wrap
msgid "This scope is backed by an `javax.servlet.http.HttpSession` object. It's only available if the `quarkus-undertow` extension is used."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:190
msgid "There can be other custom scopes provided by Quarkus extensions. For example, `quarkus-narayana-jta` provides `javax.transaction.TransactionScoped`."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/cdi.adoc:192
#, no-wrap
msgid "_Q: I don't undestand the concept of client proxies._"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:197
msgid "Indeed, the https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#client_proxies[client proxies, window=\"_blank\"] could be hard to grasp but they provide some useful functionality.  A client proxy is basically an object that delegates all method invocations to a target bean instance.  It's a container construct that implements `io.quarkus.arc.ClientProxy` and extends the bean class."
msgstr ""

#. type: Block title
#: upstream/_versions/1.7/guides/cdi.adoc:198
#, no-wrap
msgid "Generated Client Proxy Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:203
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"class Translator {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:211
#, no-wrap
msgid ""
"// The client proxy class is generated and looks like...\n"
"class Translator_ClientProxy extends Translator { <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:219
#, no-wrap
msgid ""
"    String translate(String sentence) { \n"
"      // Find the correct translator instance...\n"
"      Translator translator = getTranslatorInstanceFromTheApplicationContext();\n"
"      // And delegate the method invocation...\n"
"      return translator.translate(sentence);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:221
msgid "The `Translator_ClientProxy` instance is always injected instead of a direct reference to a https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#contextual_instance[contextual instance, window=\"_blank\"] of the `Translator` bean."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:223
msgid "Client proxies allow for:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:225
msgid "Lazy instantiation - the instance is created once a method is invoked upon the proxy."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:226
msgid "Ability to inject a bean with \"narrower\" scope to a bean with \"wider\" scope; i.e. you can inject a `@RequestScoped` bean into an `@ApplicationScoped` bean."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:227
msgid "Circular dependencies in the dependency graph. Having circular dependencies is often an indication that a redesign should be considered, but sometimes it's inevitable."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:228
msgid "In rare cases it's practical to destroy the beans manually. A direct injected reference would lead to a stale bean instance."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/cdi.adoc:230
#, no-wrap
msgid "_Q: OK. You said that there are several kinds of beans?_"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:233
msgid "A: Yes. In general, we distinguish:"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:235
msgid "Class beans"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:236
msgid "Producer methods"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:237
msgid "Producer fields"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:238
msgid "Synthetic beans"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:240
msgid "Synthetic beans are usually provided by extensions. Therefore, we not going to cover them in this guide."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:243
msgid "Producer methods and fields are useful if you need additional control over instantiation of a bean.  They are also useful when integrating third-party libraries where you don't control the class source and may not add additional annotations etc."
msgstr ""

#. type: Block title
#: upstream/_versions/1.7/guides/cdi.adoc:244
#, no-wrap
msgid "Producers Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:249
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class Producers {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:252
#, no-wrap
msgid ""
"    @Produces <1>\n"
"    double pi = Math.PI; <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:262
#, no-wrap
msgid ""
"    @Produces <3>\n"
"    List<String> names() {\n"
"       List<String> names = new ArrayList<>();\n"
"       names.add(\"Andy\");\n"
"       names.add(\"Adalbert\");\n"
"       names.add(\"Joachim\");\n"
"       return names; <4>\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:265
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class Consumer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:268
#, no-wrap
msgid ""
"   @Inject\n"
"   double pi;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:271
#, no-wrap
msgid ""
"   @Inject\n"
"   List<String> names;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:274
#, no-wrap
msgid ""
"   // ...   \n"
"} \n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:279
msgid "The container analyses the field annotations to build a bean metadata.  The _type_ is used to build the set of bean types.  In this case, it will be `double` and `java.lang.Object`.  No scope annotation is declared and so it's defaulted to `@Dependent`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:280
msgid "The container will read this field when creating the bean instance."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:284
msgid "The container analyses the method annotations to build a bean metadata.  The _return type_ is used to build the set of bean types.  In this case, it will be `List<String>`, `Collection<String>`, `Iterable<String>` and `java.lang.Object`.  No scope annotation is declared and so it's defaulted to `@Dependent`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:285
msgid "The container will call this method when creating the bean instance."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:289
msgid "There's more about producers.  You can declare qualifiers, inject dependencies into the producer methods parameters, etc.  You can read more about producers for example in the https://docs.jboss.org/weld/reference/latest/en-US/html/beanscdi.html#_producer_methods[Weld docs, window=\"_blank\"]."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/cdi.adoc:290
#, no-wrap
msgid "_Q: OK, injection looks cool. What other services are provided?_"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/cdi.adoc:292
#, no-wrap
msgid "Lifecycle Callbacks"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:295
msgid "A bean class may declare lifecycle `@PostConstruct` and `@PreDestroy` callbacks:"
msgstr ""

#. type: Block title
#: upstream/_versions/1.7/guides/cdi.adoc:296
#, no-wrap
msgid "Lifecycle Callbacks Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:301
#, no-wrap
msgid ""
"import javax.annotation.PostConstruct;\n"
"import javax.annotation.PreDestroy;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:309
#, no-wrap
msgid ""
"    @PostConstruct <1>\n"
"    void init() {\n"
"       // ...\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:315
#, no-wrap
msgid ""
"    @PreDestroy <2>\n"
"    void destroy() {\n"
"      // ...\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:317
msgid "This callback is invoked before the bean instance is put into service. It is safe to perform some initialization here."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:318
msgid "This callback is invoked before the bean instance is destroyed. It is safe to perform some cleanup tasks here."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:320
msgid "It's a good practice to keep the logic in the callbacks \"without side effects\", i.e. you should avoid calling other beans inside the callbacks."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/cdi.adoc:322
#, no-wrap
msgid "Interceptors"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:326
msgid "Interceptors are used to separate cross-cutting concerns from business logic.  There is a separate specification - Java Interceptors - that defines the basic programming model and semantics."
msgstr ""

#. type: Block title
#: upstream/_versions/1.7/guides/cdi.adoc:327
#, no-wrap
msgid "Simple Interceptor Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:332
#, no-wrap
msgid ""
"import javax.interceptor.Interceptor;\n"
"import javax.annotation.Priority;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:337
#, no-wrap
msgid ""
"@Logged <1>\n"
"@Priority(2020) <2>\n"
"@Interceptor <3>\n"
"public class LoggingInterceptor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:340
#, no-wrap
msgid ""
"   @Inject <4>\n"
"   Logger logger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:348
#, no-wrap
msgid ""
"   @AroundInvoke <5>\n"
"   Objec logInvocation(InvocationContext context) {\n"
"      // ...log before\n"
"      Objec ret = context.proceed(); <6>\n"
"      // ...log after\n"
"      return ret;\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:350
#: upstream/_versions/1.7/guides/cdi.adoc:386
#: upstream/_versions/1.7/guides/cdi.adoc:395
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:352
msgid "This is an interceptor binding annotation that is used to bind our interceptor to a bean. Simply annotate a bean class with `@Logged`."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:353
msgid "`Priority` enables the interceptor and affects the interceptor ordering. Interceptors with smaller priority values are called first."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:354
msgid "Marks an interceptor component."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:355
msgid "An interceptor instance may be the target of dependency injection."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:356
msgid "`AroundInvoke` denotes a method that interposes on business methods."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:357
msgid "Proceed to the next interceptor in the interceptor chain or invoke the intercepted business method."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:359
msgid "Instances of interceptors are dependent objects of the bean instance they intercept, i.e. a new interceptor instance is created for each intercepted bean."
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/cdi.adoc:360
#, no-wrap
msgid "Events and Observers"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:365
msgid "Beans may also produce and consume events to interact in a completely decoupled fashion.  Any Java object can serve as an event payload.  The optional qualifiers act as topic selectors."
msgstr ""

#. type: Block title
#: upstream/_versions/1.7/guides/cdi.adoc:366
#, no-wrap
msgid "Simple Event Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:373
#, no-wrap
msgid ""
"class TaskCompleted {\n"
"  // ...\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:376
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"class ComplicatedService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:379
#, no-wrap
msgid ""
"   @Inject\n"
"   Event<Task> event; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:384
#, no-wrap
msgid ""
"   void doSomething() {\n"
"      // ...\n"
"      event.fire(new TaskCompleted()); <2>\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:389
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"class Logger {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/cdi.adoc:393
#, no-wrap
msgid ""
"   void onTaskCompleted(@Observes TaskCompleted task) { <3>\n"
"      // ...log the task\n"
"   }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:397
msgid "`javax.enterprise.event.Event` is used to fire events."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:398
msgid "Fire the event synchronously."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:399
msgid "This method is notified when a `TaskCompleted` event is fired."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:401
msgid "For more info about events/observers visit https://docs.jboss.org/weld/reference/latest/en-US/html/events.html[Weld docs, window=\"_blank\"]."
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/cdi.adoc:402
#, no-wrap
msgid "Conclusion"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:409
msgid "In this guide, we've covered some of the basic topics of the Quarkus programming model that is based on the http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html[Contexts and Dependency Injection for Java 2.0, window=\"_blank\"] specification.  However, a full CDI implementation is not used under the hood.  Quarkus only implements a subset of the CDI features - see also <<cdi-reference.adoc#supported_features,the list of supported features>> and <<cdi-reference.adoc#limitations,the list of limitations>>.  On the other hand, there are quite a few <<cdi-reference#nonstandard_features,non-standard features>> and <<cdi-reference.adoc#build_time_apis,Quarkus-specific APIs>>.  We believe that our efforts will drive the innovation of the CDI specification towards the build-time oriented developer stacks in the future."
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/cdi.adoc:411
msgid "If you wish to learn more about Quarkus-specific features and limitations there is a Quarkus link:cdi-reference[CDI Reference Guide].  We also recommend you to read the http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html[CDI specification] and the https://docs.jboss.org/weld/reference/latest/en-US/html/[Weld documentation] (Weld is a CDI Reference Implementation) to get acquainted with more complex topics."
msgstr ""
