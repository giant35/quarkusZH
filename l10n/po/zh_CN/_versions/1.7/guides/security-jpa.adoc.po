# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-07-10 05:19+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/1.7/guides/security-jpa.adoc:6
#, no-wrap
msgid "Quarkus - Using Security with JPA"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-jpa.adoc:12
msgid "This guide demonstrates how your Quarkus application can use a database to store your user identities with link:hibernate-orm[Hibernate ORM] or link:hibernate-orm-panache[Hibernate ORM with Panache]."
msgstr "このガイドでは、Quarkusアプリケーションがデータベースを使用し、 link:hibernate-orm[Hibernate ORM]または link:hibernate-orm-panache[Hibernate ORM with Panache]を使用してユーザーIDを保存する方法を説明します。"

#. type: Title ==
#: upstream/_versions/1.7/guides/security-jpa.adoc:14
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-jpa.adoc:17
msgid "To complete this guide, you need:"
msgstr "このガイドを完成させるには、以下が必要です:"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-jpa.adoc:19
msgid "less than 15 minutes"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-jpa.adoc:20
msgid "an IDE"
msgstr "IDE"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-jpa.adoc:21
msgid "JDK 1.8+ installed with `JAVA_HOME` configured appropriately"
msgstr "JDK 1.8+ がインストールされ、 `JAVA_HOME`  が適切に設定されていること"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-jpa.adoc:22
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Title ==
#: upstream/_versions/1.7/guides/security-jpa.adoc:23
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-jpa.adoc:26
msgid "In this example, we build a very simple microservice which offers three endpoints:"
msgstr "この例では、3つのエンドポイントを提供する非常にシンプルなマイクロサービスを構築します:"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-jpa.adoc:28
msgid "`/api/public`"
msgstr "`/api/public`"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-jpa.adoc:29
msgid "`/api/users/me`"
msgstr "`/api/users/me`"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-jpa.adoc:30
msgid "`/api/admin`"
msgstr "`/api/admin`"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-jpa.adoc:34
msgid "The `/api/public` endpoint can be accessed anonymously.  The `/api/admin` endpoint is protected with RBAC (Role-Based Access Control) where only users granted with the `admin` role can access. At this endpoint, we use the `@RolesAllowed` annotation to declaratively enforce the access constraint.  The `/api/users/me` endpoint is also protected with RBAC (Role-Based Access Control) where only users granted with the `user` role can access. As a response, it returns a JSON document with details about the user."
msgstr "`/api/public` エンドポイントは匿名でアクセスできます。 `/api/admin` エンドポイントは RBAC (Role-Based Access Control) で保護されており、 `admin` の役割を与えられたユーザーのみがアクセスできます。このエンドポイントでは、 `@RolesAllowed` アノテーションを使用して、アクセス制約を宣言的に強制します。 `/api/users/me` エンドポイントも RBAC (Role-Based Access Control) で保護されており、 `user` ロールで付与されたユーザーのみがアクセスできます。レスポンスとして、ユーザーに関する詳細を含むJSONドキュメントを返します。"

#. type: Title ==
#: upstream/_versions/1.7/guides/security-jpa.adoc:35
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-jpa.adoc:39
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-jpa.adoc:41
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-jpa.adoc:43
msgid "The solution is located in the `security-jpa-quickstart` {quickstarts-tree-url}/security-jpa-quickstart[directory]."
msgstr "ソリューションは `security-jpa-quickstart` {quickstarts-tree-url}/security-jpa-quickstart[ディレクトリ] にあります。"

#. type: Title ==
#: upstream/_versions/1.7/guides/security-jpa.adoc:44
#, no-wrap
msgid "Creating the Maven Project"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-jpa.adoc:47
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-jpa.adoc:55
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=security-jpa-quickstart \\\n"
"    -Dextensions=\"security-jpa, jdbc-postgresql, resteasy, hibernate-orm-panache\"\n"
"cd security-jpa-quickstart\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.7/guides/security-jpa.adoc:60
msgid "Don't forget to add the database connector library of choice. Here we are using PostgreSQL as identity store."
msgstr "選択したデータベースコネクタライブラリを追加することを忘れないでください。ここでは、PostgreSQLをIDストアとして使用しています。"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-jpa.adoc:64
msgid "This command generates a Maven project, importing the `security-jpa` extension which allows you to map your security source to JPA entities."
msgstr "このコマンドは、セキュリティー ソースを JPA エンティティーにマップできる `security-jpa` エクステンションをインポートして、Maven プロジェクトを生成します。"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-jpa.adoc:67
msgid "If you already have your Quarkus project configured, you can add the `security-jpa` extension to your project by running the following command in your project base directory:"
msgstr "すでにQuarkusプロジェクトが設定されている場合は、プロジェクトのベースディレクトリーで以下のコマンドを実行することで、プロジェクトに `security-jpa` エクステンションを追加することができます:"

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-jpa.adoc:71
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"security-jpa\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-jpa.adoc:74
msgid "This will add the following to your `pom.xml`:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-jpa.adoc:81
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-security-jpa</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/security-jpa.adoc:83
#, no-wrap
msgid "Writing the application"
msgstr "アプリケーションの記述"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-jpa.adoc:86
msgid "Let's start by implementing the `/api/public` endpoint. As you can see from the source code below, it is just a regular JAX-RS resource:"
msgstr "`/api/public` エンドポイントの実装から始めましょう。以下のソースコードから分かるように、通常のJAX-RSリソースです:"

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-jpa.adoc:90
#: upstream/_versions/1.7/guides/security-jpa.adoc:115
#: upstream/_versions/1.7/guides/security-jpa.adoc:140
#: upstream/_versions/1.7/guides/security-jpa.adoc:170
#: upstream/_versions/1.7/guides/security-jpa.adoc:237
#, no-wrap
msgid "package org.acme.security.jpa;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-jpa.adoc:96
#, no-wrap
msgid ""
"import javax.annotation.security.PermitAll;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-jpa.adoc:99
#, no-wrap
msgid ""
"@Path(\"/api/public\")\n"
"public class PublicResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-jpa.adoc:107
#, no-wrap
msgid ""
"    @GET\n"
"    @PermitAll\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String publicResource() {\n"
"        return \"public\";\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-jpa.adoc:110
msgid "The source code for the `/api/admin` endpoint is also very simple. The main difference here is that we are using a `@RolesAllowed` annotation to make sure that only users granted with the `admin` role can access the endpoint:"
msgstr "`/api/admin` エンドポイントのソースコードも非常にシンプルです。ここでの主な違いは、 `admin` ロールで付与されたユーザーだけがエンドポイントにアクセスできるように `@RolesAllowed` アノテーションを使用していることです:"

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-jpa.adoc:121
#, no-wrap
msgid ""
"import javax.annotation.security.RolesAllowed;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-jpa.adoc:124
#, no-wrap
msgid ""
"@Path(\"/api/admin\")\n"
"public class AdminResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-jpa.adoc:132
#, no-wrap
msgid ""
"    @GET\n"
"    @RolesAllowed(\"admin\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String adminResource() {\n"
"         return \"admin\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-jpa.adoc:136
msgid "Finally, let's consider the `/api/users/me` endpoint. As you can see from the source code below, we are trusting only users with the `user` role.  We are using `SecurityContext` to get access to the current authenticated Principal and we return the user's name. This information is loaded from the database."
msgstr "最後に、 `/api/users/me` エンドポイントを考えてみましょう。下のソースコードを見ればわかるように、 `user` の役割を持つユーザのみを信頼しています。現在認証されているプリンシパルへのアクセスを得るために `SecurityContext` を使用しており、ユーザーの名前を返します。この情報はデータベースから読み込まれます。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-jpa.adoc:149
#, no-wrap
msgid ""
"import javax.annotation.security.RolesAllowed;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.Context;\n"
"import javax.ws.rs.core.MediaType;\n"
"import javax.ws.rs.core.SecurityContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-jpa.adoc:152
#, no-wrap
msgid ""
"@Path(\"/api/users\")\n"
"public class UserResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-jpa.adoc:161
#, no-wrap
msgid ""
"    @GET\n"
"    @RolesAllowed(\"user\")\n"
"    @Path(\"/me\")\n"
"    @Produces(MediaType.APPLICATION_JSON)\n"
"    public String me(@Context SecurityContext securityContext) {\n"
"        return securityContext.getUserPrincipal().getName();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/1.7/guides/security-jpa.adoc:163
#, no-wrap
msgid "Defining our user entity"
msgstr "ユーザーエンティティーの定義"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-jpa.adoc:166
msgid "We can now describe how our security information is stored in our model by adding a few annotations to our `User` entity:"
msgstr "これで、 `User` エンティティーにいくつかのアノテーションを追加することで、セキュリティー情報がモデルにどのように保存されているかを説明することができます:"

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-jpa.adoc:173
#, no-wrap
msgid ""
"import javax.persistence.Entity;\n"
"import javax.persistence.Table;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-jpa.adoc:180
#, no-wrap
msgid ""
"import io.quarkus.hibernate.orm.panache.PanacheEntity;\n"
"import io.quarkus.security.common.BcryptUtil;\n"
"import io.quarkus.security.jpa.Password;\n"
"import io.quarkus.security.jpa.Roles;\n"
"import io.quarkus.security.jpa.UserDefinition;\n"
"import io.quarkus.security.jpa.Username;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-jpa.adoc:191
#, no-wrap
msgid ""
"@Entity\n"
"@Table(name = \"test_user\")\n"
"@UserDefinition <1>\n"
"public class User extends PanacheEntity {\n"
"    @Username <2>\n"
"    public String username;\n"
"    @Password <3>\n"
"    public String password;\n"
"    @Roles <4>\n"
"    public String role;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-jpa.adoc:206
#, no-wrap
msgid ""
"    /**\n"
"     * Adds a new user in the database\n"
"     * @param username the user name\n"
"     * @param password the unencrypted password (it will be encrypted with bcrypt)\n"
"     * @param role the comma-separated roles\n"
"     */\n"
"    public static void add(String username, String password, String role) { <5>\n"
"        User user = new User();\n"
"        user.username = username;\n"
"        user.password = BcryptUtil.bcryptHash(password);\n"
"        user.role = role;\n"
"        user.persist();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-jpa.adoc:210
msgid "The `security-jpa` extension is only initialized if there is a single entity annotated with `@UserDefinition`."
msgstr "`security-jpa` エクステンションは、 `@UserDefinition` でアノテーションされた単一のエンティティーがある場合にのみ初期化されます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-jpa.adoc:212
msgid "This annotation must be present on a single entity. It can be a regular Hibernate ORM entity or a Hibernate ORM with Panache entity as in this example."
msgstr "このアノテーションは、単一のエンティティーに存在しなければなりません。この例のように、通常のHibernate ORMエンティティーまたはHibernate ORM with Panacheエンティティーにすることができます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-jpa.adoc:213
msgid "This indicates the field used for the user name."
msgstr "これは、ユーザー名に使用されるフィールドを示します。"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-jpa.adoc:214
msgid "This indicates the field used for the password. This defaults to using bcrypt hashed passwords, but you can also configure it for clear text passwords."
msgstr "これは、パスワードに使用するフィールドを示します。これはデフォルトでは bcrypt ハッシュ化されたパスワードを使用するように設定されていますが、クリアテキストパスワード用に設定することもできます。"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-jpa.adoc:215
msgid "This indicates the comma-separated list of roles added to the target Principal representation attributes."
msgstr "これは、対象のプリンシパル表現属性に追加されたロールのコンマ区切りリストを示します。"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-jpa.adoc:216
msgid "This method allows us to add users while hashing the password with the proper bcrypt hash."
msgstr "この方法では、パスワードを適切なbcryptハッシュでハッシュしながらユーザーを追加することができます。"

#. type: Title ===
#: upstream/_versions/1.7/guides/security-jpa.adoc:217
#, no-wrap
msgid "Configuring the Application"
msgstr "アプリケーションの設定"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-jpa.adoc:220
msgid "The `security-jpa` extension requires at least one datasource to access to your database."
msgstr "`security-jpa` エクステンションは、データベースにアクセスするために少なくとも一つのデータソースが必要です。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-jpa.adoc:227
#, no-wrap
msgid ""
"quarkus.datasource.db-kind=postgresql\n"
"quarkus.datasource.username=quarkus\n"
"quarkus.datasource.password=quarkus\n"
"quarkus.datasource.jdbc.url=jdbc:postgresql:security_jpa\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-jpa.adoc:229
#, no-wrap
msgid "quarkus.hibernate-orm.database.generation=drop-and-create\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-jpa.adoc:233
msgid "In our context, we are using PostgreSQL as identity store. The database schema is created by Hibernate ORM automatically on startup (change this in production) and we initialize the database with users and roles in the `Startup` class:"
msgstr "私たちのコンテキストでは、IDストアとしてPostgreSQLを使用しています。データベーススキーマはHibernate ORMによって起動時に自動的に作成され(本番ではこれを変更します)、 `Startup` クラスのユーザーとロールでデータベースを初期化します。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-jpa.adoc:241
#, no-wrap
msgid ""
"import javax.enterprise.event.Observes;\n"
"import javax.inject.Singleton;\n"
"import javax.transaction.Transactional;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-jpa.adoc:243
#, no-wrap
msgid "import io.quarkus.runtime.StartupEvent;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-jpa.adoc:255
#, no-wrap
msgid ""
"@Singleton\n"
"public class Startup {\n"
"    @Transactional\n"
"    public void loadUsers(@Observes StartupEvent evt) {\n"
"        // reset and load all test users\n"
"        User.deleteAll();\n"
"        User.add(\"admin\", \"admin\", \"admin\");\n"
"        User.add(\"user\", \"user\", \"user\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/1.7/guides/security-jpa.adoc:261
msgid "It is probably useless but we kindly remind you that you must not store clear-text passwords in production environments ;-).  As a result, the `security-jpa` defaults to using bcrypt-hashed passwords."
msgstr "おそらく役に立たないと思いますが、本番環境ではクリアテキストのパスワードを保存してはいけないことをご注意ください。)その結果、 `security-jpa` はデフォルトで bcrypt でハッシュ化されたパスワードを使用するようになりました。"

#. type: Title ==
#: upstream/_versions/1.7/guides/security-jpa.adoc:263
#, no-wrap
msgid "Testing the Application"
msgstr "アプリケーションのテスト"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-jpa.adoc:267
msgid "The application is now protected and the identities are provided by our database.  The very first thing to check is to ensure the anonymous access works."
msgstr "アプリケーションが保護され、アイデンティティがデータベースから提供されるようになりました。非常に最初に確認しなければならないことは、匿名アクセスが機能することを確認することです。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-jpa.adoc:274
#, no-wrap
msgid ""
"$ curl -i -X GET http://localhost:8080/api/public\n"
"HTTP/1.1 200 OK\n"
"Content-Length: 6\n"
"Content-Type: text/plain;charset=UTF-8\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-jpa.adoc:276
#, no-wrap
msgid "public%\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-jpa.adoc:279
msgid "Now, let's try a to hit a protected resource anonymously."
msgstr "では、匿名で保護されたリソースを攻撃してみましょう。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-jpa.adoc:286
#, no-wrap
msgid ""
"$ curl -i -X GET http://localhost:8080/api/admin\n"
"HTTP/1.1 401 Unauthorized\n"
"Content-Length: 14\n"
"Content-Type: text/html;charset=UTF-8\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-jpa.adoc:288
#, no-wrap
msgid "Not authorized%\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-jpa.adoc:291
msgid "So far so good, now let's try with an allowed user."
msgstr "ここまでは順調ですが、今度は許可されたユーザーで試してみましょう。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-jpa.adoc:298
#, no-wrap
msgid ""
"$ curl -i -X GET -u admin:admin http://localhost:8080/api/admin\n"
"HTTP/1.1 200 OK\n"
"Content-Length: 5\n"
"Content-Type: text/plain;charset=UTF-8\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-jpa.adoc:300
#, no-wrap
msgid "admin%\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-jpa.adoc:303
msgid "By providing the `admin:admin` credentials, the extension authenticated the user and loaded their roles.  The `admin` user is authorized to access to the protected resources."
msgstr "`admin:admin` 資格情報を提供することで、エクステンションはユーザーを認証し、そのロールをロードしました。 `admin` ユーザーは、保護されたリソースへのアクセスを許可されています。"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-jpa.adoc:305
msgid "The user `admin` should be forbidden to access a resource protected with `@RolesAllowed(\"user\")` because it doesn't have this role."
msgstr "ユーザー `admin` は、この役割を持っていないので、 `@RolesAllowed(\"user\")` で保護されたリソースへのアクセスを禁止する必要があります。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-jpa.adoc:311
#, no-wrap
msgid ""
"$ curl -i -X GET -u admin:admin http://localhost:8080/api/users/me\n"
"HTTP/1.1 403 Forbidden\n"
"Content-Length: 34\n"
"Content-Type: text/html;charset=UTF-8\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-jpa.adoc:313
#, no-wrap
msgid "Forbidden%\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/1.7/guides/security-jpa.adoc:316
msgid "Finally, using the user `user` works and the security context contains the principal details (username for instance)."
msgstr "最後に、ユーザー `user` を使用すると動作し、セキュリティーコンテキストには主要な詳細(例えばユーザー名)が含まれています。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-jpa.adoc:322
#, no-wrap
msgid ""
"curl -i -X GET -u user:user http://localhost:8080/api/users/me\n"
"HTTP/1.1 200 OK\n"
"Content-Length: 4\n"
"Content-Type: text/plain;charset=UTF-8\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-jpa.adoc:324
#, no-wrap
msgid "user%\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/security-jpa.adoc:326
#, no-wrap
msgid "Supported model types"
msgstr "サポートされているモデルの種類"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-jpa.adoc:329
msgid "The `@UserDefinition` class must be a JPA entity (with Panache or not)."
msgstr "`@UserDefinition` クラスは JPA エンティティーである必要があります(Panache を使用しているかどうかは問いません)。"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-jpa.adoc:330
msgid "The `@Username` and `@Password` field types must be of type `String`."
msgstr "`@Username` と `@Password` フィールドの型は `String` でなければなりません。"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-jpa.adoc:331
msgid "The `@Roles` field must either be of type `String` or `Collection<String>` or alternately a `Collection<X>` where `X` is an entity class with one `String` field annotated with the `@RolesValue` annotation."
msgstr "`@Roles` フィールドは `String` か `Collection&amp;lt;String&amp;gt;` のいずれかのタイプであるか、または `Collection&amp;lt;X&amp;gt;` である必要があります。 `X` はエンティティークラスで、 `@RolesValue` アノテーションが付与された `String` フィールドが 1 つあります。"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-jpa.adoc:332
msgid "Each `String` role element type will be parsed as a comma-separated list of roles."
msgstr "各 `String` role 要素の型は、カンマで区切られたロールのリストとして解析されます。"

#. type: Title ==
#: upstream/_versions/1.7/guides/security-jpa.adoc:333
#, no-wrap
msgid "Storing roles in another entity"
msgstr "別のエンティティーにロールを格納する"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-jpa.adoc:336
msgid "You can also store roles in another entity:"
msgstr "また、別のエンティティーにロールを格納することもできます。"

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-jpa.adoc:345
#, no-wrap
msgid ""
"@UserDefinition\n"
"@Table(name = \"test_user\")\n"
"@Entity\n"
"public class User extends PanacheEntity {\n"
"    @Username\n"
"    public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-jpa.adoc:348
#, no-wrap
msgid ""
"    @Password\n"
"    public String pass;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-jpa.adoc:353
#, no-wrap
msgid ""
"    @ManyToMany\n"
"    @Roles\n"
"    public List<Role> roles = new ArrayList<>();\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-jpa.adoc:356
#, no-wrap
msgid ""
"@Entity\n"
"public class Role extends PanacheEntity {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-jpa.adoc:359
#, no-wrap
msgid ""
"    @ManyToMany(mappedBy = \"roles\")\n"
"    public List<ExternalRolesUserEntity> users;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/1.7/guides/security-jpa.adoc:363
#, no-wrap
msgid ""
"    @RolesValue\n"
"    public String role;\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/1.7/guides/security-jpa.adoc:365
#, no-wrap
msgid "Password storage and hashing"
msgstr "パスワードの保存とハッシュ化"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-jpa.adoc:369
msgid "By default, we consider passwords to be stored hashed with https://en.wikipedia.org/wiki/Bcrypt[bcrypt] under the https://en.wikipedia.org/wiki/Crypt_(C)[Modular Crypt Format] (MCF)."
msgstr "デフォルトでは、パスワードは MCF ( link:https://en.wikipedia.org/wiki/Crypt_©[Modular Crypt Format]) の下で link:https://en.wikipedia.org/wiki/Bcrypt[bcrypt]でハッシュ化されて保存されると考えています。"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-jpa.adoc:373
msgid "When you need to create such a hashed password we provide the convenient `String BcryptUtil.bcryptHash(String password)` function, which defaults to creating a random salt and hashing in 10 iterations (though you can specify the iterations and salt too)."
msgstr "このようなハッシュ化されたパスワードを作成する必要がある場合は、便利な `String BcryptUtil.bcryptHash(String password)` 関数を用意しています。デフォルトでは、ランダムなソルトを作成して 10 回の繰り返しでハッシュ化します (繰り返しとソルトも指定できます)。"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-jpa.adoc:376
msgid "with MCF you don't need dedicated columns to store the hashing algorithm, the iterations count or the salt because they're all stored in the hashed value."
msgstr "MCF を使うと、ハッシュアルゴリズムや反復回数、 ソルトを格納するための専用のカラムは必要ありません。"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-jpa.adoc:379
msgid "WARN: you can also store passwords in clear text with `@Password(PasswordType.CLEAR)` but we strongly recommend against it in production."
msgstr "警告: `@Password(PasswordType.CLEAR)` を使ってパスワードをクリアテキストで保存することもできますが、本番では絶対にしないことを強くお勧めします。"

#. type: Title ==
#: upstream/_versions/1.7/guides/security-jpa.adoc:380
#, no-wrap
msgid "References"
msgstr "参照"

#. type: Plain text
#: upstream/_versions/1.7/guides/security-jpa.adoc:382
msgid "link:security[Quarkus Security]"
msgstr "link:security[Quarkus Security]"
